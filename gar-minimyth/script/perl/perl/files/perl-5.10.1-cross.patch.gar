diff -Naur perl-5.10.1-old/installman perl-5.10.1-new/installman
--- perl-5.10.1-old/installman	2009-02-12 14:58:12.000000000 -0800
+++ perl-5.10.1-new/installman	2009-08-24 14:47:02.000000000 -0700
@@ -1,6 +1,6 @@
-#!./perl -w
+#!perl -w
 BEGIN {
-    @INC = qw(lib);
+#    @INC = qw(lib);
     
     # This needs to be at BEGIN time, before any use of Config
     require './install_lib.pl';
diff -Naur perl-5.10.1-old/installperl perl-5.10.1-new/installperl
--- perl-5.10.1-old/installperl	2009-08-13 15:40:10.000000000 -0700
+++ perl-5.10.1-new/installperl	2009-08-24 14:47:02.000000000 -0700
@@ -1,10 +1,10 @@
-#!./perl -w
+#!perl -w
 
 BEGIN {
     require 5.004;
     chdir '..' if !-d 'lib' and -d '../lib';
-    @INC = 'lib';
-    $ENV{PERL5LIB} = 'lib';
+#    @INC = 'lib';
+#    $ENV{PERL5LIB} = 'lib';
 
     # This needs to be at BEGIN time, before any use of Config
     require './install_lib.pl';
@@ -881,7 +881,7 @@
 		print " " if (@opts);
 		print "$file\n";
 	    }
-	    system("strip", @opts, $file);
+	    system("@GAR_STRIP@", @opts, $file);
 	} else {
 	    print "# file '$file' skipped\n" if $opts{verbose};
 	}
diff -Naur perl-5.10.1-old/Makefile.SH perl-5.10.1-new/Makefile.SH
--- perl-5.10.1-old/Makefile.SH	2009-08-24 14:50:21.000000000 -0700
+++ perl-5.10.1-new/Makefile.SH	2009-08-24 14:48:37.000000000 -0700
@@ -55,12 +55,12 @@
 case "$useshrplib" in
 true)
 	# Prefix all runs of 'miniperl' and 'perl' with
-	# $ldlibpth so that ./perl finds *this* shared libperl.
+	# $ldlibpth so that perl finds *this* shared libperl.
 	case "$LD_LIBRARY_PATH" in
 	'')
-		ldlibpth="LD_LIBRARY_PATH=`pwd`";;
+		ldlibpth="LD_LIBRARY_PATH=";;
 	*)
-		ldlibpth="LD_LIBRARY_PATH=`pwd`:${LD_LIBRARY_PATH}";;
+		ldlibpth="LD_LIBRARY_PATH=${LD_LIBRARY_PATH}";;
 	esac
 
 	pldlflags="$cccdlflags"
@@ -402,7 +402,7 @@
 
 xconfig.h: config_h.SH Cross/config-\$(CROSS_NAME).sh
 	CONFIG_SH=Cross/config-\$(CROSS_NAME).sh CONFIG_H=xconfig.h \$(SHELL) config_h.SH
-	#TODO \$(LDLIBPTH) ./miniperl$(EXE_EXT) -Ilib -MCross=\$(CROSS_NAME) config_h.PL "INST_VER=\$(INST_VER)" "CORE_DIR=\$(CROSS_LIB)" "CONFIG_H=xconfig.h"
+	#TODO \$(LDLIBPTH) ./miniperl$(EXE_EXT) -MCross=\$(CROSS_NAME) config_h.PL "INST_VER=\$(INST_VER)" "CORE_DIR=\$(CROSS_LIB)" "CONFIG_H=xconfig.h"
 	cp xconfig.h \$(CROSS_LIB)/
 	cp xconfig.h \$(CROSS_LIB)/config.h
 
@@ -553,7 +553,7 @@
 .PHONY: all translators utilities
 
 lib/Config_git.pl git_version.h: miniperl$(EXE_EXT) make_patchnum.pl
-	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib make_patchnum.pl
+	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) make_patchnum.pl
 
 # make sure that we recompile perl.c if the git version changes
 perl$(OBJ_EXT): git_version.h
@@ -602,6 +602,7 @@
 
 generate_uudmap\$(HOST_EXE_EXT): generate_uudmap\$(OBJ_EXT)
 	\$(CC) -o generate_uudmap\$(EXE_EXT) \$(LDFLAGS) generate_uudmap\$(OBJ_EXT) \$(libs)
+	cp `which perl-generate_uudmap` generate_uudmap
 
 !GROK!THIS!
 $spitshell >>$Makefile <<'!NO!SUBS!'
@@ -776,7 +777,8 @@
 	$(CC) -o miniperl$(EXE_EXT) $(CLDFLAGS) \
 	    $(mini_obj) \
 	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) perlmini$(OBJ_EXT) $(libs)
-	$(LDLIBPTH) $(RUN) ./miniperl$(HOST_EXE_EXT) -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
+	cp `which perl-miniperl` miniperl
+	$(LDLIBPTH) $(RUN) ./miniperl$(HOST_EXE_EXT) -w -MExporter -e '<?>' || $(MAKE) minitest
 !NO!SUBS!
 		;;
 	next4*)
@@ -784,7 +786,8 @@
 miniperl$(EXE_EXT): $& miniperlmain$(OBJ_EXT) $(mini_obj) perlmini$(OBJ_EXT) opmini$(OBJ_EXT)
 	$(CC) -o miniperl$(EXE_EXT) $(mini_obj) \
 	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) perlmini$(OBJ_EXT) $(libs)
-	$(LDLIBPTH) $(RUN) ./miniperl$(HOST_EXE_EXT) -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
+	cp `which perl-miniperl` miniperl
+	$(LDLIBPTH) $(RUN) ./miniperl$(HOST_EXE_EXT) -w -MExporter -e '<?>' || $(MAKE) minitest
 !NO!SUBS!
 		;;
 	darwin*)
@@ -806,7 +809,8 @@
 	$(CC) $(CLDFLAGS) $(NAMESPACEFLAGS) -o miniperl$(EXE_EXT) \
 	    $(mini_obj) \
 	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) perlmini$(OBJ_EXT) $(libs)
-	$(LDLIBPTH) $(RUN) ./miniperl$(HOST_EXE_EXT) -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
+	cp `which perl-miniperl` miniperl
+	$(LDLIBPTH) $(RUN) ./miniperl$(HOST_EXE_EXT) -w -MExporter -e '<?>' || $(MAKE) minitest
 !NO!SUBS!
 		;;
 	*)
@@ -816,7 +820,8 @@
 	$(LDLIBPTH) $(CC) $(CLDFLAGS) -o miniperl$(EXE_EXT) \
 	    $(mini_obj) \
 	    miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) perlmini$(OBJ_EXT) $(libs)
-	$(LDLIBPTH) $(RUN) ./miniperl$(HOST_EXE_EXT) -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
+	cp `which perl-miniperl` miniperl
+	$(LDLIBPTH) $(RUN) ./miniperl$(HOST_EXE_EXT) -w -MExporter -e '<?>' || $(MAKE) minitest
 !NO!SUBS!
 		;;
 	esac
@@ -847,7 +852,7 @@
 	@grep "^usemymalloc="    config.sh
 	@grep "^usemymalloc='n'" config.sh >/dev/null || exit 1
 	@echo "And of course you have to have valgrind..."
-	$(VALGRIND) ./perl -e 1 2>/dev/null || exit 1
+	$(VALGRIND) perl -e 1 2>/dev/null || exit 1
 
 # Third Degree Perl (Tru64 only)
 
@@ -971,7 +976,7 @@
 $spitshell >>$Makefile <<'!NO!SUBS!'
 .PHONY: makeppport
 makeppport: miniperl$(EXE_EXT) $(CONFIGPM)
-	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib mkppport
+	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) mkppport
 
 !NO!SUBS!
 ;;
@@ -987,11 +992,11 @@
 preplibrary: miniperl$(EXE_EXT) $(CONFIGPM) lib/lib.pm $(PREPLIBRARY_LIBPERL)
 	@sh ./makedir lib/auto
 	@echo "	AutoSplitting perl library"
-	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib -MAutoSplit -MFile::Find -e 'find ({no_chdir=>1, wanted => sub {autosplit_lib_modules($$_) if /\.pm$$/}}, "lib")'
+	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -MAutoSplit -MFile::Find -e 'find ({no_chdir=>1, wanted => sub {autosplit_lib_modules($$_) if /\.pm$$/}}, "lib")'
 	$(MAKE) lib/re.pm
 
 $(CONFIGPM_FROM_CONFIG_SH) $(CONFIGPOD): config.sh miniperl$(EXE_EXT) configpm Porting/Glossary lib/Config_git.pl
-	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib configpm
+	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) configpm
 
 lib/ExtUtils/Miniperl.pm: miniperlmain.c miniperl$(EXE_EXT) minimod.pl $(CONFIGPM)
 	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) minimod.pl > lib/ExtUtils/Miniperl.pm
@@ -1009,7 +1014,7 @@
 
 lib/lib.pm:	miniperl$(EXE_EXT) $(CONFIGPM)
 	@-rm -f $@
-	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib lib/lib_pm.PL
+	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) lib/lib_pm.PL
 
 unidatafiles $(unidatafiles): uni.data
 
@@ -1021,13 +1026,13 @@
 # But also this ensures that all extensions are built before we try to scan
 # them, which picks up Devel::PPPort's documentation.
 pod/perltoc.pod: $(perltoc_pod_prereqs) perl$(EXE_EXT) $(ext) pod/buildtoc
-	$(LDLIBPTH) $(RUN) ./perl$(EXE_EXT) -Ilib pod/buildtoc --build-toc -q
+	$(LDLIBPTH) $(RUN) perl$(EXE_EXT) pod/buildtoc --build-toc -q
 
 pod/perlapi.pod pod/perlintern.pod: miniperl$(EXE_EXT) autodoc.pl embed.fnc
-	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib autodoc.pl
+	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) autodoc.pl
 
 pod/perlmodlib.pod: miniperl$(EXE_EXT) pod/perlmodlib.PL MANIFEST
-	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib pod/perlmodlib.PL -q
+	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) pod/perlmodlib.PL -q
 
 pod/perldelta.pod: pod/perl5101delta.pod
 	$(LNS) perl5101delta.pod pod/perldelta.pod
@@ -1042,19 +1047,19 @@
 	done
 
 extras.make: perl$(EXE_EXT)
-	-@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib:${PERL5LIB}" $(LDLIBPTH) $(RUN) ./perl -Ilib -MCPAN -e '@ARGV&&make(@ARGV)' `cat extras.lst`
+	-@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib:${PERL5LIB}" $(LDLIBPTH) $(RUN) perl -MCPAN -e '@ARGV&&make(@ARGV)' `cat extras.lst`
 
 extras.test: perl$(EXE_EXT)
-	-@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib:${PERL5LIB}" $(LDLIBPTH) $(RUN) ./perl -Ilib -MCPAN -e '@ARGV&&test(@ARGV)' `cat extras.lst`
+	-@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib:${PERL5LIB}" $(LDLIBPTH) $(RUN) perl -MCPAN -e '@ARGV&&test(@ARGV)' `cat extras.lst`
 
 extras.install: perl$(EXE_EXT)
-	-@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib:${PERL5LIB}" $(LDLIBPTH) $(RUN) ./perl -Ilib -MCPAN -e '@ARGV&&install(@ARGV)' `cat extras.lst`
+	-@test ! -s extras.lst || PATH="`pwd`:${PATH}" PERL5LIB="`pwd`/lib:${PERL5LIB}" $(LDLIBPTH) $(RUN) perl -MCPAN -e '@ARGV&&install(@ARGV)' `cat extras.lst`
 
 .PHONY: install install-strip install-all install-verbose install-silent \
 	no-install install.perl install.man install.html
 
 META.yml:	Porting/makemeta Porting/Maintainers.pl Porting/Maintainers.pm
-	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib Porting/makemeta
+	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) Porting/makemeta
 
 install-strip:
 	$(MAKE) STRIPFLAGS=-s install DESTDIR="$(DESTDIR)"
@@ -1075,17 +1080,17 @@
 INSTALL_DEPENDENCE = all
 
 install.perl:	$(INSTALL_DEPENDENCE) installperl
-	$(LDLIBPTH) $(RUN) ./perl installperl --destdir=$(DESTDIR) $(INSTALLFLAGS) $(STRIPFLAGS)
+	$(LDLIBPTH) $(RUN) perl installperl --destdir=$(DESTDIR) $(INSTALLFLAGS) $(STRIPFLAGS)
 	-@test ! -s extras.lst || $(MAKE) extras.install
 
 install.man:	all installman
-	$(LDLIBPTH) $(RUN) ./perl installman --destdir=$(DESTDIR) $(INSTALLFLAGS)
+	$(LDLIBPTH) $(RUN) perl installman --destdir=$(DESTDIR) $(INSTALLFLAGS)
 
 # XXX Experimental. Hardwired values, but useful for testing.
 # Eventually Configure could ask for some of these values.
 install.html: all installhtml
 	-@test -f README.vms && cd vms && $(LNS) ../README.vms README_vms.pod && cd ..
-	$(LDLIBPTH) $(RUN) ./perl installhtml   \
+	$(LDLIBPTH) $(RUN) perl installhtml   \
       --podroot=. --podpath=. --recurse  \
       --htmldir=$(privlib)/html   \
       --htmlroot=$(privlib)/html  \
@@ -1177,16 +1182,16 @@
 # DynaLoader may be needed for extensions that use Makefile.PL.
 
 $(DYNALOADER):	miniperl$(EXE_EXT) preplibrary FORCE
-	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib make_ext.pl $@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL) LINKTYPE=static $(STATIC_LDFLAGS)
+	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) make_ext.pl $@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL) LINKTYPE=static $(STATIC_LDFLAGS)
 
 d_dummy $(dynamic_ext):	miniperl$(EXE_EXT) preplibrary makeppport $(DYNALOADER) FORCE
-	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib make_ext.pl $@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL) LINKTYPE=dynamic
+	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) make_ext.pl $@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL) LINKTYPE=dynamic
 
 s_dummy $(static_ext):	miniperl$(EXE_EXT) preplibrary makeppport $(DYNALOADER) FORCE
-	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib make_ext.pl $@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL) LINKTYPE=static $(STATIC_LDFLAGS)
+	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) make_ext.pl $@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL) LINKTYPE=static $(STATIC_LDFLAGS)
 
 n_dummy $(nonxs_ext):	miniperl$(EXE_EXT) preplibrary FORCE
-	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib make_ext.pl $@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL)
+	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) make_ext.pl $@ MAKE=$(MAKE) LIBPERL_A=$(LIBPERL)
 !NO!SUBS!
 
 $spitshell >>$Makefile <<EOF
@@ -1197,7 +1202,7 @@
 
 .PHONY: printconfig
 printconfig:
-	@eval `$(LDLIBPTH) $(RUN) ./perl -Ilib -V:$(CONFIGVAR)`; echo $$$(CONFIGVAR)
+	@eval `$(LDLIBPTH) $(RUN) perl -V:$(CONFIGVAR)`; echo $$$(CONFIGVAR)
 
 .PHONY: clean _tidy _mopup _cleaner1 _cleaner2 \
 	realclean _realcleaner clobber _clobber \
@@ -1247,7 +1252,7 @@
 	-cd x2p; $(LDLIBPTH) $(MAKE) clean
 	-rm -f lib/Config_git.pl git_version.h
 	-@for x in $(DYNALOADER) $(dynamic_ext) $(static_ext) $(nonxs_ext) ; do \
-	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib make_ext.pl --target=clean $$x MAKE=$(MAKE) ; \
+	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) make_ext.pl --target=clean $$x MAKE=$(MAKE) ; \
 	done
 
 _cleaner1:
@@ -1257,13 +1262,13 @@
 	-cd x2p; $(LDLIBPTH) $(MAKE) $(CLEAN)
 	-@if test -f miniperl$(EXE_EXT) ; then \
 	for x in $(DYNALOADER) $(dynamic_ext) $(static_ext) $(nonxs_ext) ; do \
-	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib make_ext.pl --target=$(CLEAN) $$x MAKE=$(MAKE) ; \
+	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) make_ext.pl --target=$(CLEAN) $$x MAKE=$(MAKE) ; \
 	done ; \
 	else \
 	sh $(CLEAN).sh ; \
 	fi
 	rm -f realclean.sh veryclean.sh
-	-@test ! -f ./miniperl$(EXE_EXT) || $(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib mkppport --clean
+	-@test ! -f ./miniperl$(EXE_EXT) || $(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) mkppport --clean
 
 # Some systems do not support "?", so keep these files separate.
 _cleaner2:
@@ -1359,7 +1364,7 @@
 test_prep_pre: preplibrary utilities $(nonxs_ext)
 
 test_prep: test_prep_pre miniperl$(EXE_EXT) $(unidatafiles) perl$(EXE_EXT) $(dynamic_ext) $(TEST_PERL_DLL)
-	PERL=./perl $(MAKE) _test_prep
+	PERL=perl $(MAKE) _test_prep
 
 _test_tty:
 	cd t && $(PERL_DEBUG) $(LDLIBPTH) $(PERL) $(TESTFILE) $(TEST_ARGS) $(TEST_FILES) </dev/tty
@@ -1368,10 +1373,10 @@
 	cd t && $(PERL_DEBUG) PERL_SKIP_TTY_TEST=1 $(LDLIBPTH) $(PERL) $(TESTFILE) $(TEST_ARGS) $(TEST_FILES)
 
 unpack_files:
-	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib uupacktool.pl -u -m
+	$(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) uupacktool.pl -u -m
 
 cleanup_unpacked_files:
-	-@test ! -f ./miniperl$(EXE_EXT) || $(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) -Ilib uupacktool.pl -c
+	-@test ! -f ./miniperl$(EXE_EXT) || $(LDLIBPTH) $(RUN) ./miniperl$(EXE_EXT) uupacktool.pl -c
 
 # The second branch is for testing without a tty or controlling terminal,
 # see t/op/stat.t
@@ -1384,19 +1389,19 @@
 	@echo "Ran tests" > t/rantests
 
 test check: test_prep
-	PERL=./perl $(MAKE) _test
+	PERL=perl $(MAKE) _test
 
 test_tty: test_prep
-	PERL=./perl $(MAKE) _test_tty
+	PERL=perl $(MAKE) _test_tty
 
 test_notty: test_prep
-	PERL=./perl $(MAKE) _test_notty
+	PERL=perl $(MAKE) _test_notty
 
 utest ucheck test.utf8 check.utf8: test_prep
-	PERL=./perl TEST_ARGS=-utf8 $(MAKE) _test
+	PERL=perl TEST_ARGS=-utf8 $(MAKE) _test
 
 coretest: test_prep
-	PERL=./perl TEST_ARGS=-core $(MAKE) _test
+	PERL=perl TEST_ARGS=-core $(MAKE) _test
 
 test-prep:	test_prep
 
@@ -1407,60 +1412,60 @@
 # Torture testing
 
 test.torture torturetest:	test_prep
-	PERL=./perl TEST_ARGS=-torture $(MAKE) _test
+	PERL=perl TEST_ARGS=-torture $(MAKE) _test
 
 # Targets for UTF16 testing:
 
 minitest.utf16: minitest.prep
 	- cd t && (rm -f perl$(EXE_EXT); $(LNS) ../miniperl$(EXE_EXT) perl$(EXE_EXT)) \
-		&& $(LDLIBPTH) $(RUN) ./perl TEST -minitest -utf16 base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t uni/*.t </dev/tty
+		&& $(LDLIBPTH) $(RUN) perl TEST -minitest -utf16 base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t uni/*.t </dev/tty
 
 test.utf16 check.utf16: test_prep
-	PERL=./perl $(MAKE) TEST_ARGS=-utf16 _test
+	PERL=perl $(MAKE) TEST_ARGS=-utf16 _test
 
 utest.utf16 ucheck.utf16: test_prep
-	PERL=./perl $(MAKE) TEST_ARGS="-utf8 -utf16" _test
+	PERL=perl $(MAKE) TEST_ARGS="-utf8 -utf16" _test
 
 # Targets for valgrind testing:
 
 test_prep.valgrind: test_prep perl.valgrind
-	PERL=./perl $(MAKE) _test_prep
+	PERL=perl $(MAKE) _test_prep
 
 test.valgrind check.valgrind:	test_prep perl.valgrind.config
-	PERL=./perl PERL_DEBUG=PERL_VALGRIND=1 VALGRIND='$(VALGRIND)' $(MAKE) _test
+	PERL=perl PERL_DEBUG=PERL_VALGRIND=1 VALGRIND='$(VALGRIND)' $(MAKE) _test
 
 utest.valgrind ucheck.valgrind: test_prep.valgrind perl.valgrind.config
-	PERL=./perl PERL_DEBUG=PERL_VALGRIND=1 TEST_ARGS=-utf8 $(MAKE) _test
+	PERL=perl PERL_DEBUG=PERL_VALGRIND=1 TEST_ARGS=-utf8 $(MAKE) _test
 
 test_notty.valgrind: test_prep.valgrind perl.valgrind.config
-	PERL=./perl $(MAKE) PERL_DEBUG=PERL_VALGRIND=1 _test_notty
+	PERL=perl $(MAKE) PERL_DEBUG=PERL_VALGRIND=1 _test_notty
 
 # Targets for Third Degree testing.
 
 test_prep.third: test_prep perl.third
-	PERL=./perl.third $(MAKE) _test_prep
+	PERL=perl.third $(MAKE) _test_prep
 
 test.third check.third:	test_prep.third perl.third
-	PERL=./perl.third PERL_DEBUG=PERL_3LOG=1 $(MAKE) _test
+	PERL=perl.third PERL_DEBUG=PERL_3LOG=1 $(MAKE) _test
 
 utest.third ucheck.third: test_prep.third perl.third
-	PERL=./perl.third PERL_DEBUG=PERL_3LOG=1 TEST_ARGS=-utf8 $(MAKE) _test
+	PERL=perl.third PERL_DEBUG=PERL_3LOG=1 TEST_ARGS=-utf8 $(MAKE) _test
 
 test_notty.third: test_prep.third perl.third
-	PERL=./perl.third $(MAKE) PERL_DEBUG=PERL_3LOG=1 _test_notty
+	PERL=perl.third $(MAKE) PERL_DEBUG=PERL_3LOG=1 _test_notty
 
 # Targets for Deparse testing.
 
 test.deparse:	test_prep
-	PERL=./perl TEST_ARGS=-deparse $(MAKE) _test
+	PERL=perl TEST_ARGS=-deparse $(MAKE) _test
 
 test_notty.deparse:	test_prep
-	PERL=./perl TEST_ARGS=-deparse $(MAKE) _test_notty
+	PERL=perl TEST_ARGS=-deparse $(MAKE) _test_notty
 
 # Targets to run the test suite with -t
 
 test.taintwarn:	test_prep
-	PERL=./perl TEST_ARGS=-taintwarn $(MAKE) _test
+	PERL=perl TEST_ARGS=-taintwarn $(MAKE) _test
 
 minitest.prep:
 	-@test -f lib/lib.pm && test -f lib/Config.pm || \
@@ -1474,18 +1479,18 @@
 # is crashing.
 minitest: miniperl$(EXE_EXT) lib/re.pm minitest.prep
 	- cd t && (rm -f perl$(EXE_EXT); $(LNS) ../miniperl$(EXE_EXT) perl$(EXE_EXT)) \
-		&& $(LDLIBPTH) $(RUN) ./perl TEST -minitest base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t uni/*.t </dev/tty
+		&& $(LDLIBPTH) $(RUN) perl TEST -minitest base/*.t comp/*.t cmd/*.t run/*.t io/*.t op/*.t uni/*.t </dev/tty
 
 # Test via harness
 
 test_harness: test_prep
-	PERL=./perl $(MAKE) TESTFILE=harness _test
+	PERL=perl $(MAKE) TESTFILE=harness _test
 
 test_harness_notty: test_prep
-	PERL=./perl HARNESS_NOTTY=1 $(MAKE) TESTFILE=harness _test
+	PERL=perl HARNESS_NOTTY=1 $(MAKE) TESTFILE=harness _test
 
 test-reonly: test_prep
-	PERL=./perl TEST_ARGS='-re \\bpat\\b \\breg \\bre\b \\bsubst \\brxcode' $(MAKE) TESTFILE=harness _test
+	PERL=perl TEST_ARGS='-re \\bpat\\b \\breg \\bre\b \\bsubst \\brxcode' $(MAKE) TESTFILE=harness _test
 
 # Handy way to run perlbug -ok without having to install and run the
 # installed perlbug. We don't re-run the tests here - we trust the user.
@@ -1495,28 +1500,28 @@
 .PHONY: ok okfile oknack okfilenack nok nokfile noknack nokfilenack
 
 ok:	utilities
-	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -ok -s '(UNINSTALLED)'
+	$(LDLIBPTH) $(RUN) perl utils/perlbug -ok -s '(UNINSTALLED)'
 
 okfile:	utilities
-	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -ok -s '(UNINSTALLED)' -F perl.ok
+	$(LDLIBPTH) $(RUN) perl utils/perlbug -ok -s '(UNINSTALLED)' -F perl.ok
 
 oknack:	utilities
-	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -ok -s '(UNINSTALLED)' -A
+	$(LDLIBPTH) $(RUN) perl utils/perlbug -ok -s '(UNINSTALLED)' -A
 
 okfilenack:	utilities
-	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -ok -s '(UNINSTALLED)' -F perl.ok -A
+	$(LDLIBPTH) $(RUN) perl utils/perlbug -ok -s '(UNINSTALLED)' -F perl.ok -A
 
 nok:	utilities
-	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -nok -s '(UNINSTALLED)'
+	$(LDLIBPTH) $(RUN) perl utils/perlbug -nok -s '(UNINSTALLED)'
 
 nokfile:	utilities
-	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -nok -s '(UNINSTALLED)' -F perl.nok
+	$(LDLIBPTH) $(RUN) perl utils/perlbug -nok -s '(UNINSTALLED)' -F perl.nok
 
 noknack:	utilities
-	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -nok -s '(UNINSTALLED)' -A
+	$(LDLIBPTH) $(RUN) perl utils/perlbug -nok -s '(UNINSTALLED)' -A
 
 nokfilenack:	utilities
-	$(LDLIBPTH) $(RUN) ./perl -Ilib utils/perlbug -nok -s '(UNINSTALLED)' -F perl.nok -A
+	$(LDLIBPTH) $(RUN) perl utils/perlbug -nok -s '(UNINSTALLED)' -F perl.nok -A
 
 .PHONY: clist hlist shlist pllist
 
@@ -1554,7 +1559,7 @@
 
 # Let's hope make will not go into an infinite loop on case-unsensitive systems
 # This may also fail if . is in the head of the path, since perl will
-# require -Ilib
+# require
 tags:	TAGS
 	perl emacs/e2ctags.pl TAGS > tags
 
