diff -Naur mythtv-trunk-22413-old/configure mythtv-trunk-22413-new/configure
--- mythtv-trunk-22413-old/configure	2009-10-12 20:38:46.000000000 -0700
+++ mythtv-trunk-22413-new/configure	2009-10-12 20:42:18.000000000 -0700
@@ -3872,7 +3872,6 @@
 
 echo "RUNPREFIX=$runprefix" >> $MYTH_CONFIG_MAK
 echo "PREFIX=$prefix" >> $MYTH_CONFIG_MAK
-echo "SYSROOT=$sysroot" >> $MYTH_CONFIG_MAK
 echo "LIBDIRNAME=$libdir_name" >> $MYTH_CONFIG_MAK
 echo "LIBDIR=$libdir" >> $MYTH_CONFIG_MAK
 <<BLOCK_QUOTE
diff -Naur mythtv-trunk-22413-old/configure.orig mythtv-trunk-22413-new/configure.orig
--- mythtv-trunk-22413-old/configure.orig	1969-12-31 16:00:00.000000000 -0800
+++ mythtv-trunk-22413-new/configure.orig	2009-10-12 20:42:18.000000000 -0700
@@ -0,0 +1,4319 @@
+#!/bin/sh
+#
+# MythTV configure script, based on the FFmpeg configure script
+#
+# Copyright (c) 2000-2002 Fabrice Bellard
+# Copyright (c) 2005-2008 Diego Biurrun
+# Copyright (c) 2005-2008 Mans Rullgard
+#
+
+# Prevent locale nonsense from breaking basic text processing.
+LC_ALL=C
+export LC_ALL
+
+# make sure we are running under a compatible shell
+# try to make this part work with most shells
+
+try_exec(){
+    echo "Trying shell $1"
+    type "$1" > /dev/null 2>&1 && exec "$@"
+}
+
+unset foo
+(: ${foo%%bar}) 2> /dev/null
+E1="$?"
+
+(: ${foo?}) 2> /dev/null
+E2="$?"
+
+if test "$E1" != 0 || test "$E2" = 0; then
+    echo "Broken shell detected.  Trying alternatives."
+    export FF_CONF_EXEC
+    if test "0$FF_CONF_EXEC" -lt 1; then
+        FF_CONF_EXEC=1
+        try_exec bash "$0" "$@"
+    fi
+    if test "0$FF_CONF_EXEC" -lt 2; then
+        FF_CONF_EXEC=2
+        try_exec ksh "$0" "$@"
+    fi
+    if test "0$FF_CONF_EXEC" -lt 3; then
+        FF_CONF_EXEC=3
+        try_exec /usr/xpg4/bin/sh "$0" "$@"
+    fi
+    echo "No compatible shell script interpreter found."
+    echo "This configure script requires a POSIX-compatible shell"
+    echo "such as bash or ksh."
+    echo "THIS IS NOT A BUG IN FFMPEG, DO NOT REPORT IT AS SUCH."
+    echo "Instead, install a working POSIX-compatible shell."
+    echo "Disabling this configure test will create a broken FFmpeg."
+    if test "$BASH_VERSION" = '2.04.0(1)-release'; then
+        echo "This bash version ($BASH_VERSION) is broken on your platform."
+        echo "Upgrade to a later version if available."
+    fi
+    exit 1
+fi
+
+show_help(){
+  echo "Usage: configure [options]"
+  echo "Options: [defaults in brackets after descriptions]"
+  echo
+  echo "Standard options:"
+  echo "  --help                   print this message"
+<<BLOCK_QUOTE
+  echo "  --logfile=FILE           log tests and output to FILE [config.err]"
+  echo "  --disable-logging        do not log configure debug information"
+BLOCK_QUOTE
+  #echo "  --log[=FILE|yes|no]      log tests and output to FILE [config.err]"
+  echo "  --previous               use previous configure parameters if possible"
+  echo "  --compile-type=CTYPE     one of release, profile, debug [$compile_type]"
+  echo "                           NOTE: profile is for sampling profilers"
+  echo "  --prefix=PREFIX          install in PREFIX [$prefix]"
+  echo "  --runprefix=PREFIX       prefix to be used at runtime (e.g. .. or /myth/latest)"
+  echo "  --libdir-name=LIBNAME    search/install libraries in PREFIX/LIBNAME [$libdir_name]"
+  echo "  --disable-ccache         disable compiler cache (ccache)"
+  echo "  --disable-distcc         disable distributed compilation (distcc)"
+<<BLOCK_QUOTE
+  echo "  --bindir=DIR             install binaries in DIR [PREFIX/bin]"
+  echo "  --datadir=DIR            install data files in DIR [PREFIX/share/ffmpeg]"
+  echo "  --libdir=DIR             install libs in DIR [PREFIX/lib]"
+  echo "  --shlibdir=DIR           install shared libs in DIR [PREFIX/lib]"
+  echo "  --incdir=DIR             install includes in DIR [PREFIX/include]"
+  echo "  --mandir=DIR             install man page in DIR [PREFIX/share/man]"
+  echo
+  echo "Configuration options:"
+  echo "  --disable-static         do not build static libraries [no]"
+  echo "  --enable-shared          build shared libraries [no]"
+  echo "  --enable-gpl             allow use of GPL code, the resulting libs"
+  echo "                           and binaries will be under GPL [no]"
+  echo "  --enable-version3        upgrade (L)GPL to version 3 [no]"
+  echo "  --enable-nonfree         allow use of nonfree code, the resulting libs"
+  echo "                           and binaries will be unredistributable [no]"
+  echo "  --disable-ffmpeg         disable ffmpeg build"
+  echo "  --disable-ffplay         disable ffplay build"
+  echo "  --disable-ffserver       disable ffserver build"
+  echo "  --enable-postproc        enable GPLed postprocessing support [no]"
+  echo "  --enable-avfilter        video filter support [no]"
+  echo "  --enable-avfilter-lavf   video filters dependent on avformat [no]"
+  echo "  --enable-beosthreads     use BeOS threads [no]"
+  echo "  --enable-os2threads      use OS/2 threads [no]"
+  echo "  --enable-pthreads        use pthreads [no]"
+  echo "  --enable-w32threads      use Win32 threads [no]"
+  echo "  --enable-x11grab         enable X11 grabbing [no]"
+  echo "  --disable-network        disable network support [no]"
+  echo "  --disable-ipv6           disable IPv6 support [no]"
+  echo "  --disable-mpegaudio-hp   faster (but less accurate) MPEG audio decoding [no]"
+  echo "  --enable-gray            enable full grayscale support (slower color)"
+  echo "  --disable-swscale-alpha  disable alpha channel support in swscale"
+  echo "  --disable-fastdiv        disable table-based division"
+  echo "  --enable-small           optimize for size instead of speed"
+  echo "  --disable-aandct         disable AAN DCT code"
+  echo "  --disable-fft            disable FFT code"
+  echo "  --disable-golomb         disable Golomb code"
+  echo "  --disable-mdct           disable MDCT code"
+  echo "  --disable-rdft           disable RDFT code"
+  echo "  --disable-vaapi          disable VAAPI code"
+  echo "  --disable-vdpau          disable VDPAU code"
+  echo "  --enable-runtime-cpudetect detect cpu capabilities at runtime (bigger binary)"
+  echo "  --enable-hardcoded-tables use hardcoded tables instead of runtime generation"
+  echo "  --enable-memalign-hack   emulate memalign, interferes with memory debuggers"
+  echo "  --enable-beos-netserver  enable BeOS netserver"
+  echo "  --disable-encoder=NAME   disable encoder NAME"
+  echo "  --enable-encoder=NAME    enable encoder NAME"
+  echo "  --disable-encoders       disable all encoders"
+  echo "  --disable-decoder=NAME   disable decoder NAME"
+  echo "  --enable-decoder=NAME    enable decoder NAME"
+  echo "  --disable-decoders       disable all decoders"
+  echo "  --disable-hwaccel=NAME   disable hwaccel NAME"
+  echo "  --enable-hwaccel=NAME    enable hwaccel NAME"
+  echo "  --disable-hwaccels       disable all hwaccels"
+  echo "  --disable-muxer=NAME     disable muxer NAME"
+  echo "  --enable-muxer=NAME      enable muxer NAME"
+  echo "  --disable-muxers         disable all muxers"
+  echo "  --disable-demuxer=NAME   disable demuxer NAME"
+  echo "  --enable-demuxer=NAME    enable demuxer NAME"
+  echo "  --disable-demuxers       disable all demuxers"
+  echo "  --enable-parser=NAME     enable parser NAME"
+  echo "  --disable-parser=NAME    disable parser NAME"
+  echo "  --disable-parsers        disable all parsers"
+  echo "  --enable-bsf=NAME        enable bitstream filter NAME"
+  echo "  --disable-bsf=NAME       disable bitstream filter NAME"
+  echo "  --disable-bsfs           disable all bitstream filters"
+  echo "  --enable-protocol=NAME   enable protocol NAME"
+  echo "  --disable-protocol=NAME  disable protocol NAME"
+  echo "  --disable-protocols      disable all protocols"
+  echo "  --disable-indev=NAME     disable input device NAME"
+  echo "  --disable-outdev=NAME    disable output device NAME"
+  echo "  --disable-indevs         disable input devices"
+  echo "  --disable-outdevs        disable output devices"
+  echo "  --disable-devices        disable all devices"
+  echo "  --enable-filter=NAME     enable filter NAME"
+  echo "  --disable-filter=NAME    disable filter NAME"
+  echo "  --disable-filters        disable all filters"
+  echo "  --list-decoders          show all available decoders"
+  echo "  --list-encoders          show all available encoders"
+  echo "  --list-hwaccels          show all available hardware accelerators"
+  echo "  --list-muxers            show all available muxers"
+  echo "  --list-demuxers          show all available demuxers"
+  echo "  --list-parsers           show all available parsers"
+  echo "  --list-protocols         show all available protocols"
+  echo "  --list-bsfs              show all available bitstream filters"
+  echo "  --list-indevs            show all available input devices"
+  echo "  --list-outdevs           show all available output devices"
+  echo "  --list-filters           show all available filters"
+BLOCK_QUOTE
+  echo
+  echo "External library support:"
+<<BLOCK_QUOTE
+  echo "  --enable-avisynth        enable reading of AVISynth script files [no]"
+  echo "  --enable-bzlib           enable bzlib [autodetect]"
+  echo "  --enable-libamr-nb       enable libamr-nb floating point audio codec [no]"
+  echo "  --enable-libamr-wb       enable libamr-wb floating point audio codec [no]"
+  echo "  --enable-libopencore-amrnb enable AMR-NB de/encoding via libopencore-amrnb [no]"
+  echo "  --enable-libopencore-amrwb enable AMR-WB decoding via libopencore-amrwb [no]"
+  echo "  --enable-libdc1394       enable IIDC-1394 grabbing using libdc1394"
+  echo "                           and libraw1394 [no]"
+  echo "  --enable-libdirac        enable Dirac support via libdirac [no]"
+  echo "  --enable-libfaac         enable FAAC support via libfaac [no]"
+BLOCK_QUOTE
+  echo "  --enable-libfaad         enable FAAD support via libfaad [no]"
+<<BLOCK_QUOTE
+  echo "  --enable-libfaadbin      open libfaad.so.0 at runtime [no]"
+  echo "  --enable-libgsm          enable GSM support via libgsm [no]"
+  echo "  --enable-libmp3lame      enable MP3 encoding via libmp3lame [no]"
+  echo "  --enable-libnut          enable NUT (de)muxing via libnut,"
+  echo "                           native (de)muxer exists [no]"
+  echo "  --enable-libopenjpeg     enable JPEG 2000 decoding via OpenJPEG [no]"
+  echo "  --enable-libschroedinger enable Dirac support via libschroedinger [no]"
+  echo "  --enable-libspeex        enable Speex decoding via libspeex [no]"
+  echo "  --enable-libtheora       enable Theora encoding via libtheora [no]"
+  echo "  --enable-libvorbis       enable Vorbis encoding via libvorbis,"
+  echo "                           native implementation exists [no]"
+  echo "  --enable-libx264         enable H.264 encoding via x264 [no]"
+  echo "  --enable-libxvid         enable Xvid encoding via xvidcore,"
+  echo "                           native MPEG-4/Xvid encoder exists [no]"
+  echo "  --enable-mlib            enable Sun medialib [no]"
+  echo "  --enable-zlib            enable zlib [autodetect]"
+BLOCK_QUOTE
+  echo ""
+  echo "Advanced options (experts only):"
+<<BLOCK_QUOTE
+  echo "  --source-path=PATH       path to source code [$source_path]"
+BLOCK_QUOTE
+  echo "  --cross-prefix=PREFIX    use PREFIX for compilation tools [$cross_prefix]"
+  echo "  --enable-cross-compile   assume a cross-compiler is used"
+  echo "  --sysroot=PATH           root of cross-build tree"
+  echo "  --sysinclude=PATH        location of cross-build system headers"
+<<BLOCK_QUOTE
+  echo "  --target-os=OS           compiler targets OS [$target_os]"
+  echo "  --target-exec=CMD        command to run executables on target"
+  echo "  --target-path=DIR        path to view of build directory on target"
+  echo "  --nm=NM                  use nm tool"
+  echo "  --as=AS                  use assembler AS [$as_default]"
+BLOCK_QUOTE
+  echo "  --cc=CC                  use C compiler CC [$cc_default]"
+  echo "  --cxx=CXX                use C++ compiler CXX [$cxx_default]"
+  echo "  --qmake=QMAKE            use specified qmake [$qmake_default]"
+<<BLOCK_QUOTE
+  echo "  --host-cc=HOSTCC         use host C compiler HOSTCC"
+  echo "  --host-cflags=HCFLAGS    use HCFLAGS when compiling for host"
+  echo "  --host-ldflags=HLDFLAGS  use HLDFLAGS when linking for host"
+  echo "  --host-libs=HLIBS        use libs HLIBS when linking for host"
+BLOCK_QUOTE
+  echo "  --extra-cflags=ECFLAGS   add ECFLAGS to CFLAGS [$CFLAGS]"
+  echo "  --extra-cxxflags=ECXFLAGS add ECXXFLAGS to list of flags for C++ compile"
+  echo "  --extra-ldflags=ELDFLAGS add ELDFLAGS to LDFLAGS [$LDFLAGS]"
+  echo "  --enable-symbol-visibility enables symbol visibility options"
+<<BLOCK_QUOTE
+  echo "  --extra-libs=ELIBS       add ELIBS [$ELIBS]"
+  echo "  --extra-version=STRING   version string suffix []"
+  echo "  --build-suffix=SUFFIX    library name suffix []"
+BLOCK_QUOTE
+  echo "  --arch=ARCH              select architecture [$arch]"
+  echo "  --tune=CPU               tune instruction usage for a particular CPU [$tune]"
+  echo "  --cpu=CPU                select the minimum required CPU (affects"
+  echo "                           instruction selection, may crash on older CPUs)"
+<<BLOCK_QUOTE
+  echo "  --enable-powerpc-perf    enable performance report on PPC"
+  echo "                           (requires enabling PMC)"
+BLOCK_QUOTE
+  echo "  --enable-proc-opt        enable processor specific compilation"
+  echo "  --disable-altivec        disable AltiVec optimizations"
+  echo "  --disable-amd3dnow       disable 3DNow! optimizations"
+  echo "  --disable-amd3dnowext    disable 3DNow! extended optimizations"
+  echo "  --disable-mmx            disable MMX optimizations"
+  echo "  --disable-mmx2           disable MMX2 optimizations"
+  echo "  --disable-sse            disable SSE optimizations"
+  echo "  --disable-ssse3          disable SSSE3 optimizations"
+<<BLOCK_QUOTE
+  echo "  --disable-armv5te        disable armv5te optimizations"
+  echo "  --disable-armv6          disable armv6 optimizations"
+  echo "  --disable-armv6t2        disable armv6t2 optimizations"
+  echo "  --disable-armvfp         disable ARM VFP optimizations"
+  echo "  --disable-iwmmxt         disable iwmmxt optimizations"
+  echo "  --disable-mmi            disable MMI optimizations"
+  echo "  --disable-neon           disable neon optimizations"
+  echo "  --disable-vis            disable VIS optimizations"
+BLOCK_QUOTE
+  echo "  --disable-yasm           disable use of yasm assembler"
+  echo ""
+  echo "  --disable-audio-oss      disable OSS audio support"
+  echo "  --disable-audio-alsa     disable ALSA audio support"
+  echo "  --disable-audio-arts     disable aRts audio support"
+  echo "  --disable-audio-jack     disable JACK audio support"
+  echo "  --enable-valgrind        disables timeouts for valgrind memory debugging"
+  # Don't print disable frontend/backend options, these
+  # cause breakage and people use them inappropriately. -- dtk
+  #echo "  --disable-frontend       disable frontend [breaks dependency checking, previews]"
+  #echo "  --disable-backend        disable backend  [breaks dependency checking]"
+  echo "  --disable-lirc           disable lirc support (Infrared Remotes)"
+  echo "  --disable-joystick-menu  disable joystick menu"
+  echo "  --disable-firewire       disable support for FireWire cable boxes"
+  echo "  --disable-iptv           disable support for recording RTSP/UDP/RTP streams"
+#  echo "  --enable-dbox2           enable support for Nokia DBOX2 DVB boxes (or compatibles)"
+  echo "  --disable-hdhomerun      disable support for HDHomeRun boxes"
+  echo "  --disable-v4l            disable Video4Linux support"
+  echo "  --disable-ivtv           disable ivtv support (PVR-x50) req. v4l support"
+  echo "  --disable-hdpvr          disable HD-PVR support"
+  echo "  --disable-dvb            disable DVB support"
+  echo "  --dvb-path=HDRLOC        location of directory containing"
+  echo "                           'linux/dvb/frontend.h', not the"
+  echo "                           directory with frontend.h [$dvb_path_default]"
+  echo "  --disable-x11            disable X11 support"
+  echo "  --x11-path=X11LOC        location of X11 include files [$x11_path_default]"
+#  echo "  --enable-glx-procaddrarb use glXGetProcAddressARB() instead of glXGetProcAddress()"
+  echo "  --disable-xrandr         disable X11 resolution switching"
+  echo "  --disable-xv             disable XVideo   (X11 video output accel.)"
+  echo "  --disable-xvmc           disable XvMC     (Linux/BSD MPEG accel.)"
+  echo "  --disable-xvmcw          disable XvMC Wrapper"
+  echo "                           (use --xvmc-lib if autodetection fails)"
+  echo "  --enable-xvmc-pro        enable XvMC for the Unichrome Pro chipset"
+  echo "                           (NOT Unichrome chipset)"
+  echo "  --enable-vdpau           enable NVidia VDPAU hardware acceleration."
+  echo "  --xvmc-lib=LIB           XvMC library override (for crosscompiling)"
+  #echo "  --disable-xvmc-vld       disable XvMC-VLD (VIA Epia MPEG accel.)"
+  echo "  --disable-opengl-video   disable OpenGL based video display "
+  echo "  --enable-mac-accel       enable Mac OS X MPEG acceleration"
+  echo "  --disable-opengl-vsync   disable OpenGL vsync method"
+  echo "  --disable-directfb       disable DirectFB (Linux non-X11 video)"
+  echo ""
+  echo "  --enable-mac-bundle      produce standalone OS X apps (e.g. mythfrontend.app)"
+  echo ""
+  echo "  --with-bindings=LIST     install the bindings specified in the"
+  echo "                           comma-separated list"
+  echo "                           Supported bindings: perl, python"
+<<BLOCK_QUOTE
+  echo
+  echo "Developer options (useful when working on FFmpeg itself):"
+  echo "  --disable-debug          disable debugging symbols"
+  echo "  --enable-debug=LEVEL     set the debug level [$debuglevel]"
+  echo "  --enable-gprof           enable profiling with gprof [$gprof]"
+  echo "  --disable-optimizations  disable compiler optimizations"
+  echo "  --enable-extra-warnings  enable more compiler warnings"
+  echo "  --disable-stripping      disable stripping of executables and shared libraries"
+  echo ""
+  echo "NOTE: Object files are built at the place where configure is launched."
+BLOCK_QUOTE
+  exit 0
+}
+
+log(){
+    echo "$@" >> $logfile
+}
+
+log_file(){
+    log BEGIN $1
+    pr -n -t $1 >> $logfile
+    log END $1
+}
+
+echolog(){
+    log "$@"
+    echo "$@"
+}
+
+die(){
+    echolog "$@"
+    cat <<EOF
+
+If you think configure made a mistake, make sure you are using the latest
+version from SVN.  If the latest version fails, report the problem to the
+mythtv-dev@mythtv.org mailing list or IRC #mythtv on irc.freenode.net
+EOF
+    if disabled logging; then
+        cat <<EOF
+Rerun configure with logging enabled (do not use --disable-logging), and
+include the log this produces with your report.
+EOF
+    else
+cat <<EOF
+Include the log file "$logfile" produced by configure as this will help
+solving the problem.
+EOF
+    fi
+    rm -f $TMPCXX
+    exit 1
+}
+
+# Avoid locale weirdness, besides we really just want to translate ASCII.
+toupper(){
+    echo "$@" | tr abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ
+}
+
+tolower(){
+    echo "$@" | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz
+}
+
+c_escape(){
+    echo "$*" | sed 's/["\\]/\\\0/g'
+}
+
+sh_quote(){
+    v=$(echo "$1" | sed "s/'/'\\\\''/g")
+    test "$v" = "${v#*[ |&;<>()$\`\\\"\'*?\[\]#~=%]}" || v="'$v'"
+    echo "$v"
+}
+
+set_all(){
+    value=$1
+    shift
+    for var in $*; do
+        eval $var=$value
+    done
+}
+
+set_weak(){
+    value=$1
+    shift
+    for var; do
+        eval : \${$var:=$value}
+    done
+}
+
+pushvar(){
+    for var in $*; do
+        eval level=\${${var}_level:=0}
+        eval ${var}_${level}="\$$var"
+        eval ${var}_level=$(($level+1))
+    done
+}
+
+popvar(){
+    for var in $*; do
+        eval level=\${${var}_level:-0}
+        test $level = 0 && continue
+        eval level=$(($level-1))
+        eval $var="\${${var}_${level}}"
+        eval ${var}_level=$level
+        eval unset ${var}_${level}
+    done
+}
+
+enable(){
+    set_all yes $*
+}
+
+disable(){
+    set_all no $*
+}
+
+enable_weak(){
+    set_weak yes $*
+}
+
+disable_weak(){
+    set_weak no $*
+}
+
+enable_safe(){
+    enable $(echo "$*" | sed 's/[^A-Za-z0-9_ ]/_/g')
+}
+
+disable_safe(){
+    disable $(echo "$*" | sed 's/[^A-Za-z0-9_ ]/_/g')
+}
+
+do_enable_deep(){
+    for var; do
+        enabled $var && continue
+        eval sel="\$${var}_select"
+        eval sgs="\$${var}_suggest"
+        pushvar var sgs
+        enable_deep $sel
+        popvar sgs
+        enable_deep_weak $sgs
+        popvar var
+    done
+}
+
+enable_deep(){
+    do_enable_deep $*
+    enable $*
+}
+
+enable_deep_weak(){
+    do_enable_deep $*
+    enable_weak $*
+}
+
+enabled(){
+    test "${1#!}" = "$1" && op== || op=!=
+    eval test "x\$${1#!}" $op "xyes"
+}
+
+disabled(){
+    test "${1#!}" = "$1" && op== || op=!=
+    eval test "x\$${1#!}" $op "xno"
+}
+
+enabled_all(){
+    for opt; do
+        enabled $opt || return 1
+    done
+}
+
+disabled_all(){
+    for opt; do
+        disabled $opt || return 1
+    done
+}
+
+enabled_any(){
+    for opt; do
+        enabled $opt && return 0
+    done
+}
+
+disabled_any(){
+    for opt; do
+        disabled $opt && return 0
+    done
+    return 1
+}
+
+set_default(){
+    for opt; do
+        eval : \${$opt:=\$${opt}_default}
+    done
+}
+
+is_in(){
+    value=$1
+    shift
+    for var in $*; do
+        [ $var = $value ] && return 0
+    done
+    return 1
+}
+
+check_deps(){
+    for cfg; do
+        cfg="${cfg#!}"
+        enabled ${cfg}_checking && die "Circular dependency for $cfg."
+        disabled ${cfg}_checking && continue
+        enable ${cfg}_checking
+
+        eval dep_all="\$${cfg}_deps"
+        eval dep_any="\$${cfg}_deps_any"
+        eval dep_sel="\$${cfg}_select"
+        eval dep_sgs="\$${cfg}_suggest"
+
+        pushvar cfg dep_all dep_any dep_sel dep_sgs
+        check_deps $dep_all $dep_any $dep_sel $dep_sgs
+        popvar cfg dep_all dep_any dep_sel dep_sgs
+
+        enabled_all  $dep_all || disable $cfg
+        enabled_any  $dep_any || disable $cfg
+        disabled_any $dep_sel && disable $cfg
+
+        if enabled $cfg; then
+            eval dep_extralibs="\$${cfg}_extralibs"
+            test -n "$dep_extralibs" && add_extralibs $dep_extralibs
+            enable_deep $dep_sel
+            enable_deep_weak $dep_sgs
+        fi
+
+        disable ${cfg}_checking
+    done
+}
+
+print_config(){
+    pfx=$1
+    header=$2
+    makefile=$3
+    shift 3
+    for cfg; do
+        ucname="$(toupper $cfg)"
+        if enabled $cfg; then
+            echo "#define ${pfx}${ucname} 1" >> $header
+            echo "${pfx}${ucname}=yes" >> $makefile
+        else
+            echo "#define ${pfx}${ucname} 0" >> $header
+        fi
+    done
+}
+
+flags_saved(){
+    (: ${SAVE_CFLAGS?}) 2> /dev/null
+}
+
+save_flags(){
+    flags_saved && return
+    SAVE_CFLAGS="$CFLAGS"
+    SAVE_LDFLAGS="$LDFLAGS"
+    SAVE_extralibs="$extralibs"
+}
+
+restore_flags(){
+    flags_saved || return
+    CFLAGS="$SAVE_CFLAGS"
+    LDFLAGS="$SAVE_LDFLAGS"
+    extralibs="$SAVE_extralibs"
+    unset SAVE_CFLAGS
+    unset SAVE_LDFLAGS
+    unset SAVE_extralibs
+}
+
+temp_cflags(){
+    save_flags
+    CFLAGS="$CFLAGS $*"
+}
+
+temp_ldflags(){
+    save_flags
+    LDFLAGS="$LDFLAGS $*"
+}
+
+temp_extralibs(){
+    save_flags
+    extralibs="$extralibs $*"
+}
+
+append(){
+    var=$1
+    shift
+    flags_saved && eval "SAVE_$var=\"\$SAVE_$var $*\""
+    eval "$var=\"\$$var $*\""
+}
+
+add_cflags(){
+    append CFLAGS "$@"
+}
+
+add_ecflags(){
+    append ECFLAGS "$@"
+}
+
+add_optflags(){
+    append OPTFLAGS "$@"
+}
+
+add_archflags(){
+    append ARCHFLAGS "$@"
+}
+
+add_cxxflags(){
+    append ECXXFLAGS "$@"
+}
+
+add_ldflags(){
+    append LDFLAGS "$@"
+}
+
+add_extralibs(){
+    append extralibs "$@"
+}
+
+check_cmd(){
+    log "$@"
+    "$@" >> $logfile 2>&1
+}
+
+check_cc(){
+    log check_cc "$@"
+    cat > $TMPC
+    log_file $TMPC
+    check_cmd $cc $CFLAGS $ECFLAGS $OPTFLAGS "$@" -c -o $TMPO $TMPC
+}
+
+check_cpp(){
+    log check_cpp "$@"
+    cat > $TMPC
+    log_file $TMPC
+    check_cmd $cc $CFLAGS $ECFLAGS $OPTFLAGS "$@" -E -o $TMPO $TMPC
+}
+
+check_cxx(){
+    log check_cxx "$@"
+    cat > $TMPCXX
+    log_file $TMPCXX
+    check_cmd $cxx $ECXXFLAGS "$@" -c -o $TMPO $TMPCXX
+}
+
+check_as(){
+    log check_as "$@"
+    cat > $TMPC
+    log_file $TMPC
+    check_cmd $as $CFLAGS $ECFLAGS $OPTFLAGS "$@" -c -o $TMPO $TMPC
+}
+
+check_asm(){
+    log check_asm "$@"
+    name="$1"
+    asm="$2"
+    shift 2
+    check_as "$@" <<EOF && enable $name || disable $name
+void foo(void){ __asm__ volatile($asm); }
+EOF
+}
+
+check_yasm(){
+    log check_yasm "$@"
+    echo "$1" > $TMPS
+    log_file $TMPS
+    shift 1
+    check_cmd $yasmexe $YASMFLAGS "$@" -o $TMPO $TMPS
+}
+
+check_ld(){
+    log check_ld "$@"
+    check_cc || return
+    flags=''
+    libs=''
+    for f; do
+        test "${f}" = "${f#-l}" && flags="$flags $f" || libs="$libs $f"
+    done
+    check_cmd $cc $LDFLAGS $flags -o $TMPE $TMPO $extralibs $libs
+}
+
+check_ld_cxx(){
+    log check_ld_cxx "$@"
+    check_cxx || return
+    flags=''
+    libs=''
+    for f; do
+        test "${f}" = "${f#-l}" && flags="$flags $f" || libs="$libs $f"
+    done
+    check_cmd $cxx $LDFLAGS $flags -o $TMPE $TMPO $extralibs $libs
+}
+
+check_cflags(){
+    log check_cflags "$@"
+    check_cc "$@" <<EOF && add_cflags "$@"
+int x;
+EOF
+}
+
+check_ecflags(){
+    log check_ecflags "$@"
+    check_cc $@ <<EOF && add_ecflags "$@" || echolog "WARNING! An unknown C compiler flag in: \"$@\". Option(s) will be ignored."
+int x;
+EOF
+}
+
+check_optflags(){
+    log check_optflags "$@"
+    check_cc "$@" <<EOF && add_optflags "$@"
+int x;
+EOF
+}
+
+check_archflags(){
+    log check_archflags "$@"
+    check_cc "$@" <<EOF && add_archflags "$@"
+int x;
+EOF
+}
+
+check_mtune_mcpu(){
+    log check_mtune_mcpu "$@"
+    cpu_type="$1"
+    shift
+    check_archflags "-mtune=$cpu_type" "$@" || check_archflags "-mcpu=$cpu_type" "$@"
+}
+
+check_cxxflags(){
+    log check_cxxflags "$@"
+    check_cxx $@ <<EOF && add_cxxflags "$@" || echolog "WARNING! An unknown C++ compiler flag in: \"$@\". Option(s) will be ignored."
+class X {};
+int x;
+EOF
+}
+
+check_ldflags(){
+    log check_ldflags "$@"
+    check_ld "$@" <<EOF && add_ldflags "$@"
+int main(void){ return 0; }
+EOF
+}
+
+check_header(){
+    log check_header "$@"
+    header=$1
+    shift
+    disable_safe $header
+    check_cpp "$@" <<EOF && enable_safe $header
+#include <$header>
+int x;
+EOF
+}
+
+check_func(){
+    log check_func "$@"
+    func=$1
+    shift
+    disable $func
+    check_ld "$@" <<EOF && enable $func
+extern int $func();
+int main(void){ $func(); }
+EOF
+}
+
+check_func_headers(){
+    log check_func_headers "$@"
+    headers=$1
+    func=$2
+    shift 2
+    disable $func
+    incs=""
+    for hdr in $headers; do
+        incs="$incs
+#include <$hdr>"
+    done
+    check_ld "$@" <<EOF && enable $func && enable_safe $headers
+$incs
+int main(int argc, char **argv){
+    (void) $func;
+    return 0;
+}
+EOF
+}
+
+check_cpp_condition(){
+    log check_cpp_condition "$@"
+    header=$1
+    condition=$2
+    check_cpp <<EOF
+#include <$header>
+#if !($condition)
+#error "unsatisfied condition: $condition"
+#endif
+EOF
+}
+
+check_lib(){
+    log check_lib "$@"
+    header="$1"
+    func="$2"
+    shift 2
+    temp_extralibs "$@"
+    check_header $header && check_func $func && add_extralibs "$@"
+    err=$?
+    restore_flags
+    return $err
+}
+
+check_lib2(){
+    log check_lib2 "$@"
+    headers="$1"
+    func="$2"
+    shift 2
+    temp_extralibs "$@"
+    check_func_headers "$headers" $func && add_extralibs "$@"
+    err=$?
+    restore_flags
+    return $err
+}
+
+check_exec(){
+    check_ld "$@" && { enabled cross_compile || $TMPE >> $logfile 2>&1; }
+}
+
+check_exec_cxx(){
+    check_ld_cxx "$@" && { enabled cross_compile || $TMPE >> $logfile 2>&1; }
+}
+
+check_exec_crash(){
+    code=$(cat)
+
+    # exit() is not async signal safe.  _Exit (C99) and _exit (POSIX)
+    # are safe but may not be available everywhere.  Thus we use
+    # raise(SIGTERM) instead.  The check is run in a subshell so we
+    # can redirect the "Terminated" message from the shell.  SIGBUS
+    # is not defined by standard C so it is used conditionally.
+
+    (check_exec "$@") >> $logfile 2>&1 <<EOF
+#include <signal.h>
+static void sighandler(int sig){
+    raise(SIGTERM);
+}
+int main(void){
+    signal(SIGILL, sighandler);
+    signal(SIGFPE, sighandler);
+    signal(SIGSEGV, sighandler);
+#ifdef SIGBUS
+    signal(SIGBUS, sighandler);
+#endif
+    { $code }
+}
+EOF
+}
+
+check_type(){
+    log check_type "$@"
+    headers=$1
+    type=$2
+    shift 2
+    disable $type
+    incs=""
+    for hdr in $headers; do
+        incs="$incs
+#include <$hdr>"
+    done
+    check_cc "$@" <<EOF && enable $type
+$incs
+$type v;
+EOF
+}
+
+require(){
+    name="$1"
+    header="$2"
+    func="$3"
+    shift 3
+    check_lib $header $func "$@" || die "ERROR: $name not found"
+}
+
+require2(){
+    name="$1"
+    headers="$2"
+    func="$3"
+    shift 3
+    check_lib2 "$headers" $func "$@" || die "ERROR: $name not found"
+}
+
+check_foo_config(){
+    cfg=$1
+    pkg=$2
+    header=$3
+    func=$4
+    shift 4
+    disable $cfg
+    check_cmd ${pkg}-config --version
+    err=$?
+    if test "$err" = 0; then
+        temp_cflags $(${pkg}-config --cflags)
+        temp_extralibs $(${pkg}-config --libs)
+        check_lib "$@" $header $func && enable $cfg
+    fi
+    return $err
+}
+
+apply(){
+    file=$1
+    shift
+    "$@" < "$file" > "$file.tmp" && mv "$file.tmp" "$file" || rm "$file.tmp"
+}
+
+
+#deprecated, use check_lib or check_lib2 instead
+has_library()
+{
+    if test -f /etc/ld.so.conf ; then
+        LIBPATHS=`cat /etc/ld.so.conf | grep -v "#" | grep -v "include"`
+    else
+        LIBPATHS=''
+    fi
+
+    LIBPATHS="$LIBPATHS `echo $LD_LIBRARY_PATH | sed s/':'/' '/g` "
+    # Mac OS X has a different variable for this:
+    LIBPATHS="$LIBPATHS `echo $DYLD_LIBRARY_PATH | sed s/':'/' '/g` "
+
+    # recurse down just one level, should be enough in most cases
+    if test -f /etc/ld.so.conf ; then
+        INCL=`cat /etc/ld.so.conf | grep -v "#" | grep  "^include"`
+        SRCH=`echo "$INCL" | sed '{ s/^include \//\//; s/^include /\/etc\//}'`
+        for x in $SRCH ; do
+            LP_APPEND=`cat $x | grep -v "#" | grep -v "^include"`
+            LIBPATHS="$LIBPATHS $LP_APPEND"
+        done
+    fi
+
+    LIBPATHS="`echo $LIBPATHS /$libdir_name /usr/$libdir_name /usr/local/$libdir_name /usr/X11R6/$libdir_name | sed s/'\/ '/' '/g` "
+
+    HAS_IT="no"
+    for LIBPATH in $LIBPATHS ; do
+        if test x`ls $LIBPATH/$1* 2> /dev/null | head -n 1` != x"" ; then
+            HAS_IT="yes"
+        fi
+    done
+    expr $HAS_IT : "yes" > /dev/null
+}
+
+x86_mmx_cpus="pentium-mmx,pentium2,pentium3,pentium3m,pentium-m"
+x86_mmx_cpus="$x86_mmx_cpus,pentium4,pentium4m,prescott"
+x86_mmx_cpus="$x86_mmx_cpus,athlon,athlon-xp,athlon-tbird,athlon-4,athlon-mp,"
+x86_mmx_cpus="$x86_mmx_cpus,c3,c3-2,k6,k6-2,k6-3"
+
+x86_cpus="i386,i486,i586,i686,pentium,pentiumpro,${x86_mmx_cpus}"
+
+x86_64_cpus="x86-64,athlon64,k8,opteron,athlon64-sse3,k8-sse3,opteron-sse3"
+x86_64_cpus="$x86_64_cpus,barcelona,athlon-fx,nocona,core2"
+
+is_x86_cpu() {
+    expr ",${x86_cpus}," : ".*,$1," > /dev/null
+}
+
+is_x86_64_cpu() {
+    expr ",${x86_64_cpus}," : ".*,$1," > /dev/null
+}
+
+is_x86_mmx() {
+    expr ",${x86_mmx_cpus}," : ".*,$1," > /dev/null || is_x86_64_cpu "$1"
+}
+
+
+# CONFIG_LIST contains configurable options, while HAVE_LIST is for
+# system-dependent things.
+
+COMPONENT_LIST="
+    bsfs
+    decoders
+    demuxers
+    encoders
+    filters
+    hwaccels
+    indevs
+    muxers
+    outdevs
+    parsers
+    protocols
+"
+
+CONFIG_LIST="
+    $COMPONENT_LIST
+    aandct
+    avfilter
+    avfilter_lavf
+    avisynth
+    beos_netserver
+    bzlib
+    fastdiv
+    ffmpeg
+    ffplay
+    ffserver
+    fft
+    golomb
+    gpl
+    gprof
+    gray
+    hardcoded_tables
+    ipv6
+    libamr_nb
+    libamr_wb
+    libdc1394
+    libdirac
+    libfaac
+    libfaad
+    libfaadbin
+    libgsm
+    libmp3lame
+    libnut
+    libopencore_amrnb
+    libopencore_amrwb
+    libopenjpeg
+    libschroedinger
+    libspeex
+    libtheora
+    libvorbis
+    libx264
+    libxvid
+    mdct
+    memalign_hack
+    mlib
+    mpegaudio_hp
+    network
+    nonfree
+    postproc
+    powerpc_perf
+    rdft
+    runtime_cpudetect
+    shared
+    small
+    static
+    swscale_alpha
+    vaapi
+    vdpau
+    version3
+    x11grab
+    zlib
+"
+
+THREADS_LIST='
+    beosthreads
+    os2threads
+    pthreads
+    w32threads
+'
+
+ARCH_LIST='
+    alpha
+    arm
+    bfin
+    ia64
+    m68k
+    mips
+    mips64
+    parisc
+    ppc
+    ppc64
+    s390
+    sh4
+    sparc
+    sparc64
+    x86
+    x86_32
+    x86_64
+'
+
+ARCH_EXT_LIST='
+    altivec
+    amd3dnow
+    amd3dnowext
+    armv5te
+    armv6
+    armv6t2
+    armvfp
+    iwmmxt
+    mmi
+    mmx
+    mmx2
+    neon
+    ppc4xx
+    sse
+    ssse3
+    vis
+'
+
+HAVE_LIST="
+    $ARCH_EXT_LIST
+    $THREADS_LIST
+    alsa_asoundlib_h
+    altivec_h
+    arpa_inet_h
+    bigendian
+    bswap
+    closesocket
+    cmov
+    conio_h
+    cpu_clips_negative
+    cpu_clips_positive
+    dcbzl
+    dev_bktr_ioctl_bt848_h
+    dev_bktr_ioctl_meteor_h
+    dev_ic_bt8xx_h
+    dev_video_meteor_ioctl_meteor_h
+    dev_video_bktr_ioctl_bt848_h
+    dlfcn_h
+    dlopen
+    dos_paths
+    ebp_available
+    ebx_available
+    fast_64bit
+    fast_cmov
+    fast_unaligned
+    fe_can_2g_modulation
+    fork
+    freetype2
+    ftime
+    gethrtime
+    getifaddrs
+    GetProcessTimes
+    getrusage
+    gettimeofday
+    inet_aton
+    inline_asm
+    ldbrx
+    libdc1394_1
+    libdc1394_2
+    llrint
+    loongson
+    lrint
+    lrintf
+    lzo1x_999_compress
+    machine_ioctl_bt848_h
+    machine_ioctl_meteor_h
+    malloc_h
+    memalign
+    mkstemp
+    pld
+    posix_fadvise
+    posix_memalign
+    round
+    roundf
+    sdl
+    sdl_video_size
+    setmode
+    socklen_t
+    soundcard_h
+    poll_h
+    stdint_h
+    sync_file_range
+    sys_mman_h
+    sys_resource_h
+    sys_select_h
+    sys_soundcard_h
+    sys_videoio_h
+    ten_operands
+    termios_h
+    threads
+    truncf
+    VirtualAlloc
+    winsock2_h
+    xform_asm
+    yasm
+"
+
+# options emitted with CONFIG_ prefix but not available on command line
+CONFIG_EXTRA="
+    gplv3
+    lgplv3
+"
+
+MYTHTV_CONFIG_LIST='
+    backend
+    cygwin
+    darwin
+    dbox2
+    directfb
+    disable_mmx_for_debugging
+    dvb
+    dvdv
+    firewire
+    fribidi
+    frontend
+    glx_proc_addr_arb
+    hdhomerun
+    hdpvr
+    iptv
+    ivtv
+    joystick_menu
+    libfftw3
+    lirc
+    mheg
+    opengl_video
+    opengl_vsync
+    qtwebkit
+    v4l
+    valgrind
+    x11
+    xrandr
+    xv
+    xvmc
+    xvmc_vld
+    xvmcw
+'
+
+MYTHTV_LIST='
+    audio_pulse
+    audio_alsa
+    audio_arts
+    audio_jack
+    audio_oss
+    ffmpeg_pthreads
+    mac_bundle
+    proc_opt
+    silent_cc
+    symbol_visibility
+    xvmc_pro
+'
+
+USING_LIST='
+    appleremote
+    bindings_perl
+    bindings_python
+    darwin_da
+    dvdv
+    opengl
+    vdpau
+'
+
+CMDLINE_SELECT="
+    $ARCH_EXT_LIST
+    $CONFIG_LIST
+    $THREADS_LIST
+    cross_compile
+    $MYTHTV_LIST
+    $MYTHTV_CONFIG_LIST
+    debug
+    extra_warnings
+    logging
+    opengl
+    optimizations
+    stripping
+    yasm
+"
+
+PATHS_LIST='
+    bindir
+    datadir
+    dvb_path
+    incdir
+    libdir
+    mandir
+    prefix
+    runprefix
+    shlibdir
+    x11_path
+'
+
+CMDLINE_SET="
+    $PATHS_LIST
+    arch
+    as
+    build_suffix
+    cc
+    cpu
+    cross_prefix
+    cxx
+    logging
+    extra_version
+    host_cc
+    host_cflags
+    host_ldflags
+    host_libs
+    host_os
+    logfile
+    nm
+    qmake
+    source_path
+    sysinclude
+    sysroot
+    target_exec
+    target_os
+    target_path
+"
+
+# code dependency declarations
+
+# architecture extensions
+altivec_deps="ppc"
+amd3dnow_deps="mmx"
+amd3dnowext_deps="amd3dnow"
+armv5te_deps="arm"
+armv6_deps="arm"
+armv6t2_deps="arm"
+armvfp_deps="arm"
+iwmmxt_deps="arm"
+mmi_deps="mips"
+mmx_deps="x86"
+mmx2_deps="mmx"
+neon_deps="arm"
+ppc4xx_deps="ppc"
+sse_deps="mmx"
+ssse3_deps="sse"
+vis_deps="sparc"
+
+# decoders / encoders / hardware accelerators
+aac_decoder_deps="!libfaad !libfaadbin"
+aac_decoder_select="fft mdct"
+ac3_decoder_select="fft mdct"
+atrac3_decoder_select="fft mdct"
+cavs_decoder_select="golomb"
+cook_decoder_select="fft mdct"
+cscd_decoder_suggest="zlib"
+dca_decoder_select="fft mdct"
+dnxhd_encoder_select="aandct"
+dxa_decoder_select="zlib"
+eac3_decoder_select="ac3_decoder"
+eatgq_decoder_select="aandct"
+eatqi_decoder_select="aandct"
+ffv1_decoder_select="golomb"
+flac_decoder_select="golomb"
+flac_encoder_select="golomb"
+flashsv_decoder_select="zlib"
+flashsv_encoder_select="zlib"
+flv_encoder_select="aandct"
+h261_encoder_select="aandct"
+h263_encoder_select="aandct"
+h263_vaapi_hwaccel_deps="va_va_h"
+h263_vaapi_hwaccel_select="vaapi"
+h263p_encoder_select="aandct"
+h264_decoder_select="golomb"
+h264_vaapi_hwaccel_deps="va_va_h"
+h264_vaapi_hwaccel_select="vaapi"
+h264_vdpau_decoder_deps="vdpau_vdpau_h vdpau_vdpau_x11_h"
+h264_vdpau_decoder_select="vdpau"
+imc_decoder_select="fft mdct"
+jpegls_decoder_select="golomb"
+jpegls_encoder_select="golomb"
+ljpeg_encoder_select="aandct"
+loco_decoder_select="golomb"
+mjpeg_encoder_select="aandct"
+mpeg1video_encoder_select="aandct"
+mpeg2video_encoder_select="aandct"
+mpeg4_encoder_select="aandct"
+mpeg_dvdv_decoder_deps="dvdv"
+mpeg_vdpau_decoder_deps="vdpau_vdpau_h vdpau_vdpau_x11_h"
+mpeg_vdpau_decoder_select="vdpau"
+mpeg1_vdpau_decoder_deps="vdpau_vdpau_h vdpau_vdpau_x11_h"
+mpeg1_vdpau_decoder_select="vdpau"
+mpeg2_vaapi_hwaccel_deps="va_va_h"
+mpeg2_vaapi_hwaccel_select="vaapi"
+mpeg4_vaapi_hwaccel_deps="va_va_h"
+mpeg4_vaapi_hwaccel_select="vaapi"
+mpeg_xvmc_decoder_deps="X11_extensions_XvMClib_h"
+mpeg_xvmc_vld_decoder_deps="xvmc_vld"
+msmpeg4v1_encoder_select="aandct"
+msmpeg4v2_encoder_select="aandct"
+msmpeg4v3_encoder_select="aandct"
+nellymoser_decoder_select="fft mdct"
+nellymoser_encoder_select="fft mdct"
+png_decoder_select="zlib"
+png_encoder_select="zlib"
+qdm2_decoder_select="fft mdct rdft"
+rv10_encoder_select="aandct"
+rv20_encoder_select="aandct"
+rv30_decoder_select="golomb"
+rv40_decoder_select="golomb"
+shorten_decoder_select="golomb"
+sonic_decoder_select="golomb"
+sonic_encoder_select="golomb"
+sonic_ls_encoder_select="golomb"
+svq3_decoder_select="golomb"
+svq3_decoder_suggest="zlib"
+tiff_decoder_suggest="zlib"
+tiff_encoder_suggest="zlib"
+tscc_decoder_select="zlib"
+vc1_vaapi_hwaccel_deps="va_va_h"
+vc1_vaapi_hwaccel_select="vaapi"
+vc1_vdpau_decoder_deps="vdpau_vdpau_h vdpau_vdpau_x11_h"
+vc1_vdpau_decoder_select="vdpau"
+vorbis_decoder_select="fft mdct"
+vorbis_encoder_select="fft mdct"
+wmav1_decoder_select="fft mdct"
+wmav1_encoder_select="fft mdct"
+wmav2_decoder_select="fft mdct"
+wmav2_encoder_select="fft mdct"
+wmv1_encoder_select="aandct"
+wmv2_encoder_select="aandct"
+wmv3_vaapi_hwaccel_deps="va_va_h"
+wmv3_vaapi_hwaccel_select="vaapi"
+wmv3_vdpau_decoder_deps="vdpau_vdpau_h vdpau_vdpau_x11_h"
+wmv3_vdpau_decoder_select="vdpau"
+zlib_decoder_select="zlib"
+zlib_encoder_select="zlib"
+zmbv_decoder_select="zlib"
+zmbv_encoder_select="zlib"
+
+# parsers
+h264_parser_select="golomb"
+latm_parser_deps="libfaad"
+
+# external libraries
+libamr_nb_decoder_deps="libamr_nb"
+libamr_nb_encoder_deps="libamr_nb"
+libamr_wb_decoder_deps="libamr_wb"
+libamr_wb_encoder_deps="libamr_wb"
+libdirac_decoder_deps="libdirac !libschroedinger"
+libdirac_encoder_deps="libdirac"
+libfaac_encoder_deps="libfaac"
+libfaad_decoder_deps="libfaad"
+libfaad_latm_decoder_deps="libfaad"
+libfaadbin_decoder_extralibs='$ldl'
+libgsm_decoder_deps="libgsm"
+libgsm_encoder_deps="libgsm"
+libgsm_ms_decoder_deps="libgsm"
+libgsm_ms_encoder_deps="libgsm"
+libmp3lame_encoder_deps="libmp3lame"
+libopencore_amrnb_decoder_deps="libopencore_amrnb"
+libopencore_amrnb_encoder_deps="libopencore_amrnb"
+libopencore_amrwb_decoder_deps="libopencore_amrwb"
+libopenjpeg_decoder_deps="libopenjpeg"
+libschroedinger_decoder_deps="libschroedinger"
+libschroedinger_encoder_deps="libschroedinger"
+libspeex_decoder_deps="libspeex"
+libtheora_encoder_deps="libtheora"
+libvorbis_encoder_deps="libvorbis"
+libx264_encoder_deps="libx264"
+libxvid_encoder_deps="libxvid"
+
+# demuxers / muxers
+ac3_demuxer_deps="ac3_parser"
+avisynth_demuxer_deps="avisynth"
+dirac_demuxer_deps="dirac_parser"
+libnut_demuxer_deps="libnut"
+libnut_muxer_deps="libnut"
+matroska_demuxer_suggest="zlib bzlib"
+mov_demuxer_suggest="zlib"
+mp3_demuxer_deps="mpegaudio_parser"
+redir_demuxer_deps="network"
+rtp_muxer_deps="network rtp_protocol"
+rtsp_demuxer_deps="sdp_demuxer"
+sdp_demuxer_deps="rtp_protocol mpegts_demuxer"
+
+# indevs / outdevs
+alsa_indev_deps="alsa_asoundlib_h snd_pcm_htimestamp"
+alsa_indev_extralibs="-lasound"
+alsa_outdev_deps="alsa_asoundlib_h"
+alsa_outdev_extralibs="-lasound"
+audio_beos_indev_deps="audio_beos"
+audio_beos_indev_extralibs="-lmedia -lbe"
+audio_beos_outdev_deps="audio_beos"
+audio_beos_outdev_extralibs="-lmedia -lbe"
+bktr_indev_deps_any="dev_bktr_ioctl_bt848_h machine_ioctl_bt848_h dev_video_bktr_ioctl_bt848_h dev_ic_bt8xx_h"
+dv1394_indev_deps="dv1394 dv_demuxer"
+jack_indev_deps="jack_jack_h"
+jack_indev_extralibs="-ljack"
+libdc1394_indev_deps="libdc1394"
+oss_indev_deps_any="soundcard_h sys_soundcard_h"
+oss_outdev_deps_any="soundcard_h sys_soundcard_h"
+v4l_indev_deps="linux_videodev_h"
+v4l2_indev_deps_any="linux_videodev2_h sys_videoio_h"
+vfwcap_indev_deps="capCreateCaptureWindow"
+vfwcap_indev_extralibs="-lvfw32"
+x11_grab_device_indev_deps="x11grab XShmCreateImage"
+x11_grab_device_indev_extralibs="-lX11 -lXext"
+
+# protocols
+gopher_protocol_deps="network"
+http_protocol_deps="network"
+rtp_protocol_deps="udp_protocol"
+tcp_protocol_deps="network"
+udp_protocol_deps="network"
+
+# filters
+movie_filter_deps="avfilter_lavf"
+
+# programs
+ffplay_deps="sdl"
+ffserver_deps="ffm_muxer rtp_protocol rtsp_demuxer"
+ffserver_extralibs='$ldl'
+
+# mythtv dependencies
+audio_oss_deps_any="soundcard_h sys_soundcard_h"
+dbox2_deps="backend"
+dvb_deps="backend"
+firewire_deps="backend"
+iptv_deps="backend"
+ivtv_deps="backend v4l"
+hdpvr_deps="backend"
+hdhomerun_deps="backend"
+mpegtsraw_demuxer_deps="merge_libavformat_mpegts_c"
+opengl_deps_any="agl_h GL_gl_h darwin windows x11"
+opengl_video_deps="opengl"
+opengl_vsync_deps="opengl"
+v4l_deps="backend"
+xrandr_deps="x11"
+xv_deps="x11"
+xvmc_deps="xv X11_extensions_XvMClib_h"
+xvmc_pro_deps="xvmc X11_extensions_vldXvMC_h"
+xvmc_vld_deps="xvmc X11_extensions_vldXvMC_h"
+xvmcw_deps="xvmc"
+
+# default parameters
+pre_logfile="config.ep"
+logfile="$pre_logfile"
+compile_type="release"
+
+# installation paths
+prefix_default="/usr/local"
+bindir_default='${prefix}/bin'
+datadir_default='${prefix}/share/mythtv'
+incdir_default='$(prefix)/include/mythtv'
+incdir_default='${prefix}/include'
+libdir_default='${prefix}/lib'
+mandir_default='${prefix}/share/man'
+shlibdir_default="$libdir_default"
+
+libdir_name='lib'
+
+# toolchain
+ar="ar"
+cc_default="gcc"
+host_cc_default="gcc"
+ln_s="ln -sf"
+cxx_default="g++"
+ccache="yes"
+distcc="yes"
+nm_default="nm"
+objformat="elf"
+ranlib="ranlib"
+qmake_default="qmake"
+strip="strip"
+yasmexe="yasm"
+
+# machine
+arch=$(uname -m)
+arch_raw="$arch"
+cpu="generic"
+processor=`uname -p 2>/dev/null`
+processor_flags=""
+tune="generic"
+
+if test -f /proc/cpuinfo ; then
+    if test x"$processor" = x"" -o x"$processor" = x"$arch_raw" -o \
+            x"$processor" = x"unknown" ; then
+        processor=`cat /proc/cpuinfo | grep "model name" | head -n 1`
+    fi
+    processor_flags=`cat /proc/cpuinfo | grep "flags" | head -n 1`
+fi
+
+# Mac OS X equivalent
+if test -f /usr/bin/hostinfo ; then
+    arch=`arch`
+    if test x"$arch" = x"ppc" -o x"$arch" = x"ppc64" ; then
+        processor=`/usr/bin/hostinfo | grep "Processor type:"`
+        processor=${processor#Processor type: *}
+        processor=${processor% (*}
+        tune=$processor
+    else
+            # 10.4 only:
+            processor=`/usr/sbin/sysctl -n machdep.cpu.model_string 2>/dev/null`
+            if test x"$processor" = x"" ; then
+                # On 10.5, this contains the type of CPU also:
+                processor=`/usr/sbin/sysctl -n machdep.cpu.brand_string`
+            fi
+            processor_flags=`/usr/sbin/sysctl -n machdep.cpu.features`
+            processor_flags=`echo $processor_flags | tr "[A-Z]" "[a-z]"`
+    fi
+fi
+
+# OS
+target_os=$(tolower $(uname -s))
+host_os=$target_os
+
+# mythtv settings
+CONFIG_DEFINES=""
+CONFIG_INCLUDEPATH=""
+PROFILEFLAGS=""
+
+audio_pulse="default"
+audio_pulse_libs="-lpulse"
+audio_alsa="default"
+audio_alsa_libs="-lasound"
+audio_arts="default"
+audio_jack="default"
+audio_jack_libs="-ljack"
+
+enable audio_oss
+enable bindings_perl
+enable bindings_python
+disable dbox2
+enable directfb
+enable dvb
+enable ffmpeg_pthreads
+enable firewire
+enable frontend
+enable hdhomerun
+enable hdpvr
+enable iptv
+enable ivtv
+enable lamemp3
+enable lirc
+enable mheg
+enable opengl
+enable opengl_vsync
+enable opengl_video
+enable v4l
+enable x11
+enable xrandr
+enable xv
+enable xvmc
+enable xvmc_vld
+enable xvmcw
+
+# mythtv paths
+dvb_path_default="${sysroot}/usr/include"
+x11_path_default="${sysroot}/usr/X11R6/include"
+xvmc_lib=""
+
+# configurable options
+enable gpl
+enable fastdiv
+enable ipv6
+enable mpegaudio_hp
+enable network
+enable optimizations
+enable protocols
+enable shared
+enable stripping
+enable swscale_alpha
+
+# build settings
+add_cflags -D_ISOC99_SOURCE -D_POSIX_C_SOURCE=200112
+SHFLAGS='-shared -Wl,-soname,$$(@F)'
+FFSERVERLDFLAGS=-Wl,-E
+LIBPREF="lib"
+LIBSUF=".a"
+FULLNAME='$(NAME)$(BUILDSUF)'
+LIBNAME='$(LIBPREF)$(FULLNAME)$(LIBSUF)'
+SLIBPREF="lib"
+SLIBSUF=".so"
+SLIBNAME='$(SLIBPREF)$(FULLNAME)$(SLIBSUF)'
+SLIBNAME_WITH_VERSION='$(SLIBNAME).$(LIBVERSION)'
+SLIBNAME_WITH_MAJOR='$(SLIBNAME).$(LIBMAJOR)'
+LIB_INSTALL_EXTRA_CMD='$(RANLIB) "$(LIBDIR)/$(LIBNAME)"'
+
+host_cflags='-O3 -g -Wall'
+host_libs='-lm'
+
+target_path='.'
+
+# gcc stupidly only outputs the basename of targets with -MM, but we need the
+# full relative path for objects in subdirectories for non-recursive Make.
+DEPEND_CMD='$(CC) $(CFLAGS) -MM $< | sed -e "/^\#.*/d" -e "s,^[[:space:]]*$(*F)\\.o,$(@D)/$(*F).o,"'
+
+# find source path
+source_path="$(dirname "$0")"
+enable source_path_used
+if test -z "$source_path" -o "$source_path" = "." ; then
+    source_path="$(pwd)"
+    disable source_path_used
+else
+    source_path="$(cd "$source_path"; pwd)"
+    echo "$source_path" | grep -q '[[:blank:]]' &&
+        die "Out of tree builds are impossible with whitespace in source path."
+    test -e "$source_path/config.h" &&
+        die "Out of tree builds are impossible with config.h in source dir."
+fi
+
+for v in "$@"; do
+    r=${v#*=}
+    l=${v%"$r"}
+    r=$(sh_quote "$r")
+    FFMPEG_CONFIGURATION="${FFMPEG_CONFIGURATION# } ${l}${r}"
+done
+
+find_things(){
+    thing=$1
+    pattern=$2
+    file=$source_path/$3
+    sed -n "s/^[^#]*$pattern.*([^,]*, *\([^,]*\)\(,.*\)*).*/\1_$thing/p" "$file"
+}
+
+ENCODER_LIST=$(find_things  encoder  ENC      libs/libavcodec/allcodecs.c)
+DECODER_LIST=$(find_things  decoder  DEC      libs/libavcodec/allcodecs.c)
+HWACCEL_LIST=$(find_things  hwaccel  HWACCEL  libs/libavcodec/allcodecs.c)
+PARSER_LIST=$(find_things   parser   PARSER   libs/libavcodec/allcodecs.c)
+BSF_LIST=$(find_things      bsf      BSF      libs/libavcodec/allcodecs.c)
+MUXER_LIST=$(find_things    muxer    _MUX     libs/libavformat/allformats.c)
+DEMUXER_LIST=$(find_things  demuxer  DEMUX    libs/libavformat/allformats.c)
+OUTDEV_LIST="" #$(find_things   outdev   OUTDEV   libavdevice/alldevices.c)
+INDEV_LIST="" #$(find_things    indev    _IN      libavdevice/alldevices.c)
+PROTOCOL_LIST=$(find_things protocol PROTOCOL libs/libavformat/allformats.c)
+FILTER_LIST="" #$(find_things   filter   FILTER   libs/libavfilter/allfilters.c)
+
+enable $ARCH_EXT_LIST \
+       $DECODER_LIST \
+       $ENCODER_LIST \
+       $HWACCEL_LIST \
+       $PARSER_LIST \
+       $BSF_LIST \
+       $DEMUXER_LIST \
+       $MUXER_LIST \
+       $FILTER_LIST \
+       $PROTOCOL_LIST \
+       $INDEV_LIST \
+       $OUTDEV_LIST \
+
+die_unknown(){
+    echo "Unknown option \"$1\"."
+    echo "See $0 --help for available options."
+    exit 1
+}
+
+show_list() {
+    suffix=_$1
+    shift
+    echo $* | sed s/$suffix//g | tr ' ' '\n' | sort
+    exit 0
+}
+
+if [ -e config.log ] ; then
+    PCONF=`cat config.log | tail -n 1 | grep configure`
+    if test x"$PCONF" != x"" ; then
+        PCONF=`echo $PCONF | sed 's/.\/configure//g'`
+    fi
+    for opt do
+        if test x"$opt" != x"--prev" -a x"$opt" != x"--previous" ; then
+            OTHOPT="$OTHOPT$opt"
+        fi
+        if test x"$opt" = x"--prev" -o x"$opt" = x"--previous" ; then
+            if test x"$PCONF" != "--prev" ; then
+                PREV="yes";
+            fi
+        fi
+    done
+    if test x"$PREV" = x"yes"; then
+        echo "Options: $PCONF $OTHOPT"
+        ./configure $PCONF $OTHOPT
+        exit
+    fi
+fi
+
+# set temporary file name
+if test ! -z "$TMPDIR" ; then
+    TMPDIR1="${TMPDIR}"
+elif test ! -z "$TEMPDIR" ; then
+    TMPDIR1="${TEMPDIR}"
+else
+    TMPDIR1="/tmp"
+fi
+
+TMPC="${TMPDIR1}/mythtv-conf-${RANDOM}-$$-${RANDOM}.c"
+TMPE="${TMPDIR1}/mythtv-conf-${RANDOM}-$$-${RANDOM}${EXESUF}"
+TMPH="${TMPDIR1}/mythtv-conf-${RANDOM}-$$-${RANDOM}.h"
+TMPO="${TMPDIR1}/mythtv-conf-${RANDOM}-$$-${RANDOM}.o"
+TMPS="${TMPDIR1}/mythtv-conf-${RANDOM}-$$-${RANDOM}.S"
+TMPSH="${TMPDIR1}/mythtv-conf-${RANDOM}-$$-${RANDOM}.sh"
+TMPCXX="${TMPDIR1}/mythtv-conf-${RANDOM}-$$-${RANDOM}.c"
+
+for opt do
+    optval="${opt#*=}"
+    case "$opt" in
+    --compile-type=*) compile_type=$optval
+    ;;
+    --libdir-name=*) libdir_name=$optval
+    ;;
+    --extra-cflags=*) add_ecflags $optval
+    ;;
+    --extra-cxxflags=*) add_cxxflags $optval
+    ;;
+    --extra-ldflags=*) add_ldflags $optval
+    ;;
+    --extra-libs=*) add_extralibs $optval
+    ;;
+    --arch=*) arch=$optval && arch_raw=$optval && enable cpu_override
+    ;;
+    --cpu=*) cpu=$optval && enable cpu_override
+    ;;
+    --tune=*) tune=$optval
+    ;;
+    --disable-ccache) disable ccache
+    ;;
+    --disable-distcc) disable distcc
+    ;;
+    --xvmc-lib=*) xvmc_lib=$optval
+    ;;
+    --enable-glx-procaddrarb) enable glx_proc_addr_arb
+    ;;
+    --disable-glx-procaddrarb) disable glx_proc_addr_arb
+    ;;
+    --enable-mac-accel) enable dvdv
+    ;;
+    --disable-mac-accel) disable dvdv
+    ;;
+# disabled due to abuse in Gentoo ebuild
+    --disable-frontend)
+    ;;
+# disabled due to abuse in Gentoo ebuild
+    --disable-backend)
+    ;;
+    --enable-mac-bundle) enable mac_bundle
+    ;;
+    --previous|--prev)
+        echo "No history of previous configure parameters."
+    ;;
+    --with-bindings=*)
+        tmp_bindings=`echo ${optval} | sed -e 's/,/ /g'`
+        for binding in ${tmp_bindings} ; do
+            if test x"${binding}" = x"perl"; then
+                bindings_perl="yes"
+            fi
+            if test x"${binding}" = x"python"; then
+                bindings_python="yes"
+            fi
+        done
+    ;;
+    --without-bindings=*)
+        tmp_bindings=`echo ${optval} | sed -e 's/,/ /g'`
+        for binding in ${tmp_bindings} ; do
+            if test x"${binding}" = x"perl"; then
+                bindings_perl="no"
+            fi
+            if test x"${binding}" = x"python"; then
+                bindings_python="no"
+            fi
+        done
+    ;;
+    --disable-devices) disable $INDEV_LIST $OUTDEV_LIST
+    ;;
+    --enable-debug=*) debuglevel="$optval"
+    ;;
+    --enable-*=*|--disable-*=*)
+    eval $(echo "$opt" | sed 's/=/-/;s/--/action=/;s/-/ thing=/;s/-/ name=/')
+    case "$thing" in
+        encoder|decoder|hwaccel|muxer|demuxer|indev|outdev|parser|bsf|protocol|filter) $action ${optval}_${thing} ;;
+        *) die_unknown "$opt" ;;
+    esac
+    ;;
+    --enable-?*|--disable-?*)
+    eval $(echo "$opt" | sed 's/--/action=/;s/-/ option=/;s/-/_/g')
+    if is_in $option $COMPONENT_LIST; then
+        eval $action \$$(toupper ${option%s})_LIST
+    elif is_in $option $CMDLINE_SELECT; then
+        $action $option
+    else
+        die_unknown $opt
+    fi
+    ;;
+    --list-*)
+        NAME="${opt#--list-}"
+        is_in $NAME $COMPONENT_LIST || die_unknown $opt
+        NAME=${NAME%s}
+        eval show_list $NAME \$$(toupper $NAME)_LIST
+    ;;
+    --help|-h) show_help
+    ;;
+    *)
+    optname="${opt%%=*}"
+    optname="${optname#--}"
+    optname=$(echo "$optname" | sed 's/-/_/g')
+    is_in $optname $CMDLINE_SET || die_unknown $opt
+    eval $optname='$optval'
+    ;;
+    esac
+done
+
+
+#setting default runtime prefix and libdir
+if test -n "${prefix}"; then
+    runprefix_default=${prefix}
+    libdir_default="${prefix}/${libdir_name}"
+else
+    runprefix_default=${prefix_default}
+    libdir_default="${prefix_default}/${libdir_name}"
+fi
+
+if enabled cpu_override || test x"$tune" != x"generic" && enabled proc_opt; then
+    echo "Warning! --enable-proc-opt shouldn't be used with --arch, --cpu or --tune"
+    echo "Disabling it now."
+    disable proc_opt
+fi
+
+disabled logging && logfile=/dev/null
+
+echo "# $0 $FFMPEG_CONFIGURATION" > $logfile
+set >> $logfile
+
+test -n "$cross_prefix" && enable cross_compile
+
+ar="${cross_prefix}${ar}"
+cc_default="${cross_prefix}${cc_default}"
+cxx_default="${cross_prefix}${cxx_default}"
+nm_default="${cross_prefix}${nm_default}"
+ranlib="${cross_prefix}${ranlib}"
+strip="${cross_prefix}${strip}"
+
+sysinclude_default="${sysroot}/usr/include"
+
+set_default cc nm sysinclude
+set_default cxx qmake
+as_default=$cc
+enabled cross_compile || host_cc_default=$cc
+set_default host_cc
+
+exesuf() {
+    case $1 in
+        mingw32*|cygwin*|*-dos|freedos|opendos|os/2*) echo .exe ;;
+    esac
+}
+
+EXESUF=$(exesuf $target_os)
+HOSTEXESUF=$(exesuf $host_os)
+
+# set temporary file name
+: ${TMPDIR:=$TEMPDIR}
+: ${TMPDIR:=$TMP}
+: ${TMPDIR:=/tmp}
+
+if ! check_cmd type mktemp; then
+    # simple replacement for missing mktemp
+    # NOT SAFE FOR GENERAL USE
+    mktemp(){
+        echo "${2%XXX*}.${HOSTNAME}.${UID}.$$"
+    }
+fi
+
+tmpfile(){
+    tmp=$(mktemp -u "${TMPDIR}/mythtv_conf.XXXXXXXX")$2 &&
+        (set -C; exec > $tmp) 2>/dev/null ||
+        die "Unable to create temoporary file in $TMPDIR."
+    append TMPFILES $tmp
+    eval $1=$tmp
+}
+
+trap 'rm -f -- $TMPFILES' EXIT
+trap exit HUP INT TERM
+
+tmpfile TMPC  .c
+tmpfile TMPE  $EXESUF
+tmpfile TMPH  .h
+tmpfile TMPO  .o
+tmpfile TMPS  .S
+tmpfile TMPSH .sh
+
+unset -f mktemp
+
+# make sure we can execute files in $TMPDIR
+cat > $TMPSH 2>> $logfile <<EOF
+#! /bin/sh
+EOF
+chmod +x $TMPSH >> $logfile 2>&1
+if ! $TMPSH >> $logfile 2>&1; then
+    cat <<EOF
+Unable to create and execute files in $TMPDIR.  Set the TMPDIR environment
+variable to another directory and make sure that it is not mounted noexec.
+EOF
+    die "Sanity test failed."
+fi
+
+if   $cc --version 2>/dev/null | grep -qi gcc; then
+    cc_type=gcc
+elif $cc --version 2>/dev/null | grep -q Intel; then
+    cc_type=icc
+elif $cc -v 2>&1 | grep -q xlc; then
+    cc_type=xlc
+elif $cc -V 2>/dev/null | grep -q Compaq; then
+    cc_type=ccc
+    DEPEND_CMD='$(CC) $(CFLAGS) -M $< | sed -e "/^\#.*/d" -e "s,^[[:space:]]*$(*F)\\.o,$(@D)/$(*F).o,"'
+    debuglevel=3
+    add_ldflags -Wl,-z,now # calls to libots crash without this
+elif $cc --vsn 2>/dev/null | grep -q RVCT; then
+    test -d "$sysroot" || die "No valid sysroot specified."
+    cc_type=armcc
+    armcc_conf="$PWD/armcc.conf"
+    $cc --arm_linux_configure                 \
+        --arm_linux_config_file="$armcc_conf" \
+        --configure_sysroot="$sysroot"        \
+        --configure_cpp_headers="$sysinclude" >>$logfile 2>&1 ||
+        die "Error creating armcc configuration file."
+    cc="$cc --arm_linux_config_file=$armcc_conf --translate_gcc"
+    as_default="${cross_prefix}gcc"
+fi
+
+test -n "$cc_type" && enable $cc_type || echolog "Unknown C compiler $cc"
+
+set_default as
+
+if test -n "$sysroot"; then
+    case "$cc_type" in
+        gcc)
+            add_cflags  --sysroot="$sysroot"
+            add_ldflags --sysroot="$sysroot"
+        ;;
+    esac
+fi
+
+# compiler sanity check
+check_exec <<EOF
+int main(void){ return 0; }
+EOF
+if test "$?" != 0; then
+    echo "$cc is unable to create an executable file."
+    echo "Check your ECFLAGS: [$ECFLAGS]"
+    if test -z "$cross_prefix" && ! enabled cross_compile ; then
+        echo "If $cc is a cross-compiler, use the --enable-cross-compile option."
+        echo "Only do this if you know what cross compiling means."
+    fi
+    die "C compiler test failed."
+fi
+
+# C++ compiler sanity check
+check_exec_cxx <<EOF
+int main(void){ return 0; }
+EOF
+if test "$?" != 0; then
+    echo "$cxx is unable to create an executable file."
+    echo "Check your ECXXFLAGS: [$ECXXFLAGS]"
+    if test -z "$cross_prefix" && ! enabled cross_compile ; then
+        echo "If $cxx is a cross-compiler, use the --enable-cross-compile option."
+        echo "Only do this if you know what cross compiling means."
+    fi
+    die "C++ compiler test failed."
+fi
+
+check_cflags -std=c99
+check_cc -D_FILE_OFFSET_BITS=64 <<EOF && add_cflags -D_FILE_OFFSET_BITS=64
+#include <stdlib.h>
+EOF
+check_cc -D_LARGEFILE_SOURCE <<EOF && add_cflags -D_LARGEFILE_SOURCE
+#include <stdlib.h>
+EOF
+
+case "$arch" in
+    alpha)
+        arch="alpha"
+        enable fast_64bit
+        check_cflags -mieee
+    ;;
+    arm|armv[4567]*l)
+        arch="arm"
+    ;;
+    avr32)
+    ;;
+    bfin)
+        arch="bfin"
+    ;;
+    ia64)
+        arch="ia64"
+        enable fast_64bit
+    ;;
+    m68k)
+        arch="m68k"
+    ;;
+    mips|mipsel|IP*)
+        arch="mips"
+    ;;
+    mips64)
+        arch="mips"
+        subarch="mips64"
+        enable fast_64bit
+    ;;
+    parisc|hppa)
+        arch="parisc"
+    ;;
+    parisc64|hppa64)
+        arch="parisc"
+        enable fast_64bit
+    ;;
+    "Power Macintosh"|ppc|powerpc)
+        arch="ppc"
+        enable fast_unaligned
+    ;;
+    ppc64)
+        arch="ppc"
+        subarch="ppc64"
+        enable fast_64bit
+        enable fast_unaligned
+    ;;
+    s390|s390x)
+        arch="s390"
+    ;;
+    sh4|sh)
+        arch="sh4"
+    ;;
+    sparc)
+        arch="sparc"
+    ;;
+    sun4u|sparc64)
+        arch="sparc"
+        subarch="sparc64"
+        enable fast_64bit
+    ;;
+    i386|i486|i586|i686|i86pc|BePC)
+        arch="x86"
+        subarch="x86_32"
+        enable fast_unaligned
+    ;;
+    x86_64|amd64)
+        arch="x86"
+        subarch="x86_32"
+        enable cmov
+        enable fast_cmov
+        enable fast_unaligned
+        check_cc <<EOF && enable fast_64bit && subarch="x86_64"
+        int test[sizeof(char*) - 7];
+EOF
+    ;;
+    *)
+        arch="unknown"
+    ;;
+esac
+
+enable $arch $subarch
+
+# OS specific
+case $target_os in
+    beos|haiku|zeta)
+        prefix_default="$HOME/config"
+        # helps building libavcodec
+        add_cflags -DPIC -fomit-frame-pointer
+        # 3 gcc releases known for BeOS, each with ugly bugs
+        gcc_version="$($cc -v 2>&1 | grep version | cut -d ' ' -f3-)"
+        case "$gcc_version" in
+          2.9-beos-991026*|2.9-beos-000224*) echo "R5/GG gcc"
+            disable mmx
+            ;;
+          *20010315*) echo "BeBits gcc"
+            add_cflags -fno-expensive-optimizations
+            ;;
+        esac
+        SHFLAGS=-nostart
+        # enable BeOS things
+        enable audio_beos
+        # no need for libm, but the inet stuff
+        # Check for BONE
+        # XXX: actually should check for NOT net_server
+        if echo $BEINCLUDES | grep -q 'headers/be/bone'; then
+            network_extralibs="-lbind -lsocket"
+        else
+            enable beos_netserver
+            network_extralibs="-lnet"
+        fi ;;
+    sunos)
+        FFSERVERLDFLAGS=""
+        SHFLAGS='-shared -Wl,-h,$$(@F)'
+        network_extralibs="-lsocket -lnsl"
+        add_cflags -D__EXTENSIONS__
+        ;;
+    netbsd)
+        oss_indev_extralibs="-lossaudio"
+        oss_outdev_extralibs="-lossaudio"
+        ;;
+    openbsd)
+        append CCONFIG "openbsd"
+        disable need_memalign
+        LIBOBJFLAGS='$(PIC)'
+        SHFLAGS='-shared'
+        oss_indev_extralibs="-lossaudio"
+        oss_outdev_extralibs="-lossaudio"
+        ;;
+    freebsd|dragonfly)
+        append CCONFIG "freebsd"
+        # Workaround compile errors from missing u_int/uint def
+        CFLAGS=`echo $CFLAGS | sed 's/-D_POSIX_C_SOURCE=200112//'`
+        disable ivtv
+        disable need_memalign
+        enable backend
+        ;;
+    bsd/os)
+        osextralibs="-lpoll -lgnugetopt"
+        strip="strip -d"
+        ;;
+    darwin)
+        _restrict=__restrict__
+        enable  appleremote
+        enable  backend
+        enable  darwin
+        disable dvb
+        disable ivtv
+        # Prevent linker problems on default Intel 10.5 XCode:
+        ldver=$(ld -v 2>&1 | sed -e s/^[^-]*-//)
+        osxver=$(uname -r | cut -c 1)
+        if [[ ${ldver%%.*} -lt "82" && ${osxver} = "9" && ${arch} = "x86_32" ]]; then
+            cat <<EOF
+You have a broken ld. Please upgrade XCode to 3.1.1 or newer.
+MMX disabled to allow libavcodec to build.
+Playback of HD videos may be very poor.
+EOF
+            disable mmx
+            enable disable_mmx_for_debugging   # prevent later call to die
+        fi
+        disable opengl_vsync
+        enable  proc_opt
+        disable v4l
+        disable x11
+        # Workaround compile errors from missing gmtime_r/localtime_r/uint def
+        CFLAGS=`echo $CFLAGS | sed 's/-D_POSIX_C_SOURCE=200112//'`
+        ###### Standard ffmpeg configure stuff follows:
+        disable need_memalign
+        SHFLAGS='-dynamiclib -Wl,-single_module -Wl,-install_name,$(SHLIBDIR)/$(SLIBNAME),-current_version,$(LIBVERSION),-compatibility_version,$(LIBMAJOR) -Wl,-read_only_relocs,suppress'
+        strip="strip -x"
+        FFLDFLAGS="-Wl,-dynamic,-search_paths_first"
+        SLIBSUF=".dylib"
+        SLIBNAME_WITH_VERSION='$(SLIBPREF)$(FULLNAME).$(LIBVERSION)$(SLIBSUF)'
+        SLIBNAME_WITH_MAJOR='$(SLIBPREF)$(FULLNAME).$(LIBMAJOR)$(SLIBSUF)'
+        FFSERVERLDFLAGS=-Wl,-bind_at_load
+        objformat="macho"
+        enabled x86_64 && objformat="macho64"
+        ;;
+    mingw32*)
+        target_os=mingw32
+        LIBTARGET=i386
+        if enabled x86_64; then
+            disable need_memalign
+            LIBTARGET=x64
+        fi
+        shlibdir_default="$bindir_default"
+        enable  backend
+        disable bindings_perl
+        disable bindings_python
+        disable dv1394
+        disable dvb
+        disable ivtv
+        disable hdpvr
+        enable  memalign_hack
+        disable network
+        enable opengl
+        if enabled wince; then
+            disable protocols
+        fi
+        disable v4l
+        enable  windows
+        disable x11
+        ###### Standard ffmpeg configure stuff follows:
+        disable ffserver
+        SLIBPREF="lib"
+        SLIBSUF=".dll"
+        SLIBNAME_WITH_VERSION='$(SLIBPREF)$(NAME)-$(LIBVERSION)$(SLIBSUF)'
+        SLIBNAME_WITH_MAJOR='$(SLIBPREF)$(NAME)-$(LIBMAJOR)$(SLIBSUF)'
+        SLIB_EXTRA_CMD='-lib.exe /machine:$(LIBTARGET) /def:$$(@:$(SLIBSUF)=.def) /out:$(SUBDIR)$(SLIBNAME_WITH_MAJOR:$(SLIBSUF)=.lib)'
+        SLIB_INSTALL_EXTRA_CMD='-install -m 644 $(SUBDIR)$(SLIBNAME_WITH_MAJOR:$(SLIBSUF)=.lib) "$(SHLIBDIR)/$(SLIBNAME:$(SLIBSUF)=.lib)"; \
+            install -m 644 $(SUBDIR)$(SLIBNAME_WITH_MAJOR:$(SLIBSUF)=.lib) "$(SHLIBDIR)/$(SLIBNAME_WITH_MAJOR:$(SLIBSUF)=.lib)"'
+        SLIB_UNINSTALL_EXTRA_CMD='rm -f "$(SHLIBDIR)/$(SLIBNAME:$(SLIBSUF)=.lib)"'
+        SHFLAGS='-shared -Wl,--output-def,$$(@:$(SLIBSUF)=.def) -Wl,--out-implib,$(SUBDIR)lib$(SLIBNAME:$(SLIBSUF)=.dll.a) -Wl,--enable-runtime-pseudo-reloc -Wl,--enable-auto-image-base'
+        add_extralibs -lws2_32
+        objformat="win32"
+        enable dos_paths
+        check_cflags -fno-common
+        if ! enabled x86_64; then
+            check_cpp_condition _mingw.h "(__MINGW32_MAJOR_VERSION > 3) || (__MINGW32_MAJOR_VERSION == 3 && __MINGW32_MINOR_VERSION >= 15)" ||
+                die "ERROR: MinGW runtime version must be >= 3.15."
+            enabled_any avisynth vfwcap_demuxer &&
+                { check_cpp_condition w32api.h "(__W32API_MAJOR_VERSION > 3) || (__W32API_MAJOR_VERSION == 3 && __W32API_MINOR_VERSION >= 13)" ||
+                  die "ERROR: avisynth and vfwcap_demuxer require w32api version 3.13 or later."; }
+            fi
+        ;;
+    cygwin*)
+        enable cygwin
+        target_os=cygwin
+        shlibdir_default="$bindir_default"
+        enable windows
+        SLIBPREF="cyg"
+        SLIBSUF=".dll"
+        SLIBNAME_WITH_VERSION='$(SLIBPREF)$(FULLNAME)-$(LIBVERSION)$(SLIBSUF)'
+        SLIBNAME_WITH_MAJOR='$(SLIBPREF)$(FULLNAME)-$(LIBMAJOR)$(SLIBSUF)'
+        SHFLAGS='-shared -Wl,--enable-auto-image-base'
+        objformat="win32"
+        enable dos_paths
+        check_cflags -fno-common
+        ;;
+    *-dos|freedos|opendos)
+        disable ffplay ffserver
+        disable $INDEV_LIST $OUTDEV_LIST
+        network_extralibs="-lsocket"
+        objformat="coff"
+        enable dos_paths
+        ;;
+    linux)
+        append CCONFIG "linux"
+        enable backend
+        ! disabled joystick_menu && enable joystick_menu
+        enable dv1394
+        ;;
+    irix*)
+        target_os=irix
+        ranlib="echo ignoring ranlib"
+        ;;
+    os/2*)
+        strip="lxlite"
+        ln_s="cp -f"
+        FFLDFLAGS="-Zomf -Zbin-files -Zargs-wild -Zmap"
+        SHFLAGS='$(SUBDIR)$(NAME).def -Zdll -Zomf'
+        FFSERVERLDFLAGS=""
+        LIBSUF="_s.a"
+        SLIBPREF=""
+        SLIBSUF=".dll"
+        SLIBNAME_WITH_VERSION='$(SLIBPREF)$(NAME)-$(LIBVERSION)$(SLIBSUF)'
+        SLIBNAME_WITH_MAJOR='$(SLIBPREF)$(shell echo $(NAME) | cut -c1-6)$(LIBMAJOR)$(SLIBSUF)'
+        SLIB_CREATE_DEF_CMD='echo LIBRARY $(SLIBNAME_WITH_MAJOR) INITINSTANCE TERMINSTANCE > $(SUBDIR)$(NAME).def; \
+          echo PROTMODE >> $(SUBDIR)$(NAME).def; \
+          echo CODE PRELOAD MOVEABLE DISCARDABLE >> $(SUBDIR)$(NAME).def; \
+          echo DATA PRELOAD MOVEABLE MULTIPLE NONSHARED >> $(SUBDIR)$(NAME).def; \
+          echo EXPORTS >> $(SUBDIR)$(NAME).def; \
+          emxexp -o $(OBJS) >> $(SUBDIR)$(NAME).def'
+        SLIB_EXTRA_CMD='emximp -o $(SUBDIR)$(LIBPREF)$(NAME)_dll.a $(SUBDIR)$(NAME).def; \
+          emximp -o $(SUBDIR)$(LIBPREF)$(NAME)_dll.lib $(SUBDIR)$(NAME).def;'
+        SLIB_INSTALL_EXTRA_CMD='install -m 644 $(SUBDIR)$(LIBPREF)$(NAME)_dll.a $(SUBDIR)$(LIBPREF)$(NAME)_dll.lib "$(LIBDIR)"'
+        SLIB_UNINSTALL_EXTRA_CMD='rm -f "$(LIBDIR)"/$(LIBPREF)$(NAME)_dll.a "$(LIBDIR)"/$(LIBPREF)$(NAME)_dll.lib'
+        enable dos_paths
+        ;;
+    gnu/kfreebsd)
+        ;;
+    gnu)
+        ;;
+
+    *)
+        die "Unknown OS '$target_os'."
+        ;;
+esac
+
+set_default $PATHS_LIST
+
+append CONFIG_INCLUDEPATH $sysinclude "${sysroot}${prefix}"
+
+add_extralibs $osextralibs
+
+append CCONFIG "$compile_type"
+if test x$compile_type = x"profile" ; then
+    PROFILEFLAGS="-DNDEBUG"
+    enable debug
+elif test x$compile_type = x"debug"; then
+    enable debug
+    disable optimizations
+fi
+
+enabled silent_cc && append CCONFIG "silent"
+
+
+# Combine FFLDFLAGS and the LDFLAGS environment variable
+LDFLAGS="$FFLDFLAGS $EXTRALDFLAGS $LDFLAGS"
+
+# we need to build at least one lib type
+if ! enabled_any static shared; then
+    cat <<EOF
+At least one library type must be built.
+Specify --enable-static to build the static libraries or --enable-shared to
+build the shared libraries as well. To only build the shared libraries specify
+--disable-static in addition to --enable-shared.
+EOF
+    exit 1;
+fi
+
+disabled static && LIBNAME=""
+
+if enabled_any libfaad libfaadbin ; then
+    if check_header faad.h; then
+        check_cc <<EOF
+#include <faad.h>
+#ifndef FAAD2_VERSION
+ok faad1
+#endif
+int main(void) { return 0; }
+EOF
+        test $? = 0 && enable libfaad2
+    else
+        die "FAAD test failed."
+    fi
+fi
+
+
+die_license_disabled() {
+    enabled $1 || { enabled $2 && die "$2 is $1 and --enable-$1 is not specified."; }
+}
+
+die_license_disabled gpl libfaad2
+die_license_disabled gpl libx264
+die_license_disabled gpl libxvid
+die_license_disabled gpl postproc
+die_license_disabled gpl x11grab
+
+die_license_disabled nonfree libamr_nb
+die_license_disabled nonfree libamr_wb
+die_license_disabled nonfree libfaac
+
+die_license_disabled version3 libopencore_amrnb
+die_license_disabled version3 libopencore_amrwb
+
+enabled version3 && { enabled gpl && enable gplv3 || enable lgplv3; }
+
+check_deps $ARCH_EXT_LIST
+
+# if no tune setting and we know cpu class look at $processor
+if ! enabled_any cpu_override cross_compile && enabled proc_opt; then
+# first try to tune based on processor info
+# Intel i7 processors (EMT64T capable)
+   if expr "$processor" : ".*Intel(R).*Core(TM) i7 CPU.*" > /dev/null ; then
+       cpu="core2"
+# EM64T era Intel Xeon
+   elif expr "$processor" : ".*Intel(R) Xeon(R) CPU.*51[1-6][08]" > /dev/null ; then
+       cpu="core2"
+   elif expr "$processor" : ".*Intel(R) Xeon(R) CPU.*54[0-9][025]" > /dev/null ; then
+       cpu="core2"
+   elif expr "$processor" : ".*Intel(R) Xeon(R) CPU.*33[2567]0" > /dev/null ; then
+       cpu="core2"
+   elif expr "$processor" : ".*Intel(R) Xeon(R) CPU.*X32[123]0" > /dev/null ; then
+       cpu="core2"
+# Various Intel Duo processors (EMT64T capable)
+   elif expr "$processor" : ".*Intel(R).*Core(TM)2.*CPU" > /dev/null ; then
+       cpu="core2"
+   elif expr "$processor" : "*.Pentium(R) 5 CPU" > /dev/null ; then
+       cpu="nocona"
+# EM64T compatible Intel Celeron
+   elif expr "$processor" : ".*Celeron(R) D CPU" > /dev/null ; then
+       cpu="nocona"
+       enable small
+# Intel Core2 Duo
+   elif expr "$processor" : ".*Genuine.*Intel.*CPU.*2160" > /dev/null ; then
+       cpu="core2"
+# Intel Atom
+   elif expr "$processor" : ".*Intel(R) Atom(TM)" > /dev/null ; then
+       cpu="nocona"
+       enable small
+# Reportedly Intel Duo, but we assume 32 bit P3 due to generic name
+   elif expr "$processor" : ".*Genuine.*Intel.*CPU" > /dev/null ; then
+       cpu="pentium3"
+# Pentium-M derivative in AppleTV, assume 32 bit P3 due to generic name
+   elif expr "$processor" : ".*Genuine.*Intel.*processor" > /dev/null ; then
+       cpu="pentium3"
+# P4
+   elif expr "$processor" : ".*Xeon(TM) CPU" > /dev/null ; then
+       cpu="pentium4"
+   elif expr "$processor" : ".*XEON(TM) CPU" > /dev/null ; then
+       cpu="pentium4"
+   elif expr "$processor" : ".*XEON(TM) MP CPU" > /dev/null ; then
+       cpu="pentium4"
+   elif expr "$processor" : "pentium4" > /dev/null ; then
+       cpu="pentium4"
+   elif expr "$processor" : ".*Pentium(R) [4D]" > /dev/null ; then
+       cpu="pentium4"
+   elif expr "$processor" : ".*Celeron(R) CPU" > /dev/null ; then
+       cpu="pentium4"
+       enable small
+# P6, which includes Intel Core
+   elif expr "$processor" : ".*Intel P6 Family" > /dev/null ; then
+       cpu="pentium4"
+# P3
+   elif expr "$processor" : "pentium3" > /dev/null ; then
+       cpu="pentium3"
+   elif expr "$processor" : ".*Pentium.* III" > /dev/null ; then
+       cpu="pentium3"
+   elif expr "$processor" : ".*Coppermine" > /dev/null ; then
+       cpu="pentium3"
+       enable small
+   elif expr "$processor" : ".*Celeron(TM) CPU" > /dev/null ; then
+       cpu="pentium3"
+       enable small
+   elif expr "$processor" : ".*Pentium(R) M" > /dev/null ; then
+       cpu="pentium3"
+   elif expr "$processor" : ".*Celeron(R) M processor" > /dev/null ; then
+       cpu="pentium3"
+       enable small
+# P2
+   elif expr "$processor" : "pentium2" > /dev/null ; then
+       cpu="pentium2"
+   elif expr "$processor" : ".*Mendocino" > /dev/null ; then
+       cpu="pentium2"
+       enable small
+   elif expr "$processor" : ".*Klamath" > /dev/null ; then
+       cpu="pentium2"
+       enable small
+   elif expr "$processor" : ".*Deschutes" > /dev/null ; then
+       cpu="pentium2"
+       enable small
+   elif expr "$processor" : ".*Pentium II" > /dev/null ; then
+       cpu="pentium2"
+       enable small
+# AMD Turion
+   elif expr "$processor" : ".*AMD Turion(tm) 64" > /dev/null ; then
+       cpu="k8"
+# AMD Geode NX
+   elif expr "$processor" : ".*AMD Geode(tm) NX" > /dev/null ; then
+       cpu="athlon"
+       enable small
+# Athlon 64
+   elif expr "$processor" : ".*AMD Athlon(tm) 64" > /dev/null ; then
+       cpu="k8"
+   elif expr "$processor" : ".*Athlon LE-16" > /dev/null ; then
+       cpu="k8"
+# AMD Phenom
+   elif expr "$processor" : ".*AMD Phenom(tm)" > /dev/null ; then
+       cpu="barcelona"
+# AMD Opteron
+   elif expr "$processor" : ".*AMD Opteron(tm)" >/dev/null ; then
+       cpu="k8"
+# Athlon MP
+   elif expr "$processor" : ".*AMD Athlon(tm) MP.*" > /dev/null ; then
+       cpu="athlon-mp"
+# Athlon XP
+   elif expr "$processor" : "athlon-xp" > /dev/null ; then
+       cpu="athlon-xp"
+   elif expr "$processor" : ".*AMD Athlon(tm) XP" > /dev/null ; then
+       cpu="athlon-xp"
+   elif expr "$processor" : ".*AMD Sempron(tm)" > /dev/null ; then
+       cpu="athlon-xp"
+# Athlon
+   elif expr "$processor" : "athlon" > /dev/null ; then
+       cpu="athlon"
+   elif expr "$processor" : ".*AMD Athlon(..)" > /dev/null ; then
+       cpu="athlon"
+   elif expr "$processor" : ".*AMD Duron(..)" > /dev/null ; then
+       cpu="athlon"
+       enable small
+# K6
+   elif expr "$processor" : ".*AMD-K6(tm) 3D" > /dev/null ; then
+       cpu="k6"
+       enable small
+# Transmeta Crusoe
+   elif expr "$processor" : ".*Crusoe(m) Processor TM5600" > /dev/null ; then
+       cpu="pentium2"
+# c3-2
+   elif expr "$processor" : ".*VIA Esther" > /dev/null ; then
+       cpu="c3-2"
+       enable small
+   elif expr "$processor" : ".*VIA Nehemiah" > /dev/null ; then
+       cpu="c3-2"
+       enable small
+# c3
+   elif expr "$processor" : ".*VIA.*Ezra" > /dev/null ; then
+       cpu="c3"
+       enable small
+   elif expr "$processor" : ".*VIA Samuel" > /dev/null ; then
+       cpu="c3"
+       enable small
+# if no known processor info, tune base on arch_raw info
+   elif test x"$arch_raw" = x"i686" -a x"$mmx" = x"yes" ; then
+       cpu="pentium2"
+       proc_error_msg="yes"
+   elif test x"$arch_raw" = x"i686" -a x"$mmx" = x"no" ; then
+       cpu="pentiumpro"
+       proc_error_msg="yes"
+   elif test x"$arch_raw" = x"i586" -a x"$mmx" = x"yes" ; then
+       cpu="pentium-mmx"
+       proc_error_msg="yes"
+   elif test x"$arch_raw" = x"i586" -a x"$mmx" = x"no" ; then
+       cpu="i586"
+       proc_error_msg="yes"
+   elif test x"$arch_raw" = x"i486"; then
+       cpu="i486"
+       proc_error_msg="yes"
+   elif test x"$arch_raw" = x"i386"; then
+       cpu="i386"
+       proc_error_msg="yes"
+   else
+       proc_error_msg="yes"
+   fi
+fi
+
+if enabled proc_error_msg; then
+    UNAME_M_INFO=` uname -m 2> /dev/null`
+    UNAME_P_INFO=` uname -p 2> /dev/null`
+    PROC_INFO=`cat /proc/cpuinfo | grep "model name" | head -n 1 | sed s/"\t"//g 2>/dev/null`
+    PROC_FLAG=`cat /proc/cpuinfo | grep "flags" | head -n 1 | sed s/"\t"//g 2>/dev/null`
+    echo ""
+    echo " *** WARNING *** "
+    echo " Your CPU was not detected properly:"
+    echo "   uname -m: $UNAME_M_INFO"
+    echo "   uname -p: $UNAME_P_INFO"
+    echo " $PROC_INFO"
+    echo "      $PROC_FLAG"
+    echo ""
+    echo " If you are using a recent checkout from "
+    echo "   http://svn.mythtv.org/svn/trunk/mythtv "
+    echo " please e-mail the above to mythtv-users@mythtv.org"
+    echo " With the subject \"configure did not detect my cpu\""
+    echo ""
+fi
+
+# compute mmx state
+if enabled x86 && ! disabled mmx ; then
+    if enabled x86_64; then
+        enable mmx
+    elif test $cpu != "generic"; then
+        is_x86_mmx "$cpu" && enable mmx
+    elif expr "$processor_flags" : ".*mmx" > /dev/null ; then
+            enable mmx
+    else
+        is_x86_mmx "$arch_raw" && enable mmx
+    fi
+fi
+
+# compute cmov state
+if test $cpu = "generic"; then
+    if expr "$processor_flags" : ".*cmov" > /dev/null ; then
+        enable cmov
+    else
+        disable cmov
+    fi
+fi
+
+test -z "$need_memalign" && need_memalign="$mmx"
+
+#Darwin CC versions
+if test $target_os = darwin; then
+    if enabled xlc; then
+        add_cflags -qpdf2 -qlanglvl=extc99 -qmaxmem=-1 -qarch=auto -qtune=auto
+    else
+        add_cflags -pipe
+        check_cflags -force_cpusubtype_ALL
+        check_cflags -Wno-sign-compare
+        enabled shared || check_cflags -mdynamic-no-pic
+    fi
+    # Apple GCC doesn't support march=core2 yet:
+    if test $cpu == "core2"; then
+        cpu="nocona"
+    fi
+    # Core Duo might be identified as march=pentium3, which errors:
+    # ...MachineExceptions.h:... error: '__m128i' does not name a type
+    # ...MachineExceptions.h:... error: '__m128i' does not name a type
+    if test $cpu == "pentium3"; then
+        cpu=prescott
+    fi
+fi
+
+check_optflags -fomit-frame-pointer
+
+# Add processor-specific flags
+if test $cpu != "generic"; then
+    case $cpu in
+        native)
+            check_archflags "-march=$cpu"
+        ;;
+        # targets that do NOT support conditional mov (cmov)
+        i[345]86|pentium|pentium-mmx|k6|k6-[23]|winchip-c6|winchip2|c3)
+            check_archflags "-march=$cpu"
+            disable cmov
+        ;;
+        # targets that do support conditional mov (cmov)
+        i686|pentiumpro|pentium[23]|pentium-m|athlon|athlon-tbird|athlon-4|athlon-[mx]p|athlon64*|k8*|opteron*|barcelona|athlon-fx|core2|c3-2)
+            check_archflags "-march=$cpu"
+            enable cmov
+            enable fast_cmov
+        ;;
+        # targets that do support conditional mov but on which it's slow
+        pentium4|prescott|nocona)
+            check_archflags "-march=$cpu"
+            enable cmov
+            disable fast_cmov
+        ;;
+        arm11*|cortex*)
+            check_archflags -mcpu=$cpu
+            enable fast_unaligned
+        ;;
+        armv[67]*)
+            check_archflags "-march=$cpu"
+            enable fast_unaligned
+        ;;
+        armv*)
+            check_archflags "-march=$cpu"
+        ;;
+        arm*)
+            check_archflags -mcpu=$cpu
+        ;;
+
+    esac
+fi
+
+# set generic archflags
+if test -z $ARCHFLAGS; then
+    if enabled x86_32; then
+        if ! enabled cmov; then
+            check_archflags -march=i586
+        else
+            check_archflags -march=pentiumpro
+        fi
+    elif enabled x86_64; then
+        check_archflags -march=k8
+    fi
+fi
+
+# Add processor-specific flags
+if test $tune != "generic"; then
+    warn_altivec(){
+        $1 altivec && echo "WARNING: Tuning for $2 but AltiVec $1.";
+    }
+    case $tune in
+        601|ppc601|PowerPC601)
+            check_mtune_mcpu "601"
+            warn_altivec enabled PPC601
+        ;;
+        603*|ppc603*|PowerPC603*)
+            check_mtune_mcpu "603"
+            warn_altivec enabled PPC603
+        ;;
+        604*|ppc604*|PowerPC604*)
+            check_mtune_mcpu "604"
+            warn_altivec enabled PPC604
+        ;;
+        G3|g3|75*|ppc75*|PowerPC75*)
+            check_mtune_mcpu "750" "-mpowerpc-gfxopt"
+            warn_altivec enabled PPC75x
+        ;;
+        G4|g4|745*|ppc745*|PowerPC745*)
+            check_mtune_mcpu "7450" "-mpowerpc-gfxopt"
+            warn_altivec disabled PPC745x
+        ;;
+        74*|ppc74*|PowerPC74*)
+            check_mtune_mcpu "7400" "-mpowerpc-gfxopt"
+            warn_altivec disabled PPC74xx
+        ;;
+        G5|g5|970|ppc970|PowerPC970|power4*|Power4*)
+            check_mtune_mcpu "970" "-mpowerpc-gfxopt -mpowerpc64"
+            warn_altivec disabled PPC970
+        ;;
+        Cell|CELL|cell)
+            check_mtune_mcpu "cell"
+            warn_altivec disabled Cell
+            enable ldbrx
+        ;;
+        # targets that do NOT support conditional mov (cmov)
+        i[345]86|pentium|pentium-mmx|k6|k6-[23]|winchip-c6|winchip2|c3)
+            check_mtune_mcpu "$tune"
+            disable cmov
+        ;;
+        # targets that do support conditional mov (cmov)
+        i686|pentiumpro|pentium[23]|pentium-m|athlon|athlon-tbird|athlon-4|athlon-[mx]p|athlon64*|k8*|opteron*|barcelona|athlon-fx|core2|c3-2)
+            check_mtune_mcpu "$tune"
+            enabled cmov && enable fast_cmov
+        ;;
+        # targets that do support conditional mov but on which it's slow
+        pentium4|prescott|nocona)
+            check_mtune_mcpu "$tune"
+            disable fast_cmov
+        ;;
+        sparc64)
+            check_mtune_mcpu "v9"
+        ;;
+        arm11*|cortex*)
+            check_mtune_mcpu "$tune"
+            enable fast_unaligned
+        ;;
+        armv[67]*)
+            check_mtune_mcpu "$tune"
+            enable fast_unaligned
+        ;;
+        armv*)
+            check_mtune_mcpu "$tune"
+        ;;
+        arm*)
+            check_mtune_mcpu "$tune"
+        ;;
+        ev4|ev45|ev5|ev56|pca56|ev6|ev67)
+            enabled ccc && add_cflags -arch "$tune" || check_mtune_mcpu "$tune"
+        ;;
+        bf*)
+            check_mtune_mcpu "$tune"
+        ;;
+        mips*|[45]k*|[237]4k*|m4k|r*000|loongson2[ef])
+            check_mtune_mcpu "$tune"
+        ;;
+        *)
+            echo "WARNING: Unknown CPU \"$cpu\", ignored."
+        ;;
+    esac
+fi
+
+<<BLOCK_QUOTE
+gnu_make(){
+    $1 --version 2>&1 | grep -q GNU
+}
+
+if ! gnu_make $make; then
+    gnu_make gmake && make=gmake || die "GNU make not found."
+fi
+BLOCK_QUOTE
+
+is_qmake4(){
+    $1 --version 2>&1 | grep -q "Qt version 4"
+}
+
+if ! is_qmake4 $qmake; then
+    is_qmake4 qmake-qt4 && qmake=qmake-qt4 || die "qmake for Qt4 not found. Please specify the correct qmake with --qmake="
+fi
+
+if ! expr $($qmake -query QT_VERSION) : "4\.[4-9]\.[0-9]" >/dev/null; then 
+    die "Qt4.4 or newer is required to build MythTV." 
+fi 
+    
+check_cc <<EOF || die "Symbol mangling check failed."
+int ff_extern;
+EOF
+sym=$($nm -P -g $TMPO | grep ff_extern)
+extern_prefix=${sym%%ff_extern*}
+
+check_cc <<EOF && enable inline_asm
+void foo(void) { __asm__ volatile ("" ::); }
+EOF
+
+if enabled x86; then
+    # check whether EBP is available on x86
+    # As 'i' is stored on the stack, this program will crash
+    # if the base pointer is used to access it because the
+    # base pointer is cleared in the inline assembly code.
+    check_exec_crash <<EOF && enable ebp_available
+    volatile int i=0;
+    __asm__ volatile (
+        "xorl %%ebp, %%ebp"
+    ::: "%ebp");
+    return i;
+EOF
+
+    # check wether EBX is available on x86
+    check_asm ebx_available '"":::"%ebx"'
+
+    # check whether more than 10 operands are supported
+    check_cc <<EOF && enable ten_operands
+int main(void) {
+    int x=0;
+    __asm__ volatile(
+        ""
+        :"+&rm"(x), "+&rm"(x), "+&rm"(x), "+&rm"(x), "+&rm"(x), "+&rm"(x)
+    );
+    return 0;
+}
+EOF
+
+    # check whether binutils is new enough to compile SSSE3/MMX2
+    enabled ssse3 && check_asm ssse3 '"pabsw %xmm0, %xmm0"'
+    enabled mmx2  && check_asm mmx2  '"pmaxub %mm0, %mm1"'
+
+    check_asm bswap '"bswap %%eax" ::: "%eax"'
+
+    YASMFLAGS="-f $objformat -DARCH_$(toupper $subarch)"
+    enabled     x86_64        && append YASMFLAGS "-m amd64"
+    enabled_all x86_64 shared && append YASMFLAGS "-DPIC"
+    case "$objformat" in
+        elf) enabled debug && append YASMFLAGS "-g dwarf2" ;;
+        macho64)              append YASMFLAGS "-DPIC -DPREFIX" ;;
+        *)                    append YASMFLAGS "-DPREFIX"  ;;
+    esac
+    disabled yasm || { check_yasm "pabsw xmm0, xmm0" && enable yasm; }
+fi
+
+# check for assembler specific support
+
+enabled mips && check_asm loongson '"dmult.g $1, $2, $3"'
+
+enabled ppc && check_asm dcbzl '"dcbzl 0, 1"'
+enabled ppc && check_asm ppc4xx '"maclhw r10, r11, r12"'
+enabled ppc && check_asm xform_asm '"lwzx 0, %y0" :: "Z"(*(int*)0)'
+
+# check for SIMD availability
+
+# AltiVec flags: The FSF version of GCC differs from the Apple version
+if enabled altivec; then
+    check_cflags -maltivec -mabi=altivec &&
+        { check_header altivec.h && inc_altivec_h="#include <altivec.h>" ; } ||
+        check_cflags -faltivec
+    check_cxxflags -maltivec -mabi=altivec &&
+        { check_header altivec.h && inc_altivec_h="#include <altivec.h>" ; } ||
+        check_cxxflags -faltivec
+
+    # check if our compiler supports Motorola AltiVec C API
+    check_cc <<EOF || disable altivec
+$inc_altivec_h
+int main(void) {
+    vector signed int v1, v2, v3;
+    v1 = vec_add(v2,v3);
+    return 0;
+}
+EOF
+
+    # check if our compiler supports braces for vector declarations
+    check_cc <<EOF || die "You need a compiler that supports {} in AltiVec vector declarations."
+$inc_altivec_h
+int main (void) { (vector int) {1}; return 0; }
+EOF
+fi
+
+# We have to check if pld is a nop and disable it.
+enabled arm     && check_asm pld     '"pld [r0]"'
+enabled armv5te && check_asm armv5te '"qadd r0, r0, r0"'
+enabled armv6   && check_asm armv6   '"sadd16 r0, r0, r0"'
+enabled armv6t2 && check_asm armv6t2 '"movt r0, #0"'
+enabled armvfp  && check_asm armvfp  '"fadds s0, s0, s0"'
+enabled iwmmxt  && check_asm iwmmxt  '"wunpckelub wr6, wr4"'
+enabled mmi     && check_asm mmi     '"lq $2, 0($2)"'
+enabled neon    && check_asm neon    '"vadd.i16 q0, q0, q0"'
+enabled vis     && check_asm vis     '"pdist %f0, %f0, %f0"' -mcpu=ultrasparc
+
+enabled vis && add_cflags "-mcpu=ultrasparc -mtune=ultrasparc"
+
+enabled vis && check_mtune_mcpu "ultrasparc"
+
+
+# if architecture specific flags don't work blank them
+if test -n "$ARCHFLAGS"; then
+    TMP_ARCHFLAGS="$ARCHFLAGS"
+    check_cc $ARCHFLAGS <<EOF || ARCHFLAGS=""
+int main( void ) { return 0; }
+EOF
+    if test -z "$ARCHFLAGS"; then
+        if enabled cpu_override || enabled proc_opt || test x"$tune" != x"generic"; then
+            echo "ERROR: CPU specific ./configure options failed compile test"
+            echo "       Removing CPU specific compilation options. ($TMP_ARCHFLAGS)"
+            echo ""
+        fi
+    fi
+fi
+
+# "CPU_CLIP" test for SRC / libsamplerate
+# test positive wrap
+check_exec << EOF && enable cpuclipspositive
+int main(){
+    float f = (1<<(sizeof(short)*8))>>1;
+    short s = (short)f;
+    if ( s == --f )
+        return(0);
+    return(1);
+}
+EOF
+
+# test negative wrap
+check_exec << EOF && enable cpuclipsnegative
+int main(){
+    float f = -((1<<(sizeof(short)*8))>>1) - 1;
+    short s = (short)f;
+    if ( s == ++f)
+        return(0);
+    return(1);
+}
+EOF
+
+# test for distcc
+enabled distcc && check_cmd distcc --version || disable distcc
+if enabled distcc; then
+    XYZ=`which $cc`
+    if test x"$XYZ" != x"" -a x"`ls -l $XYZ | grep distcc`" != x""; then
+        distcc="symlink"
+        distcc_txt=" $cc"
+    fi
+fi
+
+# test for ccache
+enabled ccache && check_cmd ccache -V || disable ccache
+if enabled ccache; then
+    XYZ=`which $cc`
+    if test x"$XYZ" != x"" -a x"`ls -l $XYZ | grep ccache`" != x""; then
+        ccache="symlink"
+        ccache_txt=" $cc"
+    fi
+fi
+
+# ccache should be used before distcc for better cache coherency
+if enabled distcc; then
+    if disabled ccache; then
+        cc="distcc $cc"
+        cxx="distcc $cxx"
+    elif enabled ccache; then
+        cc="ccache distcc $cc"
+        cxx="ccache distcc $cxx"
+    else
+        disable distcc
+        distcc_txt="t using distcc explicitly, since ccache symlink is present"
+    fi
+else
+    if enabled ccache; then
+        cc="ccache $cc"
+        cxx="ccache $cxx"
+    fi
+fi
+
+# ---
+# big/little-endian test
+check_cc <<EOF || die "endian test failed"
+unsigned int endian = 'B' << 24 | 'I' << 16 | 'G' << 8 | 'E';
+EOF
+od -A n -t x1 $TMPO | grep -q '42 *49 *47 *45' && enable bigendian
+
+# ---
+# check availability of some header files
+
+if check_func dlopen; then
+    ldl=
+elif check_func dlopen -ldl; then
+    ldl=-ldl
+fi
+
+# Solaris has nanosleep in -lrt, OpenSolaris no longer needs that
+check_func nanosleep || { check_func nanosleep -lrt && add_extralibs -lrt; }
+
+check_func  fork
+check_func  gethrtime
+check_func  getrusage
+check_func  inet_aton $network_extralibs
+check_func  memalign
+check_func  mkstemp
+check_func  posix_memalign
+check_func_headers io.h setmode
+check_func_headers lzo/lzo1x.h lzo1x_999_compress
+check_func_headers windows.h GetProcessTimes
+check_func_headers windows.h VirtualAlloc
+
+check_header conio.h
+check_header dlfcn.h
+check_header malloc.h
+check_header poll.h
+check_header sys/mman.h
+check_header sys/resource.h
+check_header sys/select.h
+check_header termios.h
+check_header vdpau/vdpau.h
+check_header vdpau/vdpau_x11.h
+check_header X11/extensions/XvMClib.h
+
+check_func posix_fadvise
+check_func_headers sys/timeb.h ftime
+check_func_headers sys/time.h gettimeofday
+check_func_headers "sys/types.h sys/socket.h ifaddrs.h" getifaddrs
+
+if ! enabled_any memalign memalign_hack && enabled need_memalign ; then
+    die "Error, no memalign() but SSE enabled, disable it or use --enable-memalign-hack."
+fi
+
+disabled  zlib || check_lib   zlib.h      zlibVersion -lz   || disable  zlib
+disabled bzlib || check_lib2 bzlib.h BZ2_bzlibVersion -lbz2 || disable bzlib
+
+enabled ffmpeg_pthreads && enable pthreads
+
+# check for some common methods of building with pthread support
+# do this before the optional library checks as some of them require pthreads
+if enabled pthreads; then
+    if check_func pthread_create; then
+        :
+    elif check_func pthread_create -pthread; then
+        add_cflags -pthread
+        add_extralibs -pthread
+    elif check_func pthread_create -pthreads; then
+        add_cflags -pthreads
+        add_extralibs -pthreads
+    elif check_func pthread_create -lpthreadGC2; then
+        add_extralibs -lpthreadGC2
+    elif ! check_lib pthread.h pthread_create -lpthread; then
+        disable ffmpeg_pthreads pthreads
+    fi
+fi
+
+for thread in $THREADS_LIST; do
+    if enabled $thread; then
+        test -n "$thread_type" &&
+            die "ERROR: Only one thread type must be selected." ||
+            thread_type="$thread"
+    fi
+done
+
+check_lib math.h sin -lm
+check_lib va/va.h vaInitialize -lva
+
+# test for C99 functions in math.h
+for func in llrint lrint lrintf round roundf truncf; do
+    check_exec <<EOF && enable $func || disable $func
+#include <math.h>
+int main(void) { return ($func(3.999f) > 0)?0:1; }
+EOF
+done
+
+# these are off by default, so fail if requested and not available
+enabled avisynth   && require2 vfw32 "windows.h vfw.h" AVIFileInit -lvfw32
+enabled libamr_nb  && require  libamrnb amrnb/interf_dec.h Decoder_Interface_init -lamrnb -lm
+enabled libamr_wb  && require  libamrwb amrwb/dec_if.h D_IF_init -lamrwb -lm
+enabled libdirac   && add_cflags $(pkg-config --cflags dirac) &&
+                      require  libdirac libdirac_decoder/dirac_parser.h dirac_decoder_init -ldirac_decoder &&
+                      require  libdirac libdirac_encoder/dirac_encoder.h dirac_encoder_init -ldirac_encoder
+enabled libfaac    && require2 libfaac "stdint.h faac.h" faacEncGetVersion -lfaac
+enabled libfaad    && require2 libfaad faad.h faacDecOpen -lfaad
+enabled libgsm     && require  libgsm gsm.h gsm_create -lgsm
+enabled libmp3lame && require  libmp3lame lame/lame.h lame_init -lmp3lame -lm
+enabled libnut     && require  libnut libnut.h nut_demuxer_init -lnut
+enabled libopencore_amrnb  && require libopencore_amrnb opencore-amrnb/interf_dec.h Decoder_Interface_init -lopencore-amrnb -lm
+enabled libopencore_amrwb  && require libopencore_amrwb opencore-amrwb/dec_if.h D_IF_init -lopencore-amrwb -lm
+enabled libopenjpeg && require libopenjpeg openjpeg.h opj_version -lopenjpeg
+enabled libschroedinger && add_cflags $(pkg-config --cflags schroedinger-1.0) &&
+                           require libschroedinger schroedinger/schro.h schro_init $(pkg-config --libs schroedinger-1.0)
+enabled libspeex   && require  libspeex speex/speex.h speex_decoder_init -lspeex
+enabled libtheora  && require  libtheora theora/theora.h theora_info_init -ltheora -logg
+enabled libvorbis  && require  libvorbis vorbis/vorbisenc.h vorbis_info_init -lvorbisenc -lvorbis -logg
+enabled libx264    && require  libx264 x264.h x264_encoder_open -lx264 -lm &&
+                      { check_cpp_condition x264.h "X264_BUILD >= 65" ||
+                        die "ERROR: libx264 version must be >= 0.65."; }
+enabled libxvid    && require  libxvid xvid.h xvid_global -lxvidcore
+enabled mlib       && require  mediaLib mlib_types.h mlib_VectorSub_S16_U8_Mod -lmlib
+
+# libdc1394 check
+if enabled libdc1394; then
+    { check_lib dc1394/dc1394.h dc1394_new -ldc1394 -lraw1394 &&
+        enable libdc1394_2; } ||
+    { check_lib libdc1394/dc1394_control.h dc1394_create_handle -ldc1394_control -lraw1394 &&
+        enable libdc1394_1; } ||
+    die "ERROR: No version of libdc1394 found "
+fi
+
+check_header stdint.h
+
+# test for lrint in math.h
+check_exec <<EOF && lrint=yes || lrint=no
+#define _ISOC9X_SOURCE  1
+#include <math.h>
+int main( void ) { return (lrint(3.999f) > 0)?0:1; }
+EOF
+
+#test for round()
+check_exec <<EOF && round=yes || round=no
+#define _ISOC9X_SOURCE  1
+#include <math.h>
+int main( void ) { return (round(3.999f) > 0)?0:1; }
+EOF
+
+# test for sync_file_range (linux only system call since 2.6.17)
+check_ld <<EOF #&& enable sync_file_range
+#define _GNU_SOURCE
+#include <fcntl.h>
+
+int main(int argc, char **argv){
+    sync_file_range(0,0,0,0);
+    return 0;
+}
+EOF
+
+# test for sizeof(int)
+for sizeof in 1 2 4 8 16; do
+    check_cc <<EOF && _sizeof_int=$sizeof && break
+void foo(){switch (0) case 0: case (sizeof(int) == $sizeof):;}
+EOF
+done
+
+# test for sizeof(long)
+for sizeof in 1 2 4 8 16; do
+  check_cc <<EOF && _sizeof_long=$sizeof && break
+void foo(){switch (0) case 0: case (sizeof(long) == $sizeof):;}
+EOF
+done
+
+if test x"$_restrict" = x""; then
+_restrict=
+for restrict_keyword in restrict __restrict__ __restrict; do
+    check_cc <<EOF && _restrict=$restrict_keyword && break
+void foo(char * $restrict_keyword p);
+EOF
+done
+fi
+
+# Work around weird g++ build error with <stdint.h> in some myth src:
+if test $target_os = darwin; then
+    _restrict=__restrict__
+fi
+
+check_foo_config freetype2 freetype ft2build.h FT_Init_FreeType
+
+##########################################
+# fribidi check
+
+disable fribidi
+FRIBIDI_CONFIG="pkg-config fribidi"
+if test x`which pkg-config 2>/dev/null` != x"" ; then
+   if `pkg-config --atleast-version 0.19 fribidi` ; then
+       check_cc `${FRIBIDI_CONFIG} --cflags` `${FRIBIDI_CONFIG} --libs` << EOF && enable fribidi
+#include <stdio.h>
+#include <fribidi/fribidi.h>
+int main()
+{
+    if (fribidi_parse_charset("UTF-8") != FRIBIDI_CHAR_SET_UTF8)
+    {
+        printf("Fribidi headers are not consistents with the library!\n");
+        return 1;
+    }
+    return 0;
+}
+EOF
+    else
+        disable fribidi
+    fi
+fi
+##########################################
+# SDL check
+
+disable sdl_too_old
+disable sdl
+SDL_CONFIG="${cross_prefix}sdl-config"
+if "${SDL_CONFIG}" --version > /dev/null 2>&1; then
+    sdl_cflags=$("${SDL_CONFIG}" --cflags)
+    temp_cflags $sdl_cflags
+    temp_extralibs $("${SDL_CONFIG}" --libs)
+    if check_lib2 SDL.h SDL_Init; then
+        _sdlversion=$("${SDL_CONFIG}" --version | sed 's/[^0-9]//g')
+        if test "$_sdlversion" -lt 121 ; then
+            enable sdl_too_old
+        else
+            enable sdl
+            check_cc $sdl_cflags <<EOF && enable sdl_video_size
+#include <SDL.h>
+int main(int argc, char **argv){
+    const SDL_VideoInfo *vi = SDL_GetVideoInfo();
+    int w = vi->current_w;
+    return 0;
+}
+EOF
+        fi
+    fi
+    restore_flags
+fi
+
+texi2html -version > /dev/null 2>&1 && enable texi2html || disable texi2html
+
+##########################################
+# Network check
+
+if enabled network; then
+    check_type "sys/types.h sys/socket.h" socklen_t
+    # Prefer arpa/inet.h over winsock2
+    if check_header arpa/inet.h ; then
+        check_func closesocket
+    elif check_header winsock2.h ; then
+        network_extralibs="-lws2_32"
+        check_type ws2tcpip.h socklen_t
+        check_func_headers winsock2.h closesocket
+    else
+        disable network
+    fi
+fi
+
+##########################################
+# IPv6 check
+
+enabled network && enabled ipv6 && check_ld <<EOF && enable ipv6 || disable ipv6
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <netdb.h>
+int main(void) {
+    struct sockaddr_storage saddr;
+    struct ipv6_mreq mreq6;
+    getaddrinfo(0,0,0,0);
+    getnameinfo(0,0,0,0,0,0,0);
+    IN6_IS_ADDR_MULTICAST((const struct in6_addr *)0);
+}
+EOF
+
+check_header linux/videodev.h
+check_header linux/videodev2.h
+check_header sys/videoio.h
+
+check_func_headers "windows.h vfw.h" capCreateCaptureWindow -lvfw32
+
+# check for ioctl_meteor.h, ioctl_bt848.h and alternatives
+{ check_header dev/bktr/ioctl_meteor.h &&
+  check_header dev/bktr/ioctl_bt848.h; } ||
+{ check_header machine/ioctl_meteor.h &&
+  check_header machine/ioctl_bt848.h; } ||
+{ check_header dev/video/meteor/ioctl_meteor.h &&
+  check_header dev/video/bktr/ioctl_bt848.h; } ||
+check_header dev/ic/bt8xx.h
+
+check_header sys/soundcard.h
+check_header soundcard.h
+
+enabled alsa_demuxer || enabled alsa_muxer && check_lib2 alsa/asoundlib.h snd_pcm_htimestamp -lasound
+
+enabled jack_demuxer && check_lib2 jack/jack.h jack_client_open -ljack
+
+# PulseAudio probe
+! disabled audio_pulse &&
+    check_lib pulse/version.h pa_get_library_version $audio_pulse_libs &&
+    $(pkg-config --atleast-version=0.9.7 libpulse) &&
+    enable  audio_pulse ||
+    disable audio_pulse
+
+# ALSA probe
+! disabled audio_alsa &&
+    check_lib alsa/asoundlib.h snd_asoundlib_version $audio_alsa_libs &&
+    enable  audio_alsa ||
+    disable audio_alsa
+
+# aRts probe
+! disabled audio_arts &&
+    check_foo_config arts artsc artsc.h arts_init &&
+    audio_arts_libs=`artsc-config --libs`  &&
+    audio_arts_cflags=`artsc-config --cflags` &&
+    enable  audio_arts ||
+    disable audio_arts
+
+# JACK probe
+! disabled audio_jack &&
+    check_lib jack/jack.h jack_client_new $audio_jack_libs &&
+    enable  audio_jack ||
+    disable audio_jack
+
+# deal with the x11 frame grabber
+enabled x11grab                         &&
+check_header X11/Xlib.h                 &&
+check_header X11/extensions/XShm.h      &&
+check_func XOpenDisplay -lX11           &&
+check_func XShmCreateImage -lX11 -lXext
+
+enabled debug && add_cflags -g"$debuglevel"
+enabled debug && add_cxxflags -g"$debuglevel"
+
+# add some useful compiler flags if supported
+#check_cflags -Wdeclaration-after-statement
+check_cflags -Wall
+check_cflags -Wno-switch
+check_cflags -Wdisabled-optimization
+check_cflags -Wpointer-arith
+check_cflags -Wredundant-decls
+check_cflags -Wno-pointer-sign
+check_cflags -Wcast-qual
+check_cflags -Wwrite-strings
+check_cflags -Wtype-limits
+check_cflags -Wundef
+enabled extra_warnings && check_cflags -Winline
+# C++ Flags
+check_cxxflags -Wall
+check_cxxflags -Wno-switch
+check_cxxflags -Wpointer-arith
+check_cxxflags -Wredundant-decls
+check_cxxflags -Wno-non-virtual-dtor
+check_cxxflags -funit-at-a-time
+#needed for INT64_C in libs/libavformat under g++
+check_cxxflags -D__STDC_CONSTANT_MACROS
+
+# add some linker flags
+check_ldflags -Wl,--warn-common
+check_ldflags -Wl,--as-needed
+check_ldflags '-Wl,-rpath-link,\$(BUILD_ROOT)/libpostproc -Wl,-rpath-link,\$(BUILD_ROOT)/libswscale -Wl,-rpath-link,\$(BUILD_ROOT)/libavfilter -Wl,-rpath-link,\$(BUILD_ROOT)/libavdevice -Wl,-rpath-link,\$(BUILD_ROOT)/libavformat -Wl,-rpath-link,\$(BUILD_ROOT)/libavcodec -Wl,-rpath-link,\$(BUILD_ROOT)/libavutil'
+check_ldflags -Wl,-Bsymbolic
+
+# GCC version
+gcc_version=$($cc -dumpversion)
+GCC_MAJOR=$(echo ${gcc_version} | cut -s -d'.' -f1)
+GCC_MINOR=$(echo ${gcc_version} | cut -s -d'.' -f2)
+
+if enabled symbol_visibility; then
+    if test x"$GCC_MAJOR" = x"4" ; then
+        check_cxxflags -fvisibility-inlines-hidden
+        append CCONFIG "use_hidesyms"
+    else
+        echo "Warning: --enable-symbol-visibility requires gcc 4.x"
+    fi
+fi
+
+if enabled dvb; then
+    if test -f "$dvb_path"/linux/dvb/frontend.h ; then
+        if test -f "$dvb_path"/../MAINTAINERS ; then
+            echo "Warning: DVB location in kernel. May not compile."
+        fi
+    else
+        KERNEL_RELEASE=`uname -r 2>/dev/null`
+        if test x"$KERNEL_RELEASE" != x"" ; then
+            dvb_path="${sysroot}/usr/src/linux-$KERNEL_RELEASE/include"
+        else
+            dvb_path="${sysroot}/usr/src/linux/include"
+        fi
+
+        if test -f "$dvb_path"/linux/dvb/frontend.h ; then
+            if test -f "$dvb_path"/../MAINTAINERS ; then
+                echo "Warning: DVB location in kernel. May not compile."
+            fi
+        else
+            echo "DVB location needs to have linux/dvb/frontend.h [$dvb_path]"
+            disable dvb
+        fi
+    fi
+fi
+
+
+enabled dvb && check_cc -I"$dvb_path" <<EOF && enable fe_can_2g_modulation
+#include <linux/dvb/frontend.h>
+int main(void) {
+    if (FE_CAN_2G_MODULATION != 0x10000000)
+        return 1;
+    return 0;
+}
+EOF
+
+# Check that all MythTV build "requirements" are met:
+
+enabled freetype2 ||
+    die "ERROR! You must have FreeType installed to compile MythTV."
+
+enabled lamemp3 && check_lib2 lame/lame.h lame_init -lmp3lame -lm ||
+    die "ERROR! You must have the Lame MP3 encoding library installed to compile MythTV."
+
+if $(pkg-config --atleast-version 4.4.0 QtWebKit) ; then
+    enable qtwebkit
+else
+    # For environments that don't have pkg-config, we do a compile test.
+    # Sadly, this requires some guesses about Qt's install location:
+    qt_inc="-I/usr/local/include/Qt -I/usr/include/Qt -I${prefix}/include/Qt -I${QTDIR}/include"
+
+    check_cxx ${qt_inc} <<EOF && enable qtwebkit
+#include <QtWebKit/QtWebKit>
+#if QT_VERSION < 0x040400
+die
+#endif
+EOF
+fi
+
+enabled qtwebkit || echo "Warning! QtWebkit headers not found, MythBrowser will not work."
+
+if enabled firewire; then
+    firewire="no"
+    libavc_5_3="no"
+    if has_library libiec61883 -a \
+       has_library libavc1394 -a \
+       has_library librom1394; then
+        if test x`which pkg-config 2>/dev/null` != x"" ; then
+            if `pkg-config --atleast-version 0.5.0 libavc1394` ; then
+                if `pkg-config --atleast-version 1.0.0 libiec61883` ; then
+                    firewire="yes"
+                    if `pkg-config --atleast-version 0.5.3 libavc1394` ; then
+                        libavc_5_3="yes"
+                    fi
+                fi
+            fi
+        fi
+    fi
+    if test $target_os = darwin; then
+        # This should pick the newest. e.g. FireWireSDK21 instead of 20
+        # Unfortunately, the location keeps changing:
+        #/Developer/FireWireSDK20/Examples/AVCVideoServices/Framework
+        #/Developer/FireWireSDK21/Examples/Framework
+        mac_avc=`find /Developer/FireWireSDK* -name Framework 2> /dev/null \
+                 | tail -n 1`
+        if test -d "$mac_avc" ; then
+            firewire="yes"
+        else
+            echo Firewire being disabled. /Developer/FireWireSDK* missing
+        fi
+    fi
+fi
+
+enabled libfftw3 && check_lib2 fftw3.h fftw_init_threads -lfftw3_threads -lfftw3 ||
+    disable libfftw3
+
+enabled x11 && check_lib X11/Xlib.h XQueryExtension -lX11 || disable x11
+enabled xrandr && check_lib X11/extensions/Xrandr.h XRRSelectInput -lXrandr || disable xrandr
+enabled xv && check_lib X11/extensions/Xv.h XvPutStill -lXv || disable xv
+
+if enabled x11; then
+    require libXxf86vm X11/extensions/xf86vmode.h XF86VidModeSetClientVersion -lXxf86vm
+    require libXinerama X11/extensions/Xinerama.h XineramaQueryExtension -lXinerama
+    require libXext X11/extensions/Xext.h XMissingExtension -lXext
+fi
+
+check_header GL/gl.h
+if ! enabled windows; then
+    has_library libGL || has_library libopengl32 || disable opengl
+fi
+
+VENDOR_XVMC_LIBS=""
+enabled xvmcw && check_lib X11/extensions/XvMClib.h XvMCQueryExtension -lXvMCW || disable xvmcw
+enabled xvmcw && check_lib X11/extensions/XvMClib.h XvMCQueryVersion -lXvMCW || disable xvmcw
+check_header X11/extensions/vldXvMC.h
+
+if test x"$xvmc_lib" != x""; then
+    VENDOR_XVMC_LIBS="-l"$xvmc_lib
+    disable xvmcw
+elif enabled xvmcw; then
+    VENDOR_XVMC_LIBS="-lXvMCW"
+elif enabled xvmc_pro; then
+    if has_library libviaXvMCPro ; then
+        VENDOR_XVMC_LIBS="-lviaXvMCPro"
+    elif has_library libchromeXvMCPro ; then
+        VENDOR_XVMC_LIBS="-lchromeXvMCPro"
+    else
+        disable xvmc_pro
+    fi
+elif enabled xvmc_vld; then
+    if has_library libviaXvMC ; then
+        VENDOR_XVMC_LIBS="-lviaXvMC"
+    elif has_library libchromeXvMC ; then
+        VENDOR_XVMC_LIBS="-lchromeXvMC"
+    else
+        disable xvmc_pro
+    fi
+elif has_library libXvMCNVIDIA ; then
+    VENDOR_XVMC_LIBS="-lXvMCNVIDIA"
+elif has_library libI810XvMC ; then
+    VENDOR_XVMC_LIBS="-lI810XvMC"
+else
+    disable xvmc xvmcw
+fi
+
+if test x"$VENDOR_XVMC_LIBS" = x"-lXvMCNVIDIA" ; then
+    disable xvmc_vld xvmc_pro
+fi
+
+if test x"$VENDOR_XVMC_LIBS" = x"" ; then
+    disable xvmc xvmcw xvmc_vld xvmc_pro
+fi
+
+enabled xvmc_pro && enable xvmc_vld
+
+# Can only do Mac accel on Mac platform
+enabled dvdv && test $target_os = darwin || disable dvdv
+
+# CoreVideo in only available on Mac OS 10.4, or on 10.3 with QuickTime 7.
+# This checks for it, and some other calls that the module needs
+if test $target_os = darwin; then
+    cat > $TMPC << EOF
+#include <QuartzCore/CVDisplayLink.h>
+#include <AGL/agl.h>
+int main( void ) { return aglGetCGLContext(0,0L); }
+EOF
+    if $cc -o $TMPE $TMPC -framework AGL > /dev/null 2>&1; then
+        mac_corevideo="yes"
+    fi
+fi
+
+# Ubuntu Dapper installs NVIDIA GL headers to a weird location in order
+# not to overwrite the headers installed from Mesa, etc. We need to
+# add that path to include paths if that's the case.
+if test -d ${sysroot}/usr/share/doc/nvidia-glx-dev/include; then
+    append CONFIG_INCLUDEPATH "${sysroot}/usr/share/doc/nvidia-glx-dev/include"
+fi
+
+# Same for Debian Sid.
+if test -d ${sysroot}/usr/share/nvidia/include/GL; then
+    append CONFIG_INCLUDEPATH "${sysroot}/usr/share/nvidia/include"
+fi
+
+check_foo_config directfb directfb directfb.h DirectFBInit
+
+if enabled directfb; then
+    CONFIG_DIRECTFB_LIBS=`directfb-config --libs`
+    CONFIG_DIRECTFB_CXXFLAGS=`directfb-config --cflags`
+fi
+
+if test $target_os = darwin; then
+    # So far, only OS X 10.4 has this as a non-private framework
+    if test -d /System/Library/Frameworks/DiskArbitration.framework/Headers ; then
+        darwin_da="yes"
+    fi
+fi
+
+if enabled small; then
+    check_cflags -Os            # not all compilers support -Os
+    optimizations="small"
+elif enabled optimizations; then
+    if enabled xlc; then
+        add_optflags  -O5
+        add_ldflags -O5
+    elif enabled ccc; then
+        add_cflags -fast
+    else
+        add_optflags -O3
+    fi
+fi
+check_cflags -fno-math-errno
+check_cflags -fno-signed-zeros
+
+# add some flags for Intel C Compiler
+if enabled icc; then
+    # Just warnings, no remarks
+    check_cflags -w1
+    # -wd: Disable following warnings
+    # 144, 167, 556: -Wno-pointer-sign
+    # 10006: ignoring unknown option -fno-signed-zeros
+    # 10156: ignoring option '-W'; no argument required
+    check_cflags -wd144,167,556,10006,10156
+    # 11030: Warning unknown option --as-needed
+    # 10156: ignoring option '-export'; no argument required
+    check_ldflags -wd10156,11030
+    # Allow to compile with optimizations
+    check_ldflags -march=$cpu
+    # icc 11.0 and 11.1 work with ebp_available, but don't pass the test
+    enable ebp_available
+elif enabled ccc; then
+    # disable some annoying warnings
+    add_cflags -msg_disable cvtu32to64
+    add_cflags -msg_disable embedcomment
+    add_cflags -msg_disable needconstext
+    add_cflags -msg_disable nomainieee
+    add_cflags -msg_disable ptrmismatch1
+    add_cflags -msg_disable unreachcode
+fi
+
+# PIC flags for shared library objects where they are needed
+if enabled shared; then
+    # LIBOBJFLAGS may have already been set in the OS configuration
+    if test -z "$LIBOBJFLAGS" ; then
+        case "${subarch-$arch}" in
+            x86_64|ia64|alpha|sparc*|power*|parisc*|mips*) LIBOBJFLAGS='$(PIC)' ;;
+        esac
+    fi
+fi
+
+if enabled gprof; then
+    add_cflags  -p
+    add_ldflags -p
+fi
+
+# Find out if the .align argument is a power of two or not.
+check_asm asmalign_pot '".align 3"'
+
+enabled_any $DECODER_LIST      && enable decoders
+enabled_any $ENCODER_LIST      && enable encoders
+enabled_any $HWACCEL_LIST      && enable hwaccels
+enabled_any $BSF_LIST          && enable bsfs
+enabled_any $DEMUXER_LIST      && enable demuxers
+enabled_any $MUXER_LIST        && enable muxers
+enabled_any $FILTER_LIST       && enable filters
+enabled_any $INDEV_LIST        && enable demuxers
+enabled_any $OUTDEV_LIST       && enable muxers
+enabled_any $PROTOCOL_LIST     && enable protocols
+
+enabled_any $THREADS_LIST      && enable threads
+
+check_deps $CONFIG_LIST       \
+           $CONFIG_EXTRA      \
+           $HAVE_LIST         \
+           $DECODER_LIST      \
+           $ENCODER_LIST      \
+           $HWACCEL_LIST      \
+           $PARSER_LIST       \
+           $BSF_LIST          \
+           $DEMUXER_LIST      \
+           $MUXER_LIST        \
+           $FILTER_LIST       \
+           $INDEV_LIST        \
+           $OUTDEV_LIST       \
+           $PROTOCOL_LIST     \
+           $MYTHTV_LIST       \
+           $MYTHTV_CONFIG_LIST \
+           $USING_LIST        \
+
+if enabled x86 && (disabled mmx && ! enabled disable_mmx_for_debugging); then
+    die "ERROR: MMX disabled on x86, MythTV will be very slow.\n\tDisable this check with --enable-disable-mmx-for-debugging"
+fi
+
+echo "# Basic Settings"
+echo "Compile type              $compile_type"
+echo "Compiler cache            $ccache$ccache_txt"
+echo "DistCC                    $distcc$distcc_txt"
+echo "qmake                     $(which $qmake)"
+echo "install prefix            $prefix"
+echo "runtime prefix            $runprefix"
+<<BLOCK_QUOTE
+echo "source path               $source_path"
+echo "C compiler                $cc"
+echo ".align is power-of-two    $asmalign_pot"
+echo "ARCH                      $arch ($cpu)"
+BLOCK_QUOTE
+if enabled cpu_override && test x"$cpu" != x"generic"; then
+    echo "CPU                       $arch $subarch ($cpu)"
+elif test x"$processor" != x"" ; then
+    echo "CPU                       $arch $subarch ($processor)"
+elif test x"$arch_raw" != x"" ; then
+    echo "CPU                       $arch $subarch ($arch_raw)"
+else
+    echo "CPU                       $arch $subarch"
+fi
+<<BLOCK_QUOTE
+if test "$build_suffix" != ""; then
+    echo "build suffix              $build_suffix"
+fi
+BLOCK_QUOTE
+if test "$extra_version" != ""; then
+    echo "version string suffix     $extra_version"
+fi
+echo "big-endian                ${bigendian-no}"
+echo "runtime cpu detection     ${runtime_cpudetect-no}"
+if enabled x86; then
+    echo "yasm                      ${yasm-no}"
+    echo "MMX enabled               ${mmx-no}"
+    echo "MMX2 enabled              ${mmx2-no}"
+    echo "3DNow! enabled            ${amd3dnow-no}"
+    echo "3DNow! extended enabled   ${amd3dnowext-no}"
+    echo "SSE enabled               ${sse-no}"
+    echo "SSSE3 enabled             ${ssse3-no}"
+    echo "CMOV enabled              ${cmov-no}"
+<<BLOCK_QUOTE
+    echo "CMOV is fast              ${fast_cmov-no}"
+    echo "EBX available             ${ebx_available-no}"
+    echo "EBP available             ${ebp_available-no}"
+    echo "10 operands supported     ${ten_operands-no}"
+BLOCK_QUOTE
+fi
+if enabled arm; then
+    echo "ARMv5TE enabled           ${armv5te-no}"
+    echo "ARMv6 enabled             ${armv6-no}"
+    echo "ARMv6T2 enabled           ${armv6t2-no}"
+    echo "ARM VFP enabled           ${armvfp-no}"
+    echo "IWMMXT enabled            ${iwmmxt-no}"
+    echo "NEON enabled              ${neon-no}"
+fi
+if enabled mips; then
+    echo "MMI enabled               ${mmi-no}"
+fi
+if enabled ppc; then
+    echo "AltiVec enabled           ${altivec-no}"
+    echo "PPC 4xx optimizations     ${ppc4xx-no}"
+    echo "dcbzl available           ${dcbzl-no}"
+    echo "performance report        ${powerpc_perf-no}"
+fi
+if enabled sparc; then
+    echo "VIS enabled               ${vis-no}"
+fi
+<<BLOCK_QUOTE
+echo "gprof enabled             ${gprof-no}"
+echo "debug symbols             ${debug-no}"
+echo "strip symbols             ${stripping-no}"
+echo "optimizations             ${optimizations-no}"
+echo "static                    ${static-no}"
+echo "shared                    ${shared-no}"
+echo "postprocessing support    ${postproc-no}"
+echo "new filter support        ${avfilter-no}"
+echo "filters using lavformat   ${avfilter_lavf-no}"
+echo "network support           ${network-no}"
+if enabled network; then
+    echo "IPv6 support              ${ipv6-no}"
+fi
+echo "threading support         ${thread_type-no}"
+echo "SDL support               ${sdl-no}"
+if enabled sdl_too_old; then
+    echo "-> Your SDL version is too old - please upgrade to have FFplay/SDL support."
+fi
+echo "Sun medialib support      ${mlib-no}"
+echo "AVISynth enabled          ${avisynth-no}"
+echo "libamr-nb support         ${libamr_nb-no}"
+echo "libamr-wb support         ${libamr_wb-no}"
+echo "libdc1394 support         ${libdc1394-no}"
+echo "libdirac enabled          ${libdirac-no}"
+echo "libfaac enabled           ${libfaac-no}"
+echo "libfaad enabled           ${libfaad-no}"
+echo "libfaad dlopened          ${libfaadbin-no}"
+echo "libgsm enabled            ${libgsm-no}"
+echo "libmp3lame enabled        ${libmp3lame-no}"
+echo "libnut enabled            ${libnut-no}"
+echo "libopencore-amrnb support ${libopencore_amrnb-no}"
+echo "libopencore-amrwb support ${libopencore_amrwb-no}"
+echo "libopenjpeg enabled       ${libopenjpeg-no}"
+echo "libschroedinger enabled   ${libschroedinger-no}"
+echo "libspeex enabled          ${libspeex-no}"
+echo "libtheora enabled         ${libtheora-no}"
+echo "libvorbis enabled         ${libvorbis-no}"
+echo "libx264 enabled           ${libx264-no}"
+echo "libxvid enabled           ${libxvid-no}"
+echo "zlib enabled              ${zlib-no}"
+echo "bzlib enabled             ${bzlib-no}"
+echo
+
+for type in decoder encoder hwaccel parser demuxer muxer protocol filter bsf indev outdev; do
+    echo "Enabled ${type}s:"
+    eval list=\$$(toupper $type)_LIST
+    for part in $list; do
+        enabled $part && echo ${part%_*}
+    done | sort | pr -3 -t
+    echo
+done
+
+license="LGPL version 2.1 or later"
+if enabled nonfree; then
+    license="nonfree and unredistributable"
+elif enabled gplv3; then
+    license="GPL version 3 or later"
+elif enabled lgplv3; then
+    license="LGPL version 3 or later"
+elif enabled gpl; then
+    license="GPL version 2 or later"
+fi
+
+echo "License: $license"
+BLOCK_QUOTE
+
+echo
+if enabled frontend; then
+  echo "# Input Support"
+  echo "Joystick menu             ${joystick_menu-no}"
+  echo "lirc support              ${lirc-no}"
+  if test x"$target_os" = x"darwin" ; then
+    echo "Apple Remote              ${appleremote-no}"
+  fi
+fi
+
+if enabled backend; then
+  echo "Video4Linux sup.          ${v4l-no}"
+  echo "ivtv support              ${ivtv-no}"
+  echo "HD-PVR support            ${hdpvr-no}"
+  echo "FireWire support          ${firewire-no}"
+  echo "DVB support               ${dvb-no} [$dvb_path]"
+  echo "DVB-S2 support            ${fe_can_2g_modulation-no}"
+#  echo "DBox2 support             ${dbox2-no}"
+  echo "HDHomeRun support         ${hdhomerun-no}"
+  echo "IPTV support              ${iptv-no}"
+fi
+
+if enabled frontend; then
+  echo
+  echo "# Sound Output Support"
+  echo "PulseAudio support        ${audio_pulse-no}"
+  echo "OSS support               ${audio_oss-no}"
+  echo "ALSA support              ${audio_alsa-no}"
+  echo "aRts support              ${audio_arts-no}"
+  echo "JACK support              ${audio_jack-no}"
+  if test x"$target_os" = x"mingw32" ; then
+    echo "Windows (Windows audio)   yes"
+    echo "Windows (DirectX)         yes"
+  fi
+  echo "libfftw3 support          ${libfftw3-no}"
+  echo
+  echo "# Video Output Support"
+  echo "x11 support               ${x11-no}"
+if enabled x11 ; then
+  echo "xrandr support            ${xrandr-no}"
+  echo "xv support                ${xv-no}"
+  echo "XvMC support              ${xvmc-no}"
+  echo "XvMC VLD support          ${xvmc_vld-no}"
+  echo "XvMC pro support          ${xvmc_pro-no}"
+if test "$VENDOR_XVMC_LIBS" != "" ; then
+  echo "XvMC libs                 $VENDOR_XVMC_LIBS"
+fi
+  echo "VDPAU support             ${vdpau-no}"
+fi
+  echo "OpenGL video              ${opengl_video-no}"
+  if test x"$target_os" = x"darwin" ; then
+    echo "Mac acceleration          ${dvdv-no}"
+  fi
+  echo "OpenGL vsync              ${opengl_vsync-no}"
+  echo "DirectFB                  ${directfb-no}"
+  if test x"$target_os" = x"mingw32" ; then
+    echo "Windows (Direct3D)        yes"
+  fi
+  echo "Fribidi formatting        ${fribidi}"
+  echo "MHEG support              ${mheg}"
+  echo
+fi
+
+echo "# Misc Features"
+echo "multi threaded libavcodec ${threads-no}"
+echo "Frontend                  ${frontend-no}"
+echo "Backend                   ${backend-no}"
+echo
+
+echo "# Bindings"
+echo "bindings_perl             ${bindings_perl-no}"
+echo "bindings_python           ${bindings_python-no}"
+echo ""
+
+MYTH_CONFIG_H=libs/libmythdb/mythconfig.h
+MYTH_CONFIG_MAK=libs/libmythdb/mythconfig.mak
+echo "Creating $MYTH_CONFIG_H and $MYTH_CONFIG_MAK"
+
+date >> config.log
+echo "   $0 $FFMPEG_CONFIGURATION" >> config.log
+echo "# Automatically generated by configure - do not modify" > $MYTH_CONFIG_MAK
+echo "/* Automatically generated by configure - do not modify */" > $TMPH
+echo "#ifndef FFMPEG_CONFIG_H" >> $TMPH
+echo "#define FFMPEG_CONFIG_H" >> $TMPH
+echo "#define FFMPEG_CONFIGURATION \"$(c_escape $FFMPEG_CONFIGURATION)\"" >> $TMPH
+echo "#define FFMPEG_DATADIR \"$(eval c_escape $datadir)\"" >> $TMPH
+
+echo "RUNPREFIX=$runprefix" >> $MYTH_CONFIG_MAK
+echo "PREFIX=$prefix" >> $MYTH_CONFIG_MAK
+echo "SYSROOT=$sysroot" >> $MYTH_CONFIG_MAK
+echo "LIBDIRNAME=$libdir_name" >> $MYTH_CONFIG_MAK
+echo "LIBDIR=$libdir" >> $MYTH_CONFIG_MAK
+<<BLOCK_QUOTE
+echo "SHLIBDIR=\$(DESTDIR)$shlibdir" >> config.mak
+echo "INCDIR=\$(DESTDIR)$incdir" >> config.mak
+echo "BINDIR=\$(DESTDIR)$bindir" >> config.mak
+echo "DATADIR=\$(DESTDIR)$datadir" >> config.mak
+echo "MANDIR=\$(DESTDIR)$mandir" >> config.mak
+echo "SRC_PATH=\"$source_path\"" >> config.mak
+echo "SRC_PATH_BARE=$source_path" >> config.mak
+echo "BUILD_ROOT=\"$PWD\"" >> config.mak
+echo "CC=$cc" >> config.mak
+echo "AS=$as" >> config.mak
+echo "YASM=$yasmexe" >> config.mak
+echo "AR=$ar" >> config.mak
+echo "RANLIB=$ranlib" >> config.mak
+echo "LN_S=$ln_s" >> config.mak
+enabled stripping &&
+    echo "STRIP=$strip" >> config.mak ||
+    echo "STRIP=echo ignoring strip" >> config.mak
+BLOCK_QUOTE
+echo "QMAKE_CC=$cc" >> $MYTH_CONFIG_MAK
+echo "QMAKE_CXX=$cxx" >> $MYTH_CONFIG_MAK
+echo "QMAKE_LINK=$cxx" >> $MYTH_CONFIG_MAK
+echo "YASM=$yasmexe" >> $MYTH_CONFIG_MAK
+echo "ARCHFLAGS=$ARCHFLAGS" >> $MYTH_CONFIG_MAK
+echo "PROFILEFLAGS=$PROFILEFLAGS" >> $MYTH_CONFIG_MAK
+echo "OPTFLAGS=$OPTFLAGS" >> $MYTH_CONFIG_MAK
+echo "ECFLAGS=$CFLAGS $ECFLAGS" >> $MYTH_CONFIG_MAK
+echo "ECXXFLAGS=$ECXXFLAGS" >> $MYTH_CONFIG_MAK
+echo "LDFLAGS=$LDFLAGS" >> $MYTH_CONFIG_MAK
+echo "YASMFLAGS=$YASMFLAGS" >> $MYTH_CONFIG_MAK
+<<BLOCK_QUOTE
+echo "FFSERVERLDFLAGS=$FFSERVERLDFLAGS" >> config.mak
+echo "SHFLAGS=$SHFLAGS" >> config.mak
+echo "YASMFLAGS=$YASMFLAGS" >> config.mak
+echo "LIBOBJFLAGS=$LIBOBJFLAGS" >> config.mak
+echo "BUILD_STATIC=$static" >> config.mak
+echo "BUILDSUF=$build_suffix" >> config.mak
+echo "FULLNAME=$FULLNAME" >> config.mak
+echo "LIBPREF=$LIBPREF" >> config.mak
+echo "LIBSUF=$LIBSUF" >> config.mak
+echo "LIBNAME=$LIBNAME" >> config.mak
+echo "SLIBPREF=$SLIBPREF" >> config.mak
+echo "SLIBSUF=$SLIBSUF" >> config.mak
+echo "EXESUF=$EXESUF" >> config.mak
+echo "EXTRA_VERSION=$extra_version" >> config.mak
+echo "DEPEND_CMD=$DEPEND_CMD" >> config.mak
+echo "HOSTCC=$host_cc" >> config.mak
+BLOCK_QUOTE
+echo "HOSTCFLAGS=$host_cflags" >> config.mak
+echo "HOSTEXESUF=$HOSTEXESUF" >> config.mak
+echo "HOSTLDFLAGS=$host_ldflags" >> config.mak
+echo "HOSTLIBS=$host_libs" >> config.mak
+echo "TARGET_EXEC=$target_exec" >> config.mak
+echo "TARGET_PATH=$target_path" >> config.mak
+
+if enabled bigendian; then
+    echo "WORDS_BIGENDIAN=yes" >> $MYTH_CONFIG_MAK
+    echo "#define WORDS_BIGENDIAN 1" >> $TMPH
+fi
+
+if enabled freetype2; then
+    echo "HAVE_FREETYPE2=yes" >> $MYTH_CONFIG_MAK
+    echo "FREETYPE_CFLAGS=`freetype-config --cflags`" >> $MYTH_CONFIG_MAK
+    echo "FREETYPE_LIBS=`freetype-config --libs`" >> $MYTH_CONFIG_MAK
+fi
+if enabled fribidi; then
+    echo "FRIBIDI_LIBS=`${FRIBIDI_CONFIG} --libs`" >> $MYTH_CONFIG_MAK
+    echo "FRIBIDI_CFLAGS=`${FRIBIDI_CONFIG} --cflags`" >> $MYTH_CONFIG_MAK
+fi
+if enabled sdl; then
+    echo "SDL_LIBS=$("${SDL_CONFIG}" --libs)" >> $MYTH_CONFIG_MAK
+    echo "SDL_CFLAGS=$("${SDL_CONFIG}" --cflags)" >> $MYTH_CONFIG_MAK
+fi
+<<BLOCK_QUOTE
+if enabled texi2html; then
+    echo "BUILD_DOC=yes" >> config.mak
+fi
+BLOCK_QUOTE
+
+echo "#define SIZEOF_INT $_sizeof_int" >> $TMPH
+echo "#define SIZEOF_LONG $_sizeof_long" >> $TMPH
+
+get_version(){
+    name=$1
+    file=$source_path/$2
+    eval $(grep "#define ${name}_VERSION_M" "$file" | awk '{ print $2"="$3 }')
+    eval ${name}_VERSION=\$${name}_VERSION_MAJOR.\$${name}_VERSION_MINOR.\$${name}_VERSION_MICRO
+    lcname=$(tolower $name)
+    eval echo "${lcname}_VERSION=\$${name}_VERSION" >> $MYTH_CONFIG_MAK
+    eval echo "${lcname}_VERSION_MAJOR=\$${name}_VERSION_MAJOR" >> $MYTH_CONFIG_MAK
+}
+
+get_version LIBSWSCALE  libs/libswscale/swscale.h
+get_version LIBPOSTPROC libs/libpostproc/postprocess.h
+get_version LIBAVCODEC  libs/libavcodec/avcodec.h
+#get_version LIBAVDEVICE libs/libavdevice/avdevice.h
+get_version LIBAVFORMAT libs/libavformat/avformat.h
+get_version LIBAVUTIL   libs/libavutil/avutil.h
+#get_version LIBAVFILTER libs/libavfilter/avfilter.h
+
+if enabled shared; then
+    echo "BUILD_SHARED=yes" >> $MYTH_CONFIG_MAK
+    echo "PIC=-fPIC -DPIC" >> $MYTH_CONFIG_MAK
+<<BLOCK_QUOTE
+    echo "LIBTARGET=${LIBTARGET}" >> config.mak
+    echo "SLIBNAME=${SLIBNAME}" >> config.mak
+    echo "SLIBNAME_WITH_VERSION=${SLIBNAME_WITH_VERSION}" >> config.mak
+    echo "SLIBNAME_WITH_MAJOR=${SLIBNAME_WITH_MAJOR}" >> config.mak
+    echo "SLIB_CREATE_DEF_CMD=${SLIB_CREATE_DEF_CMD}" >> config.mak
+    echo "SLIB_EXTRA_CMD=${SLIB_EXTRA_CMD}" >> config.mak
+    echo "SLIB_INSTALL_EXTRA_CMD=${SLIB_INSTALL_EXTRA_CMD}" >> config.mak
+    echo "SLIB_UNINSTALL_EXTRA_CMD=${SLIB_UNINSTALL_EXTRA_CMD}" >> config.mak
+BLOCK_QUOTE
+fi
+if enabled pthreads; then
+  if test $target_os != freebsd -a $target_os != openbsd ; then
+     extralibs="$extralibs -lpthread"
+  fi
+fi
+echo "" >> $MYTH_CONFIG_MAK
+
+if enabled audio_oss; then
+    append CCONFIG "using_oss"
+fi
+if enabled audio_alsa; then
+    append CCONFIG "using_alsa"
+  echo "CONFIG_AUDIO_ALSA_LIBS=$audio_alsa_libs" >> $MYTH_CONFIG_MAK
+fi
+
+if enabled audio_pulse; then
+  append CCONFIG "using_pulse"
+  echo "CONFIG_AUDIO_PULSE_LIBS=$audio_pulse_libs" >> $MYTH_CONFIG_MAK
+fi
+
+if enabled audio_arts; then
+    append CCONFIG "using_arts"
+  echo "CONFIG_AUDIO_ARTS_LIBS=$audio_arts_libs" >> $MYTH_CONFIG_MAK
+  echo "CONFIG_AUDIO_ARTS_CFLAGS=$audio_arts_cflags" >> $MYTH_CONFIG_MAK
+fi
+
+if enabled audio_jack; then
+    append CCONFIG "using_jack"
+  echo "CONFIG_AUDIO_JACK_LIBS=$audio_jack_libs" >> $MYTH_CONFIG_MAK
+fi
+
+if enabled darwin_da; then
+  append CCONFIG "darwin_da"
+  echo "SLIB_UNINSTALL_EXTRA_CMD=${SLIB_UNINSTALL_EXTRA_CMD}" >> $MYTH_CONFIG_MAK
+fi
+
+if test $target_os = darwin; then
+  # Qt, by default builds .app bundles everywhere. Prevent this.
+  enabled mac_bundle || echo "CONFIG -= app_bundle" >> $MYTH_CONFIG_MAK
+fi
+
+if enabled mac_corevideo; then
+  append CCONFIG "using_corevideo"
+fi
+
+if enabled cygwin ; then
+  echo "#ifndef llrint" >> $TMPH
+  echo "#define llrint llrint  // make sure not to define twice" >> $TMPH
+  echo "static inline long long int llrint (double x)" >> $TMPH
+  echo "{" >> $TMPH
+  echo "    long long int llrintres;" >> $TMPH
+  echo "    asm" >> $TMPH
+  echo "    (\"fistpll %0\"" >> $TMPH
+  echo "    : \"=m\" (llrintres) : \"t\" (x) : \"st\");" >> $TMPH
+  echo "    return llrintres;" >> $TMPH
+  echo "}" >> $TMPH
+  echo "#endif" >> $TMPH
+fi
+
+echo "EXTRALIBS=$extralibs" >> $MYTH_CONFIG_MAK
+
+print_config ARCH_   $TMPH $MYTH_CONFIG_MAK $ARCH_LIST
+print_config HAVE_   $TMPH $MYTH_CONFIG_MAK $HAVE_LIST
+print_config CONFIG_ $TMPH $MYTH_CONFIG_MAK $CONFIG_LIST   \
+                                      $CONFIG_EXTRA      \
+                                      $DECODER_LIST      \
+                                      $ENCODER_LIST      \
+                                      $HWACCEL_LIST      \
+                                      $PARSER_LIST       \
+                                      $BSF_LIST          \
+                                      $DEMUXER_LIST      \
+                                      $MUXER_LIST        \
+                                      $FILTER_LIST       \
+                                      $PROTOCOL_LIST     \
+                                      $INDEV_LIST        \
+                                      $OUTDEV_LIST       \
+                                      $MYTHTV_LIST       \
+                                      $MYTHTV_CONFIG_LIST \
+
+echo "#define restrict $_restrict" >> $TMPH
+
+if enabled small; then
+    echo "#define av_always_inline"  >> $TMPH
+fi
+
+# Apparently it's not possible to portably echo a backslash.
+enabled asmalign_pot &&
+    printf '#define ASMALIGN(ZEROBITS) ".align " #ZEROBITS "\\n\\t"\n' >> $TMPH ||
+    printf '#define ASMALIGN(ZEROBITS) ".align 1 << " #ZEROBITS "\\n\\t"\n' >> $TMPH
+
+echo "#define EXTERN_PREFIX \"${extern_prefix}\"" >> $TMPH
+
+for opt in $MYTHTV_CONFIG_LIST $USING_LIST; do
+    enabled $opt && append CCONFIG "using_$opt"
+done
+
+enabled threads && append CCONFIG "using_ffmpeg_threads"
+
+# build tree in object directory if source path is different from current one
+if enabled source_path_used; then
+    DIRS="\
+        doc               \
+        libavcodec        \
+        libavcodec/alpha  \
+        libavcodec/arm    \
+        libavcodec/bfin   \
+        libavcodec/mlib   \
+        libavcodec/ppc    \
+        libavcodec/sh4    \
+        libavcodec/sparc  \
+        libavcodec/x86    \
+        libavdevice       \
+        libavfilter       \
+        libavformat       \
+        libavutil         \
+        libpostproc       \
+        libswscale        \
+        libswscale/bfin   \
+        libswscale/mlib   \
+        libswscale/ppc    \
+        libswscale/sparc  \
+        libswscale/x86    \
+        tests             \
+        tools             \
+        "
+    FILES="\
+        Makefile             \
+        common.mak           \
+        subdir.mak           \
+        doc/texi2pod.pl      \
+        libavcodec/Makefile  \
+        libavdevice/Makefile \
+        libavfilter/Makefile \
+        libavformat/Makefile \
+        libavutil/Makefile   \
+        libpostproc/Makefile \
+        libswscale/Makefile  \
+        "
+    for dir in $DIRS ; do
+        mkdir -p $dir
+    done
+    for f in $FILES ; do
+        $ln_s "$source_path/$f" $f
+    done
+fi
+echo "SRC_PATH='$source_path'" >> $MYTH_CONFIG_MAK
+
+if disabled frontend; then
+    echo
+    echo "WARNING: --disable-frontend is only intended to aid porting."
+    echo "WARNING: THIS WILL BREAK THINGS. You are on your own now."
+fi
+
+if disabled backend; then
+    echo
+    echo "WARNING: --disable-backend is only intended to aid porting."
+    echo "WARNING: You are on your own now."
+fi
+
+if enabled proc_opt; then
+    echo
+    echo "WARNING: When using --enable-proc-opt you must include the "
+    echo "         output of ./configure along with any bug report."
+fi
+
+if enabled cpu_override; then
+    echo
+    echo "WARNING: When using --arch=X or --cpu=X you must include the "
+    echo "         output of ./configure along with any bug report."
+fi
+
+echo # add a newline after any warnings.
+
+if enabled mmx; then
+  CONFIG_DEFINES="$CONFIG_DEFINES MMX"
+  if enabled x86_32 ; then
+    CONFIG_DEFINES="$CONFIG_DEFINES i386"
+  fi
+fi
+
+if enabled firewire; then
+  if test $target_os = darwin; then
+      echo "CONFIG_MAC_AVC=$mac_avc" >>  $MYTH_CONFIG_MAK
+  else
+      echo "CONFIG_FIREWIRE_LIBS=-lraw1394 -liec61883 -lavc1394 -lrom1394" >>  $MYTH_CONFIG_MAK
+      if enabled libavc_5_3; then
+        append CCONFIG "using_libavc_5_3"
+      fi
+  fi
+fi
+
+if enabled iptv; then
+    append CCONFIG "using_live"
+fi
+
+if enabled mheg; then
+    append CCONFIG "using_mheg"
+fi
+
+if enabled appleremote; then
+  append CONFIG_DEFINES "USING_APPLEREMOTE"
+fi
+
+if enabled dvb; then
+  append CONFIG_INCLUDEPATH "$dvb_path"
+fi
+
+if enabled x11; then
+  echo "CONFIG_X11_LIBS=-lXinerama -lX11 -lXext -lXxf86vm" >> $MYTH_CONFIG_MAK
+  if [ -d $x11_path ] ; then
+    append CONFIG_INCLUDEPATH "$x11_path"
+  fi
+fi
+
+if enabled xv; then
+  echo "CONFIG_XV_LIBS=-lXv" >> $MYTH_CONFIG_MAK
+fi
+
+if enabled xrandr; then
+  echo "CONFIG_XRANDR_LIBS=-lXrandr" >> $MYTH_CONFIG_MAK
+fi
+
+if enabled xvmc; then
+  echo "CONFIG_XVMC_LIBS=$VENDOR_XVMC_LIBS -lXvMC" >> $MYTH_CONFIG_MAK
+fi
+
+if enabled directfb; then
+  echo "CONFIG_DIRECTFB_LIBS=$CONFIG_DIRECTFB_LIBS" >> $MYTH_CONFIG_MAK
+  echo "CONFIG_DIRECTFB_CXXFLAGS=$CONFIG_DIRECTFB_CXXFLAGS" >> $MYTH_CONFIG_MAK
+fi
+
+if ! enabled darwin && enabled opengl; then
+  echo "CONFIG_OPENGL_LIBS=-lGL -lGLU" >> $MYTH_CONFIG_MAK
+fi
+
+if test x"$CCONFIG" != x"" ; then
+  echo "CCONFIG=$CCONFIG" >> $MYTH_CONFIG_MAK
+  echo "#define MYTH_BUILD_CONFIG \"$CCONFIG\"" >>$TMPH
+fi
+
+if test x"$CONFIG_DEFINES" != x"" ; then
+  echo "CONFIG_DEFINES=$CONFIG_DEFINES" >> $MYTH_CONFIG_MAK
+fi
+
+if test x"$CONFIG_INCLUDEPATH" != x"" ; then
+  echo "CONFIG_INCLUDEPATH=$CONFIG_INCLUDEPATH" >> $MYTH_CONFIG_MAK
+fi
+
+if test x"$GCC_MAJOR" != x"" ; then
+  echo "GCC_MAJOR=$GCC_MAJOR" >> $MYTH_CONFIG_MAK
+fi
+
+if test x"$GCC_MINOR" != x"" ; then
+  echo "GCC_MINOR=$GCC_MINOR" >> $MYTH_CONFIG_MAK
+fi
+
+echo "#endif /* FFMPEG_CONFIG_H */" >> $TMPH
+
+cat <<EOF >> $MYTH_CONFIG_MAK
+# HACK: If Qt 4 and MythTV's installed library dirs are the same, remove the
+#       -L from early in the link line, to ignore any old installed libmyth*
+# Note: Qt uses QMAKE_INCDIR_QT to build an absolute path for include
+#       directories, it cannot be modified.
+QMAKE_LIBDIR_QT -= $libdir
+LATE_LIBS            += -L$libdir
+EOF
+
+diff $TMPH $MYTH_CONFIG_H >/dev/null 2>&1
+if test $? -ne 0 ; then
+  mv -f $TMPH $MYTH_CONFIG_H
+  rm -f config.h
+else
+  echo "$MYTH_CONFIG_H is unchanged"
+fi
+
+if ! test -L config.h ; then
+  ln -s $MYTH_CONFIG_H config.h
+fi
+
+if [ ! -e config.h ] ; then
+  ln -s $MYTH_CONFIG_H config.h
+fi
+
+rm -f config.mak
+ln -s $MYTH_CONFIG_MAK config.mak
+
+# delete old myth config files in old location
+if [ -e libs/libmyth/mythconfig.mak ] ; then
+    rm -f libs/libmyth/mythconfig.mak
+fi
+if [ -e /libs/libmyth/mythconfig.h ] ; then
+    rm -f libs/libmyth/mythconfig.h
+fi
+
+rm -f $TMPC $TMPE $TMPH $TMPO $TMPS $TMPSH
+rm -f $TMPCXX
+
+# Create a special cleanup makefile that will allow make clean to work
+if [ ! -e config ] ; then
+  mkdir config
+fi
+cat - > config/Makefile <<END
+
+all:
+qmake_all:
+	\$(NONE)
+
+clean:
+	\$(NONE)
+
+install:
+	\$(NONE)
+
+# Hack to remove some empty directories that qmake doesn't create rules for
+uninstall:
+	-rmdir \$(INSTALL_ROOT)/$prefix/include/mythtv
+	-rmdir \$(INSTALL_ROOT)/$prefix/lib/mythtv
+	-rmdir \$(INSTALL_ROOT)/$prefix/share/mythtv
+
+distclean: clean
+	-rm -f ../$MYTH_CONFIG_MAK  ../config.mak
+	-rm -f ../$MYTH_CONFIG_H    ../config.h
+	-rm -f ../Makefile          ../config.err
+
+END
+
+$qmake QMAKE=$(which $qmake) mythtv.pro
+
