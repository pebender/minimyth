#!/bin/sh
################################################################################
# mm_url_mount
#
# This function mounts a remote directory as a local directory.
#
# This function takes three arguments:
#     URL: required argument:
#         A URL that points to the remote directory. A URL must have the
#         following form:
#             <protocol>://<username>:<password>@<server>/<path>?<options>
#         where <options> are additional mount options (-o).
#         For example:
#             nfs://server.home/home/public/music
#             cifs://user:pass@server.home/home/public/music,domain=home
#             conf:themecache.tar.bz2
#         The valid protocol values are: nfs, smbfs (aka smb), cifs, tftp and
#         conf. For nfs, smbfs and cifs, the URL points to a remote directory.
#         For tftp, the URL points to a tarfile (*.tar.bz2) on a TFTP server
#         that will be downloaded and expanded into the mount point. For conf,
#         the URL points to a tarfile (*.tar.bz2) in the MiniMyth conf directory
#         on the TFTP server that will be download and expanded into the mount
#         point.
#     MOUNT_DIR: required argument:
#         The local directory (e.g. /mnt/music) where the URL will be mounted.
################################################################################
[ -n "`mm_var_get MM_DEBUG`" ] && set -x

URL="$1"
MOUNT_DIR="$2"

mkdir -p ${MOUNT_DIR}

URL_PROTOCOL=`echo ${URL} | cut -d? -f1 | cut -d: -f1`
URL_USERNAME=`echo ${URL} | cut -d? -f1 | sed 's%^[^:]*:%%' | sed 's%^//%%' | sed 's%[^@]*$%%'  | sed 's%@$%%' | cut -d: -f1`
URL_PASSWORD=`echo ${URL} | cut -d? -f1 | sed 's%^[^:]*:%%' | sed 's%^//%%' | sed 's%[^@]*$%%'  | sed 's%@$%%' | cut -d: -f2`
URL_SERVER=`  echo ${URL} | cut -d? -f1 | sed 's%^[^:]*:%%' | sed 's%^//%%' | sed 's%^[^@]*@%%' | sed 's%/[^/]*%%g'`
URL_PATH=`    echo ${URL} | cut -d? -f1 | sed 's%^[^:]*:%%' | sed 's%^//[^/]*/%/%'`
URL_OPTIONS=` echo ${URL}               | sed 's%^[^?]*%%'  | sed 's%^?%%'`

MOUNT_OPTIONS="${URL_OPTIONS}"

MOUNT_VFSTYPE=""
EXTRA_OPTIONS=""
if   [ "${URL_PROTOCOL}" = "nfs" ] ; then
    MOUNT_VFSTYPE=nfs
    MOUNT_DEVICE="${URL_SERVER}:${URL_PATH}"
    MOUNT_OPTIONS="${MOUNT_OPTIONS},rsize=8192,wsize=8192"
elif [ "${URL_PROTOCOL}" = "smbfs" ] || [ "${URL_PROTOCOL}" = "smb" ] ; then
    MOUNT_VFSTYPE=smbfs
    EXTRA_OPTIONS="-n"
    MOUNT_DEVICE="//${URL_SERVER}${URL_PATH}"
    if [ ! "${URL_USERNAME}" = "" ] ; then
        MOUNT_OPTIONS="${MOUNT_OPTIONS},username=${URL_USERNAME}"
    fi
    if [ ! "${URL_PASSWORD}" = "" ] ; then
        MOUNT_OPTIONS="${MOUNT_OPTIONS},password=${URL_PASSWORD}"
    fi
elif [ "${URL_PROTOCOL}" = "cifs" ] ; then
    MOUNT_VFSTYPE=cifs
    EXTRA_OPTIONS="-n"
    MOUNT_DEVICE="//${URL_SERVER}${URL_PATH}"
    if [ ! "${URL_USERNAME}" = "" ] ; then
        MOUNT_OPTIONS="${MOUNT_OPTIONS},username=${URL_USERNAME}"
    fi
    if [ ! "${URL_PASSWORD}" = "" ] ; then
        MOUNT_OPTIONS="${MOUNT_OPTIONS},password=${URL_PASSWORD}"
    fi
elif [ "${URL_PROTOCOL}" = "tftp" ] ; then
    mm_dir_make_rw ${MOUNT_DIR}
    TARFILE="tmp.tar.bz2~"
    cd ${MOUNT_DIR}
    tftp -g -r ${URL_PATH} -l ${TARFILE} ${URL_SERVER}
    tar -jxf ${TARFILE}
    rm -f ${TARFILE}
elif [ "${URL_PROTOCOL}" = "conf" ] ; then
    mm_dir_make_rw ${MOUNT_DIR}
    TARFILE="tmp.tar.bz2~"
    cd ${MOUNT_DIR}
    mm_conf_get ${URL_PATH} ${TARFILE}
    tar -jxf ${TARFILE}
    rm -f ${TARFILE}
fi

if [ -n "${MOUNT_VFSTYPE}" ] ; then
    MOUNT_OPTIONS=`echo ${MOUNT_OPTIONS} | sed 's%^,%%'`
    [ -n "${EXTRA_OPTIONS}" ] && OPTIONS="${EXTRA_OPTIONS}"
    [ -n "${MOUNT_OPTIONS}" ] && OPTIONS="${OPTIONS} -o ${MOUNT_OPTIONS}"
    mount -n -t ${MOUNT_VFSTYPE} ${OPTIONS} ${MOUNT_DEVICE} ${MOUNT_DIR}
fi

# Update fstab.
case "${MOUNT_VFSTYPE}" in
    cifs)
        echo "${MOUNT_DEVICE} ${MOUNT_DIR} ${MOUNT_VFSTYPE} ${MOUNT_OPTIONS} 0 0" >> /etc/fstab
        ;;
    nfs)
        echo "${MOUNT_DEVICE} ${MOUNT_DIR} ${MOUNT_VFSTYPE} ${MOUNT_OPTIONS} 0 0" >> /etc/fstab
        ;;
    smbfs)
        echo "${MOUNT_DEVICE} ${MOUNT_DIR} ${MOUNT_VFSTYPE} ${MOUNT_OPTIONS} 0 0" >> /etc/fstab
        ;;
esac
