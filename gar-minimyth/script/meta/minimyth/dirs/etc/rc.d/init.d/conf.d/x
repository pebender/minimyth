################################################################################
# X configuration variables and files.
################################################################################
conf_clean_x() {
    /bin/rm -rf /tmp/init.conf.x

    return 0
}

conf_check_x() {
    local X_SYNC_ITEM
    local X_REFRESH_ITEM
    local IFS_SAVE

    # Check for obsolete variables.
    if /usr/bin/test ! -z "${MM_NO_VNC}"                ; then
        mm_message_output err "error: 'minimyth.conf' is out of date. 'MM_NO_VNC' is obsolete."
    fi
    if /usr/bin/test ! -z "${MM_NO_X}"                  ; then
        mm_message_output err "error: 'minimyth.conf' is out of date. 'MM_NO_X' is obsolete."
    fi
    if /usr/bin/test ! -z "${MM_NO_XWM}"                ; then
        mm_message_output err "error: 'minimyth.conf' is out of date. 'MM_NO_XWM' is obsolete."
    fi
    if /usr/bin/test ! -z "${MM_X_SCREENSAVER_ENABLED}" ; then
        mm_message_output err "error: 'minimyth.conf' is out of date. 'MM_X_SCREENSAVER_ENABLED' is obsolete."
    fi
    if /usr/bin/test ! -z "${MM_X_TV}"                  ; then
        mm_message_output err "error: 'minimyth.conf' is out of date. 'MM_X_TV' is obsolete."
    fi
    if /usr/bin/test ! -z "${MM_X_DVI_ENABLED}"         ; then
        mm_message_output err "error: 'minimyth.conf' is out of date. 'MM_X_DVI_ENABLED' is obsolete."
    fi
    if /usr/bin/test ! -z "${MM_X_VGA_ENABLED}"         ; then
        mm_message_output err "error: 'minimyth.conf' is out of date. 'MM_X_VGA_ENABLED' is obsolete."
    fi
    if /usr/bin/test ! -z "${MM_X_TV_ENABLED}"          ; then
        mm_message_output err "error: 'minimyth.conf' is out of date. 'MM_X_TV_ENABLED' is obsolete."
    fi
    if /usr/bin/test ! -z "${MM_X_DISPLAYSIZE_X}"       ; then
        mm_message_output err "error: 'minimyth.conf' is out of date. 'MM_X_DISPLAYSIZE_X' is obsolete."
    fi
    if /usr/bin/test ! -z "${MM_X_DISPLAYSIZE_Y}"       ; then
        mm_message_output err "error: 'minimyth.conf' is out of date. 'MM_X_DISPLAYSIZE_Y' is obsolete."
    fi
    if /usr/bin/test ! -z "${MM_X_RESOLUTION_X}"        ; then
        mm_message_output err "error: 'minimyth.conf' is out of date. 'MM_X_RESOLUTION_X' is obsolete."
    fi
    if /usr/bin/test ! -z "${MM_X_RESOLUTION_Y}"        ; then
        mm_message_output err "error: 'minimyth.conf' is out of date. 'MM_X_RESOLUTION_Y' is obsolete."
    fi

    # Check X application variables.
    if /usr/bin/test ! -z "${MM_X_WM_ENABLED}"          && \
       /usr/bin/test !    "${MM_X_WM_ENABLED}" = "yes"  && \
       /usr/bin/test !    "${MM_X_WM_ENABLED}" = "no"   ; then
        mm_message_output err "error: MM_X_WM_ENABLED='${MM_X_WM_ENABLED}' is not valid."
    fi
    if /usr/bin/test ! -z "${MM_X_VNC_ENABLED}"          && \
       /usr/bin/test !    "${MM_X_VNC_ENABLED}" = "yes"  && \
       /usr/bin/test !    "${MM_X_VNC_ENABLED}" = "no"   ; then
        mm_message_output err "error: MM_X_VNC_ENABLED='${MM_X_VNC_ENABLED}' is not valid."
    fi
    if /usr/bin/test ! -z "${MM_X_SCREENSAVER}"                  && \
       /usr/bin/test !    "${MM_X_SCREENSAVER}" = "none"         && \
       /usr/bin/test !    "${MM_X_SCREENSAVER}" = "xorg"         && \
       /usr/bin/test !    "${MM_X_SCREENSAVER}" = "xscreensaver" ; then
        mm_message_output err "error: MM_X_SCREENSAVER='${MM_X_SCREENSAVER}' is not valid."
    fi
    if /usr/bin/test ! -z "${MM_X_SCREENSAVER_HACK}"                 && \
       /usr/bin/test !    "${MM_X_SCREENSAVER_HACK}" = "blank"       &&
       /usr/bin/test !    "${MM_X_SCREENSAVER_HACK}" = "glslideshow" ; then
        mm_message_output err "error: MM_X_SCREENSAVER_HACK='${MM_X_SCREENSAVER_HACK}' is not valid."
    fi
    if /usr/bin/test ! -z "${MM_X_MYTH_PROGRAM}"                  && \
       /usr/bin/test !    "${MM_X_MYTH_PROGRAM}" = "mythfrontend" && \
       /usr/bin/test !    "${MM_X_MYTH_PROGRAM}" = "mythwelcome"  ; then
        mm_message_output err "error: MM_X_MYTH_PROGRAM='${MM_X_MYTH_PROGRAM}' is not valid."
    fi

    # We do not check the X output variables
    # (MM_X_OUTPUT_DVI, MM_X_OUTPUT_VGA, MM_X_OUTPUT_TV, MM_X_TV_TYPE, MM_X_TV_OUTPUT and MM_X_TV_OVERSCAN)
    # in this routine, because they depend on the value of MM_X_DRIVER,
    # which is configured when 'conf_default_x' is run.
    # Thefore, we check them in the 'conf_default_x' routine.

    # Check X display variables.
    # Check MM_X_SYNC.
    if /usr/bin/test ! -z "${MM_X_SYNC}" ; then
        IFS_SAVE=${IFS}
        IFS=,
        for X_SYNC_ITEM in ${MM_X_SYNC} ; do 
            if ! /bin/echo ${X_SYNC_ITEM} | /bin/grep -q -e '^[0-9][0-9]*\(\.[0-9]*\)\?$'                           > /dev/null 2>&1 && \
               ! /bin/echo ${X_SYNC_ITEM} | /bin/grep -q -e '^[0-9][0-9]*\(\.[0-9]*\)\?-[0-9][0-9]*\(\.[0-9]*\)\?$' > /dev/null 2>&1 ; then
                mm_message_output err "error: MM_X_TV_SYNC='${MM_X_SYNC}' is not valid."
            fi
        done
        IFS=${IFS_SAVE}
    fi
    # Check MM_X_REFRESH.
    if /usr/bin/test ! -z "${MM_X_REFRESH}" ; then
        IFS_SAVE=${IFS}
        IFS=,
        for X_REFRESH_ITEM in ${MM_X_REFRESH} ; do 

            if ! /bin/echo ${X_REFRESH_ITEM} | /bin/grep -q -e '^[0-9][0-9]*\(\.[0-9]*\)\?$'                           > /dev/null 2>&1 && \
               ! /bin/echo ${X_REFRESH_ITEM} | /bin/grep -q -e '^[0-9][0-9]*\(\.[0-9]*\)\?-[0-9][0-9]*\(\.[0-9]*\)\?$' > /dev/null 2>&1 ; then
                mm_message_output err "error: MM_X_TV_REFRESH='${MM_X_REFRESH}' is not valid."
            fi
        done
        IFS=${IFS_SAVE}
    fi
    # Make sure that MM_X_REFRESH is not a range or a list when MM_X_RESOLUTION is set.
    if /usr/bin/test -n "${MM_X_RESOLUTION}"                                                          && \
       /usr/bin/test `/bin/echo -n ${MM_X_REFRESH} | /bin/sed -e 's%[^-,]%%g' | /usr/bin/wc -c` -ne 0 ; then
        mm_message_output err "error: 'MM_X_REFRESH' cannot be set to a range or a list when 'MM_X_RESOLUTION' is set."
    fi
    # Make sure that only one of MM_X_RESOLUTION, MM_X_MODELINE and MM_X_MODE is set.
    if /usr/bin/test -n "${MM_X_RESOLUTION}" && /usr/bin/test -n "${MM_X_MODE}"     ; then
        mm_message_output err "error: both 'MM_X_RESOLUTION' and 'MM_X_MODE' cannot be set."
    fi
    if /usr/bin/test -n "${MM_X_RESOLUTION}" && /usr/bin/test -n "${MM_X_MODELINE}" ; then
        mm_message_output err "error: both 'MM_X_RESOLUTION' and 'MM_X_MODELINE' cannot be set."
    fi
    if /usr/bin/test -n "${MM_X_MODELINE}"   && /usr/bin/test -n "${MM_X_MODE}"     ; then
        mm_message_output err "error: both 'MM_X_MODELINE' and 'MM_X_MODE' cannot be set."
    fi
    if /usr/bin/test -n "${MM_X_MODELINE_0}" && /usr/bin/test -n "${MM_X_MODE_0}"   ; then
        mm_message_output err "error: both 'MM_X_MODELINE_0' and 'MM_X_MODE_0' cannot be set."
    fi
    if /usr/bin/test -n "${MM_X_MODELINE_1}" && /usr/bin/test -n "${MM_X_MODE_1}"   ; then
        mm_message_output err "error: both 'MM_X_MODELINE_1' and 'MM_X_MODE_1' cannot be set."
    fi
    if /usr/bin/test -n "${MM_X_MODELINE_2}" && /usr/bin/test -n "${MM_X_MODE_2}"   ; then
        mm_message_output err "error: both 'MM_X_MODELINE_2' and 'MM_X_MODE_2' cannot be set."
    fi
    # Check the format of MM_X_RESOLUTION.
    if /usr/bin/test -n "${MM_X_RESOLUTION}" ; then
        if ! /bin/echo ${MM_X_RESOLUTION} | /bin/grep -q -e '^[0-9][0-9]*x[0-9][0-9]*$' > /dev/null 2>&1 ; then
            mm_message_output err "error: 'MM_X_RESOLUTION' format is not valid"
        fi
    fi
    # Check the format of MM_X_MODELINE.
    if /usr/bin/test -n "${MM_X_MODELINE}" ; then
        if ! /bin/echo ${MM_X_MODELINE} | /bin/grep -q -e '^[Mm][Oo][Dd][Ee][Ll][Ii][Nn][Ee]  *"[0-9][0-9]*[Xx][0-9][^"]*".*' > /dev/null 2>&1 ; then
            mm_message_output err "error: 'MM_X_MODELINE' format is not valid."
        fi
    fi
    if /usr/bin/test -n "${MM_X_MODELINE_0}" ; then
        if ! /bin/echo ${MM_X_MODELINE_0} | /bin/grep -q -e '^[Mm][Oo][Dd][Ee][Ll][Ii][Nn][Ee]  *"[0-9][0-9]*[Xx][0-9][^"]*".*' > /dev/null 2>&1 ; then
            mm_message_output err "error: 'MM_X_MODELINE_0' format is not valid."
        fi
    fi
    if /usr/bin/test -n "${MM_X_MODELINE_1}" ; then
        if ! /bin/echo ${MM_X_MODELINE_1} | /bin/grep -q -e '^[Mm][Oo][Dd][Ee][Ll][Ii][Nn][Ee]  *"[0-9][0-9]*[Xx][0-9][^"]*".*' > /dev/null 2>&1 ; then
            mm_message_output err "error: 'MM_X_MODELINE_1' format is not valid."
        fi
    fi
    if /usr/bin/test -n "${MM_X_MODELINE_2}" ; then
        if ! /bin/echo ${MM_X_MODELINE_2} | /bin/grep -q -e '^[Mm][Oo][Dd][Ee][Ll][Ii][Nn][Ee]  *"[0-9][0-9]*[Xx][0-9][^"]*".*' > /dev/null 2>&1 ; then
            mm_message_output err "error: 'MM_X_MODELINE_2' format is not valid."
        fi
    fi
    # Check the format of MM_X_MODE.
    if /usr/bin/test -n "${MM_X_MODE}"   && /usr/bin/test ! "${MM_X_MODE}"   = "auto"; then
        if ! /bin/echo ${MM_X_MODE} | /bin/grep -q -e '^[0-9][0-9]*[Xx][0-9].*' > /dev/null 2>&1 ; then
            mm_message_output err "error: 'MM_X_MODE' format is not valid."
        fi
    fi
    if /usr/bin/test -n "${MM_X_MODE_0}" && /usr/bin/test ! "${MM_X_MODE_0}" = "auto" && /usr/bin/test ! "${MM_X_MODE_0}" = "none" ; then
        if ! /bin/echo ${MM_X_MODE_0} | /bin/grep -q -e '^[0-9][0-9]*[Xx][0-9].*' > /dev/null 2>&1 ; then
            mm_message_output err "error: 'MM_X_MODE_0' format is not valid."
        fi
    fi
    if /usr/bin/test -n "${MM_X_MODE_1}" && /usr/bin/test ! "${MM_X_MODE_1}" = "auto" && /usr/bin/test ! "${MM_X_MODE_1}" = "none" ; then
        if ! /bin/echo ${MM_X_MODE_1} | /bin/grep -q -e '^[0-9][0-9]*[Xx][0-9].*' > /dev/null 2>&1 ; then
            mm_message_output err "error: 'MM_X_MODE_1' format is not valid."
        fi
    fi
    if /usr/bin/test -n "${MM_X_MODE_2}" && /usr/bin/test ! "${MM_X_MODE_2}" = "auto" && /usr/bin/test ! "${MM_X_MODE_2}" = "none" ; then
        if ! /bin/echo ${MM_X_MODE_2} | /bin/grep -q -e '^[0-9][0-9]*[Xx][0-9].*' > /dev/null 2>&1 ; then
            mm_message_output err "error: 'MM_X_MODE_2' format is not valid."
        fi
    fi

    # Check hack variables.
    if /usr/bin/test ! -z "${MM_X_HACK_HIDE_BLUE_LINE_ENABLED}"          && \
       /usr/bin/test !    "${MM_X_HACK_HIDE_BLUE_LINE_ENABLED}" = "yes"  && \
       /usr/bin/test !    "${MM_X_HACK_HIDE_BLUE_LINE_ENABLED}" = "no"   ; then
        mm_message_output err "error: MM_X_HACK_HIDE_BLUE_LINE_ENABLED='${MM_X_HACK_HIDE_BLUE_LINE_ENABLED}' is not valid."
    fi

    return 0
}

conf_default_x() {
    local X_RESOLUTION_X
    local X_RESOLUTION_Y
    local X_VIRTUAL_X
    local X_VIRTUAL_Y
    local X_DISPLAYSIZE_X
    local X_DISPLAYSIZE_Y

    if /usr/bin/test -e '/tmp/init.conf.x/conf_default_x' ; then
        return 0
    fi

    # The routine relies on MM_VIDEO_* variables.
    conf_default_video

    # X driver variables.
    if /usr/bin/test -z "${MM_X_DRIVER}"              ; then
        MM_X_DRIVER="`mm_hardware_pci_process mm_hardware_pci2x_map | /usr/bin/cut -d ' ' -f 1`"
        if /usr/bin/test -z "${MM_X_DRIVER}" ; then
            mm_message_output err "error: no supported video hardware found."
        fi
    fi

    # Default and check MM_X_OUTPUT_DVI, MM_X_OUTPUT_VGA and MM_X_OUTPUT_TV now that we know the X driver.
    if /usr/bin/test -z "${MM_X_OUTPUT_DVI}" ; then
        MM_X_OUTPUT_DVI='none'
    fi
    if /usr/bin/test -z "${MM_X_OUTPUT_VGA}" ; then
        MM_X_OUTPUT_VGA='none'
    fi
    if /usr/bin/test -z "${MM_X_OUTPUT_TV}"  ; then
        MM_X_OUTPUT_TV='none'
    fi
    if /usr/bin/test !    "${MM_X_OUTPUT_DVI}" = "none"                                  && \
       /usr/bin/test !    "${MM_X_OUTPUT_DVI}" = "auto"                                  && \
       ! /bin/echo ${MM_X_OUTPUT_DVI} | /bin/grep -q -e '^[0-9][0-9]*$' > /dev/null 2>&1 ; then
        mm_message_output err "error: MM_X_OUTPUT_DVI='${MM_X_OUTPUT_DVI}' is not valid."
    fi
    if /usr/bin/test !    "${MM_X_OUTPUT_VGA}" = "none"                                  && \
       /usr/bin/test !    "${MM_X_OUTPUT_VGA}" = "auto"                                  && \
       ! /bin/echo ${MM_X_OUTPUT_VGA} | /bin/grep -q -e '^[0-9][0-9]*$' > /dev/null 2>&1 ; then
        mm_message_output err "error: MM_X_OUTPUT_VGA='${MM_X_OUTPUT_VGA}' is not valid."
    fi
    if /usr/bin/test !    "${MM_X_OUTPUT_TV}" = "none"                                  && \
       /usr/bin/test !    "${MM_X_OUTPUT_TV}" = "auto"                                  && \
       ! /bin/echo ${MM_X_OUTPUT_TV} | /bin/grep -q -e '^[0-9][0-9]*$' > /dev/null 2>&1 ; then
        mm_message_output err "error: MM_X_OUTPUT_TV='${MM_X_OUTPUT_TV}' is not valid."
    fi
    if /usr/bin/test "${MM_X_OUTPUT_DVI}" = "none" &&
       /usr/bin/test "${MM_X_OUTPUT_VGA}" = "none" &&
       /usr/bin/test "${MM_X_OUTPUT_TV}"  = "none" ; then
        mm_message_output err "error: one of 'MM_X_OUTPUT_DVI', 'MM_X_OUTPUT_VGA' and 'MM_X_OUTPUT_TV' must be active." 
    fi
    case ${MM_X_DRIVER} in
        nvidia)
            # Make sure no more than one output is enabled.
            output_count=`/bin/echo "${MM_X_OUTPUT_DVI} ${MM_X_OUTPUT_VGA} ${MM_X_OUTPUT_TV}" | /bin/sed 's%none%%g' | /usr/bin/wc -w`
            if /usr/bin/test ${output_count} -gt 1 ; then
                mm_message_output err "error: only one of 'MM_X_OUTPUT_DVI', 'MM_X_OUTPUT_VGA' and 'MM_X_OUTPUT_TV' can be active."
            fi
            ;;
        via|via_pro)
            # Make sure that DVI and TV outputs are not enabled at the same time.
            if /usr/bin/test ! "${MM_X_OUTPUT_DVI}" = "none" &&
               /usr/bin/test ! "${MM_X_OUTPUT_TV}"  = "none" ; then
                mm_message_output err "error: only one of 'MM_X_OUTPUT_DVI' and 'MM_X_OUTPUT_TV' can be active."
            fi
            ;;
    esac

    # Default and check MM_X_TV_TYPE, MM_X_TV_OUTPUT and MM_X_TV_OVERSCAN now that we know the X driver.
    case ${MM_X_DRIVER} in
        nvidia)
            if /usr/bin/test -z "${MM_X_TV_TYPE}" ; then
                MM_X_TV_TYPE='NTSC-M';
            fi
            if /usr/bin/test ! "${MM_X_TV_TYPE}" = "PAL-B"   &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "PAL-D"   &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "PAL-G"   &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "PAL-H"   &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "PAL-I"   &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "PAL-K1"  &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "PAL-M"   &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "PAL-N"   &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "PAL-NC"  &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "NTSC-J"  &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "NTSC-M"  &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "HD480i"  &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "HD480p"  &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "HD720p"  &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "HD1080i" &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "HD1080p" &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "HD576i"  &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "HD576p"  ; then
                mm_message_output err "error: MM_X_TV_TYPE='${MM_X_TV_TYPE}' is not valid for MM_X_DRIVER='${MM_X_DRIVER}'."
            fi
            ;;
        via|via_pro)
            if /usr/bin/test -z "${MM_X_TV_TYPE}" ; then
                MM_X_TV_TYPE='NTSC';
            fi
            if /usr/bin/test ! "${MM_X_TV_TYPE}" = "PAL"   &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "NTSC"  &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "480P"  &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "575P"  &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "720P"  &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "1080I" ; then
                mm_message_output err "error: MM_X_TV_TYPE='${MM_X_TV_TYPE}' is not valid for MM_X_DRIVER='${MM_X_DRIVER}'."
            fi
            ;;
        *)
            if /usr/bin/test -z "${MM_X_TV_TYPE}" ; then
                MM_X_TV_TYPE='NTSC';
            fi
            if /usr/bin/test ! "${MM_X_TV_TYPE}" = "PAL"  &&
               /usr/bin/test ! "${MM_X_TV_TYPE}" = "NTSC" ; then
                mm_message_output err "error: MM_X_TV_TYPE='${MM_X_TV_TYPE}' is not valid for MM_X_DRIVER='${MM_X_DRIVER}'."
            fi
            ;;
    esac
    case ${MM_X_DRIVER} in
        nvidia)
            if /usr/bin/test -z "${MM_X_TV_OUTPUT}" ; then
                MM_X_TV_OUTPUT='AUTOSELECT'
            fi
            if /usr/bin/test ! "${MM_X_TV_OUTPUT}" = "AUTOSELECT" &&
               /usr/bin/test ! "${MM_X_TV_OUTPUT}" = "COMPOSITE"  &&
               /usr/bin/test ! "${MM_X_TV_OUTPUT}" = "SVIDEO"     &&
               /usr/bin/test ! "${MM_X_TV_OUTPUT}" = "COMPONENT"  &&
               /usr/bin/test ! "${MM_X_TV_OUTPUT}" = "SCART"      ; then
                mm_message_output err "error: MM_X_TV_OUTPUT='${MM_X_TV_OUTPUT}' is not valid for MM_X_DRIVER='${MM_X_DRIVER}'."
            fi
            ;;
        via|via_pro)
            if /usr/bin/test -z "${MM_X_TV_OUTPUT}" ; then
                MM_X_TV_OUTPUT='Composite'
            fi
            if /usr/bin/test ! "${MM_X_TV_OUTPUT}" = "Composite" && \
               /usr/bin/test ! "${MM_X_TV_OUTPUT}" = "S-Video"   && \
               /usr/bin/test ! "${MM_X_TV_OUTPUT}" = "SC"        && \
               /usr/bin/test ! "${MM_X_TV_OUTPUT}" = "RGP"       && \
               /usr/bin/test ! "${MM_X_TV_OUTPUT}" = "YCbCr"     ; then
                mm_message_output err "error: MM_X_TV_OUTPUT='${MM_X_TV_OUTPUT}' is not valid for MM_X_DRIVER='${MM_X_DRIVER}'."
            fi
            ;;
        *)
            if /usr/bin/test -z "${MM_X_TV_OUTPUT}" ; then
                MM_X_TV_OUTPUT='Composite'
            fi
            if /usr/bin/test ! "${MM_X_TV_OUTPUT}" = "Composite" ; then
                mm_message_output err "error: MM_X_TV_OUTPUT='${MM_X_TV_OUTPUT}' is not valid for MM_X_DRIVER='${MM_X_DRIVER}'."
            fi
            ;;
    esac
    case ${MM_X_DRIVER} in
        nvidia)
            if /usr/bin/test -z "${MM_X_TV_OVERSCAN}" ; then
                MM_X_TV_OVERSCAN='0.0'
            fi
            if ! /bin/echo ${MM_X_TV_OVERSCAN} | /bin/grep -q -e '^0\(\.[0-9]*\)\?$' > /dev/null 2>&1 &&
               ! /bin/echo ${MM_X_TV_OVERSCAN} | /bin/grep -q -e '^1\(\.0*\)\?$'     > /dev/null 2>&1 ; then
                mm_message_output err "error: MM_X_TV_OVERSCAN='${MM_X_TV_OVERSCAN}' is not valid for MM_X_DRIVER='${MM_X_DRIVER}'."
            fi
            ;;
        *)
            if /usr/bin/test -z "${MM_X_TV_OVERSCAN}" ; then
                MM_X_TV_OVERSCAN='0.0'
            fi
            if ! /bin/echo ${MM_X_TV_OVERSCAN} | /bin/grep -q -e '^0\(\.0*\)\?$' > /dev/null 2>&1 ; then
                mm_message_output err "error: MM_X_TV_OVERSCAN='${MM_X_TV_OVERSCAN}' is not valid for MM_X_DRIVER='${MM_X_DRIVER}'."
            fi
            ;;
    esac

    # X application variables.
    if /usr/bin/test -z "${MM_X_ENABLED}"          ; then
        MM_X_ENABLED='yes'
    fi
    if /usr/bin/test -z "${MM_X_WM_ENABLED}"       ; then
        MM_X_WM_ENABLED='yes'
    fi
    if /usr/bin/test -z "${MM_X_VNC_ENABLED}"      ; then
        MM_X_VNC_ENABLED='yes'
    fi
    if /usr/bin/test -z "${MM_X_SCREENSAVER}"      ; then
        MM_X_SCREENSAVER='none'
    fi
    if /usr/bin/test -z "${MM_X_SCREENSAVER_HACK}" ; then
        MM_X_SCREENSAVER_HACK='blank'
    fi
    if /usr/bin/test -z "${MM_X_MYTH_PROGRAM}"     ; then
        MM_X_MYTH_PROGRAM='mythfrontend'
    fi

    # X display variables.
    # Auto-configure MM_X_SYNC, MM_X_REFRESH and MM_X_MODE.
    /usr/bin/test "${MM_X_MODE}"   = "auto" && MM_X_MODE=''
    /usr/bin/test "${MM_X_MODE_0}" = "auto" && MM_X_MODE_0=''
    /usr/bin/test "${MM_X_MODE_1}" = "auto" && MM_X_MODE_1=''
    /usr/bin/test "${MM_X_MODE_2}" = "auto" && MM_X_MODE_2=''
    if /usr/bin/test "${MM_VIDEO_RESIZE_ENABLED}" = "yes" ; then
        case "${MM_VIDEO_ASPECT_RATIO}" in
            4:3)
                ;;
            16:9)
                case "${MM_X_TV_TYPE}" in
                    NTSC|NTSC-J|NTSC-M)
                        /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='58.0-62.0,118.0-122.0'
                        /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE="1280x720"
                        /usr/bin/test -z "${MM_X_MODE_0}"  && MM_X_MODE_0="1920x1080"
                        /usr/bin/test -z "${MM_X_MODE_1}"  && MM_X_MODE_1="1280x720"
                        /usr/bin/test -z "${MM_X_MODE_2}"  && MM_X_MODE_2="720x480"
                        ;;
                    PAL|PAL-B|PAL-D|PAL-G|PAL-H|PAL-I|PAL-K1|PAL-M|PAL-N|PAL-NC)
                        ;;
                    HD480i)
                        /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='58.0-62.0,118.0-122.0'
                        /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE="720x480"
                        /usr/bin/test -z "${MM_X_MODE_0}"  && MM_X_MODE_0="720x480"
                        /usr/bin/test -z "${MM_X_MODE_1}"  && MM_X_MODE_1="none"
                        /usr/bin/test -z "${MM_X_MODE_2}"  && MM_X_MODE_2="none"
                        ;;
                    480P|HD480p)
                        /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='58.0-62.0,118.0-122.0'
                        /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE="720x480"
                        /usr/bin/test -z "${MM_X_MODE_0}"  && MM_X_MODE_0="720x480"
                        /usr/bin/test -z "${MM_X_MODE_1}"  && MM_X_MODE_1="none"
                        /usr/bin/test -z "${MM_X_MODE_2}"  && MM_X_MODE_2="none"
                        ;;
                    720P|HD720p)
                        /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='58.0-62.0,118.0-122.0'
                        /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE="1280x720"
                        /usr/bin/test -z "${MM_X_MODE_0}"  && MM_X_MODE_0="1280x720"
                        /usr/bin/test -z "${MM_X_MODE_1}"  && MM_X_MODE_1="720x480"
                        /usr/bin/test -z "${MM_X_MODE_2}"  && MM_X_MODE_2="none"
                        ;;
                    1080I|HD1080i)
                        /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='58.0-62.0,118.0-122.0'
                        /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE="1280x720"
                        /usr/bin/test -z "${MM_X_MODE_0}"  && MM_X_MODE_0="1920x1080"
                        /usr/bin/test -z "${MM_X_MODE_1}"  && MM_X_MODE_1="1280x720"
                        /usr/bin/test -z "${MM_X_MODE_2}"  && MM_X_MODE_2="720x480"
                        ;;
                    HD1080p)
                        /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='58.0-62.0,118.0-122.0'
                        /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE="1280x720"
                        /usr/bin/test -z "${MM_X_MODE_0}"  && MM_X_MODE_0="1920x1080"
                        /usr/bin/test -z "${MM_X_MODE_1}"  && MM_X_MODE_1="1280x720"
                        /usr/bin/test -z "${MM_X_MODE_2}"  && MM_X_MODE_2="720x480"
                        ;;
                    HD576i)
                        ;;
                    576P|HD576p)
                        ;;
                esac
                ;;
            *)
                ;;
        esac
    fi
    if   /usr/bin/test ! "${MM_X_OUTPUT_DVI}" = "none" ; then
        # Use default MythTV size.
        case ${MM_VIDEO_ASPECT_RATIO} in
            4:3)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='60.0'
                /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE='800x600'
                ;;
            16:9)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='60.0'
                /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE='1280x720'
                ;;
            *)
                mm_message_output err "error: the 'x' init script does not understand MM_VIDEO_ASPECT_RATIO='${MM_VIDEO_ASPECT_RATIO}'."
                ;;
        esac
    elif /usr/bin/test ! "${MM_X_OUTPUT_VGA}" = "none" ; then
        # Use default MythTV size.
        case ${MM_VIDEO_ASPECT_RATIO} in
            4:3)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='60.0'
                /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE='800x600'
                ;;
            16:9)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='60.0'
                /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE='1280x720'
                ;;
            *)
                mm_message_output err "error: the 'x' init script does not understand MM_VIDEO_ASPECT_RATIO='${MM_VIDEO_ASPECT_RATIO}'."
                ;;
        esac
    elif /usr/bin/test ! "${MM_X_OUTPUT_TV}"  = "none" ; then
        MM_X_REFRESH=
        case "${MM_X_TV_TYPE}" in
            NTSC|NTSC-J|NTSC-M)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='60.0'
                /usr/bin/test -z "${MM_X_MODE}" &&
                    case ${MM_X_DRIVER} in
                        via|via_pro) MM_X_MODE='720x480Noscale' ;;
                        *)           MM_X_MODE='720x480'        ;;
                    esac
                ;;
            PAL|PAL-B|PAL-D|PAL-G|PAL-H|PAL-I|PAL-K1|PAL-M|PAL-N|PAL-NC)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='50.0'
                /usr/bin/test -z "${MM_X_MODE}" &&
                    case ${MM_X_DRIVER} in
                        via|via_pro) MM_X_MODE='720x576Noscale' ;;
                        *)           MM_X_MODE='720x576'        ;;
                    esac
                ;;
            HD480i)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='60.0'
                /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE='720x480'
                ;;
            480P|HD480p)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='60.0'
                /usr/bin/test -z "${MM_X_MODE}"    &&
                    case ${MM_X_DRIVER} in
                        via|via_pro) MM_X_MODE='720x480Fit' ;;
                        *)           MM_X_MODE='720x480'    ;;
                    esac
                ;;
            720P|HD720p)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='60.0'
                /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE='1280x720'
                ;;
            1080I|HD1080i)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='60.0'
                /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE='1920x1080'
                ;;
            HD1080p)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='60.0'
                /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE='1920x1080'
                ;;
            HD576i)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='50.0'
                /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE='852x576'
                ;;
            576P|HD576p)
                /usr/bin/test -z "${MM_X_SYNC}"    && MM_X_SYNC='10.0-70.0'
                /usr/bin/test -z "${MM_X_REFRESH}" && MM_X_REFRESH='50.0'
                /usr/bin/test -z "${MM_X_MODE}"    && MM_X_MODE='852x576'
                ;;
            *)
                mm_message_output err "error: the 'x' init script does not understand MM_X_TV_TYPE='${MM_X_TV_TYPE}'."
                ;;
        esac
    fi

    # Auto-configure (or override) MM_X_MODE based on MM_X_MODELINE.
    if /usr/bin/test -n "${MM_X_MODELINE}" ; then
        if ! /bin/echo ${MM_X_MODELINE} | /bin/grep -q -e '^[Mm][Oo][Dd][Ee][Ll][Ii][Nn][Ee]  *"[0-9][0-9]*[Xx][0-9][^"]*".*' > /dev/null 2>&1 ; then
            mm_message_output err "error: 'MM_X_MODELINE' format is not valid."
        fi
        MM_X_MODE=`/bin/echo ${MM_X_MODELINE} | /bin/sed 's%^[Mm][Oo][Dd][Ee][Ll][Ii][Nn][Ee]  *"\([0-9][0-9]*[Xx][0-9][^"]*\)".*%\1%'`
    fi
    if /usr/bin/test -n "${MM_X_MODELINE_0}" ; then
        if ! /bin/echo ${MM_X_MODELINE_0} | /bin/grep -q -e '^[Mm][Oo][Dd][Ee][Ll][Ii][Nn][Ee]  *"[0-9][0-9]*[Xx][0-9][^"]*".*' > /dev/null 2>&1 ; then
            mm_message_output err "error: 'MM_X_MODELINE_0' format is not valid."
        fi
        MM_X_MODE_0=`/bin/echo ${MM_X_MODELINE_0} | /bin/sed 's%^[Mm][Oo][Dd][Ee][Ll][Ii][Nn][Ee]  *"\([0-9][0-9]*[Xx][0-9][^"]*\)".*%\1%'`
    fi
    if /usr/bin/test -n "${MM_X_MODELINE_1}" ; then
        if ! /bin/echo ${MM_X_MODELINE_1} | /bin/grep -q -e '^[Mm][Oo][Dd][Ee][Ll][Ii][Nn][Ee]  *"[0-9][0-9]*[Xx][0-9][^"]*".*' > /dev/null 2>&1 ; then
            mm_message_output err "error: 'MM_X_MODELINE_1' format is not valid."
        fi
        MM_X_MODE_1=`/bin/echo ${MM_X_MODELINE_1} | /bin/sed 's%^[Mm][Oo][Dd][Ee][Ll][Ii][Nn][Ee]  *"\([0-9][0-9]*[Xx][0-9][^"]*\)".*%\1%'`
    fi
    if /usr/bin/test -n "${MM_X_MODELINE_2}" ; then
        if ! /bin/echo ${MM_X_MODELINE_2} | /bin/grep -q -e '^[Mm][Oo][Dd][Ee][Ll][Ii][Nn][Ee]  *"[0-9][0-9]*[Xx][0-9][^"]*".*' > /dev/null 2>&1 ; then
            mm_message_output err "error: 'MM_X_MODELINE_2' format is not valid."
        fi
        MM_X_MODE_2=`/bin/echo ${MM_X_MODELINE_2} | /bin/sed 's%^[Mm][Oo][Dd][Ee][Ll][Ii][Nn][Ee]  *"\([0-9][0-9]*[Xx][0-9][^"]*\)".*%\1%'`
    fi

    # Auto-configure (or override) MM_X_MODE and MM_X_MODELINE based on MM_X_RESOLUTION.
    if /usr/bin/test -n "${MM_X_RESOLUTION}" ; then
        if ! /bin/echo ${MM_X_RESOLUTION} | /bin/grep -q -e '^[0-9][0-9]*x[0-9][0-9]*' > /dev/null 2>&1 ; then
            mm_message_output err "error: 'MM_X_RESOLUTION' format is not valid."
        fi
        X_RESOLUTION_X=`/bin/echo ${MM_X_RESOLUTION} | /bin/sed -e 's%^\([0-9][0-9]*\)x\([0-9][0-9]*\)$%\1%'`
        X_RESOLUTION_Y=`/bin/echo ${MM_X_RESOLUTION} | /bin/sed -e 's%^\([0-9][0-9]*\)x\([0-9][0-9]*\)$%\2%'`
        MM_X_MODELINE=`/usr/bin/gtf ${X_RESOLUTION_X} ${X_RESOLUTION_Y} ${MM_X_REFRESH} | /bin/sed 's% *#.*%%'`
        MM_X_MODELINE=`/bin/echo ${MM_X_MODELINE}`
        MM_X_MODE=`/bin/echo ${MM_X_MODELINE} | /bin/sed 's%^[Mm][Oo][Dd][Ee][Ll][Ii][Nn][Ee]  *"\([0-9][0-9]*[Xx][0-9][^"]*\)".*%\1%'`
    fi

    # Auto-configure MM_X_RESOLUTION based on MM_X_MODE.
    if /usr/bin/test -z "${MM_X_RESOLUTION}" ; then
        if ! /bin/echo ${MM_X_MODE} | /bin/grep -q -e '^[0-9][0-9]*[Xx][0-9].*' > /dev/null 2>&1 ; then
            mm_message_output err "error: 'MM_X_MODE' format is not valid."
        fi
        MM_X_RESOLUTION=`/bin/echo ${MM_X_MODE} | /bin/sed -e 's%^\([0-9][0-9]*\)[Xx]\([0-9][0-9]*\).*%\1x\2%'`
    fi

    # Auto-configure MM_X_VIRTUAL based on MM_X_MODE.
    if /usr/bin/test -z "${MM_X_VIRTUAL}" ; then
        X_VIRTUAL_X=0
        X_VIRTUAL_Y=0
        if /usr/bin/test ! -z "${MM_X_MODE}"   && /usr/bin/test ! "${MM_X_MODE}"   = "none" ; then
            X_RESOLUTION_X=`/bin/echo ${MM_X_MODE}     | /bin/sed -e 's%^\([0-9][0-9]*\)[Xx]\([0-9][0-9]*\).*%\1%'`
            X_RESOLUTION_Y=`/bin/echo ${MM_X_MODE}     | /bin/sed -e 's%^\([0-9][0-9]*\)[Xx]\([0-9][0-9]*\).*%\2%'`
            if /usr/bin/test ${X_VIRTUAL_X} -lt ${X_RESOLUTION_X} ; then
                X_VIRTUAL_X=${X_RESOLUTION_X}
            fi
            if /usr/bin/test ${X_VIRTUAL_Y} -lt ${X_RESOLUTION_Y} ; then
                X_VIRTUAL_Y=${X_RESOLUTION_Y}
            fi
        fi
        if /usr/bin/test ! -z "${MM_X_MODE_0}" && /usr/bin/test ! "${MM_X_MODE_0}" = "none" ; then
            X_RESOLUTION_X=`/bin/echo ${MM_X_MODE_0} | /bin/sed -e 's%^\([0-9][0-9]*\)[Xx]\([0-9][0-9]*\).*%\1%'`
            X_RESOLUTION_Y=`/bin/echo ${MM_X_MODE_0} | /bin/sed -e 's%^\([0-9][0-9]*\)[Xx]\([0-9][0-9]*\).*%\2%'`
            if /usr/bin/test ${X_VIRTUAL_X} -lt ${X_RESOLUTION_X} ; then
                X_VIRTUAL_X=${X_RESOLUTION_X}
            fi
            if /usr/bin/test ${X_VIRTUAL_Y} -lt ${X_RESOLUTION_Y} ; then
                X_VIRTUAL_Y=${X_RESOLUTION_Y}
            fi
        fi
        if /usr/bin/test ! -z "${MM_X_MODE_1}" && /usr/bin/test ! "${MM_X_MODE_1}" = "none" ; then
            X_RESOLUTION_X=`/bin/echo ${MM_X_MODE_1} | /bin/sed -e 's%^\([0-9][0-9]*\)[Xx]\([0-9][0-9]*\).*%\1%'`
            X_RESOLUTION_Y=`/bin/echo ${MM_X_MODE_1} | /bin/sed -e 's%^\([0-9][0-9]*\)[Xx]\([0-9][0-9]*\).*%\2%'`
            if /usr/bin/test ${X_VIRTUAL_X} -lt ${X_RESOLUTION_X} ; then
                X_VIRTUAL_X=${X_RESOLUTION_X}
            fi
            if /usr/bin/test ${X_VIRTUAL_Y} -lt ${X_RESOLUTION_Y} ; then
                X_VIRTUAL_Y=${X_RESOLUTION_Y}
            fi
        fi
        if /usr/bin/test ! -z "${MM_X_MODE_2}" && /usr/bin/test ! "${MM_X_MODE_2}" = "none" ; then
            X_RESOLUTION_X=`/bin/echo ${MM_X_MODE_2} | /bin/sed -e 's%^\([0-9][0-9]*\)[Xx]\([0-9][0-9]*\).*%\1%'`
            X_RESOLUTION_Y=`/bin/echo ${MM_X_MODE_2} | /bin/sed -e 's%^\([0-9][0-9]*\)[Xx]\([0-9][0-9]*\).*%\2%'`
            if /usr/bin/test ${X_VIRTUAL_X} -lt ${X_RESOLUTION_X} ; then
                X_VIRTUAL_X=${X_RESOLUTION_X}
            fi
            if /usr/bin/test ${X_VIRTUAL_Y} -lt ${X_RESOLUTION_Y} ; then
                X_VIRTUAL_Y=${X_RESOLUTION_Y}
            fi
        fi
        MM_X_VIRTUAL="${X_VIRTUAL_X}x${X_VIRTUAL_Y}"
    fi

    # Auto-configure MM_X_DISPLAYSIZE based on MM_X_VIRTUAL.
    if /usr/bin/test -z "${MM_X_DISPLAYSIZE}" || /usr/bin/test "${MM_X_DISPLAYSIZE}" = "auto" ; then
        X_VIRTUAL_X=`/bin/echo ${MM_X_VIRTUAL} | /bin/sed -e 's%^\([0-9][0-9]*\)[Xx]\([0-9][0-9]*\).*%\1%'`
        X_VIRTUAL_Y=`/bin/echo ${MM_X_VIRTUAL} | /bin/sed -e 's%^\([0-9][0-9]*\)[Xx]\([0-9][0-9]*\).*%\2%'`

        # MythTV is reported to work best at 100dots/inch.
        # (100dots/inch) / (25.4inch/mm) ~ 4dots/mm
        # Y in mm = (Y in dots) / (4dots/mm)
        # Make Y a multiple of 3 (for 4:3) or 9 (for 16:9) so that X will be a whole number.
        X_DISPLAYSIZE_Y=
        X_DISPLAYSIZE_X=
        MM_X_DISPLAYSIZE=
        if /usr/bin/test ! ${MM_VIDEO_FONT_SCALE} -gt 0 ; then
            mm_message_output err "error: the 'x' init script does not understand MM_VIDEO_FONT_SCALE='${MM_VIDEO_FONT_SCALE}'."
        fi
        case ${MM_VIDEO_ASPECT_RATIO} in
            4:3)
                X_DISPLAYSIZE_Y=$(($(($((${X_VIRTUAL_Y} * 100 / ${MM_VIDEO_FONT_SCALE} / 4)) / 3)) * 3))
                X_DISPLAYSIZE_X=$((${X_DISPLAYSIZE_Y} *  4 / 3))
                MM_X_DISPLAYSIZE=${X_DISPLAYSIZE_X}x${X_DISPLAYSIZE_Y}
                ;;
            16:9)
                X_DISPLAYSIZE_Y=$(($(($((${X_VIRTUAL_Y} * 100 / ${MM_VIDEO_FONT_SCALE} / 4)) / 9)) * 9))
                X_DISPLAYSIZE_X=$((${X_DISPLAYSIZE_Y} * 16 / 9))
                MM_X_DISPLAYSIZE=${X_DISPLAYSIZE_X}x${X_DISPLAYSIZE_Y}
                ;;
            *)
                mm_message_output err "error: the 'x' init script does not understand MM_VIDEO_ASPECT_RATIO='${MM_VIDEO_ASPECT_RATIO}'."
                ;;
        esac
    fi

    # Convert single valued MM_X_SYNC values to small range.
    if /bin/echo ${MM_X_SYNC} | /bin/grep -q -e '^[0-9][0-9]*\(\.[0-9]*\)\?$' > /dev/null 2>&1 ; then
        if /bin/echo ${MM_X_SYNC} | /bin/grep -q -e '^[0-9][0-9]*$' > /dev/null 2>&1 ; then
            MM_X_SYNC="${MM_X_SYNC}.0"
        fi
        MM_X_SYNC_M=`/bin/echo ${MM_X_SYNC} | /usr/bin/cut -d . -f 1`
        MM_X_SYNC_N=`/bin/echo ${MM_X_SYNC} | /usr/bin/cut -d . -f 2`
        MM_X_SYNC="$((${MM_X_SYNC_M}-2)).${MM_X_SYNC_N}-$((${MM_X_SYNC_M}+2)).${MM_X_SYNC_N}"
    fi

    # Convert single valued MM_X_REFRESH values to small range.
    if /bin/echo ${MM_X_REFRESH} | /bin/grep -q -e '^[0-9][0-9]*\(\.[0-9]*\)\?$' > /dev/null 2>&1 ; then
        if /bin/echo ${MM_X_REFRESH} | /bin/grep -q -e '^[0-9][0-9]*$' > /dev/null 2>&1 ; then
            MM_X_REFRESH="${MM_X_REFRESH}.0"
        fi
        MM_X_REFRESH_M=`/bin/echo ${MM_X_REFRESH} | /usr/bin/cut -d . -f 1`
        MM_X_REFRESH_N=`/bin/echo ${MM_X_REFRESH} | /usr/bin/cut -d . -f 2`
        MM_X_REFRESH="$((${MM_X_REFRESH_M}-2)).${MM_X_REFRESH_N}-$((${MM_X_REFRESH_M}+2)).${MM_X_REFRESH_N}"
    fi

    MM_X_SYNC="HorizSync ${MM_X_SYNC}"
    MM_X_REFRESH="VertRefresh ${MM_X_REFRESH}"

    /bin/mkdir -p '/tmp/init.conf.x'
    /bin/touch    '/tmp/init.conf.x/conf_default_x'

    # Default hack variables.
    if /usr/bin/test -z "${MM_X_HACK_HIDE_BLUE_LINE_ENABLED}" ; then
        MM_X_HACK_HIDE_BLUE_LINE_ENABLED='no'
    fi

    # Default fetch variables.
    if /usr/bin/test -z "${MM_X_FETCH_XINITRC}"   ; then
        MM_X_FETCH_XINITRC='no'
    fi
    if /usr/bin/test -z "${MM_X_FETCH_XORG_CONF}" ; then
        MM_X_FETCH_XORG_CONF='no'
    fi

    return 0
}

conf_write_x() {
    local conf_file=$1

    conf_variable_write "${conf_file}" MM_X_DRIVER                      "${MM_X_DRIVER}"

    conf_variable_write "${conf_file}" MM_X_ENABLED                     "${MM_X_ENABLED}"
    conf_variable_write "${conf_file}" MM_X_WM_ENABLED                  "${MM_X_WM_ENABLED}"
    conf_variable_write "${conf_file}" MM_X_VNC_ENABLED                 "${MM_X_VNC_ENABLED}"
    conf_variable_write "${conf_file}" MM_X_SCREENSAVER                 "${MM_X_SCREENSAVER}"
    conf_variable_write "${conf_file}" MM_X_SCREENSAVER_HACK            "${MM_X_SCREENSAVER_HACK}"
    conf_variable_write "${conf_file}" MM_X_MYTH_PROGRAM                "${MM_X_MYTH_PROGRAM}"

    conf_variable_write "${conf_file}" MM_X_OUTPUT_DVI                  "${MM_X_OUTPUT_DVI}"
    conf_variable_write "${conf_file}" MM_X_OUTPUT_VGA                  "${MM_X_OUTPUT_VGA}"
    conf_variable_write "${conf_file}" MM_X_OUTPUT_TV                   "${MM_X_OUTPUT_TV}"

    conf_variable_write "${conf_file}" MM_X_TV_TYPE                     "${MM_X_TV_TYPE}"
    conf_variable_write "${conf_file}" MM_X_TV_OUTPUT                   "${MM_X_TV_OUTPUT}"
    conf_variable_write "${conf_file}" MM_X_TV_OVERSCAN                 "${MM_X_TV_OVERSCAN}"

    conf_variable_write "${conf_file}" MM_X_SYNC                        "${MM_X_SYNC}"
    conf_variable_write "${conf_file}" MM_X_REFRESH                     "${MM_X_REFRESH}"
    conf_variable_write "${conf_file}" MM_X_RESOLUTION                  "${MM_X_RESOLUTION}"
    conf_variable_write "${conf_file}" MM_X_MODELINE                    "${MM_X_MODELINE}"
    conf_variable_write "${conf_file}" MM_X_MODELINE_0                  "${MM_X_MODELINE_0}"
    conf_variable_write "${conf_file}" MM_X_MODELINE_1                  "${MM_X_MODELINE_1}"
    conf_variable_write "${conf_file}" MM_X_MODELINE_2                  "${MM_X_MODELINE_2}"
    conf_variable_write "${conf_file}" MM_X_MODE                        "${MM_X_MODE}"
    conf_variable_write "${conf_file}" MM_X_MODE_0                      "${MM_X_MODE_0}"
    conf_variable_write "${conf_file}" MM_X_MODE_1                      "${MM_X_MODE_1}"
    conf_variable_write "${conf_file}" MM_X_MODE_2                      "${MM_X_MODE_2}"
    conf_variable_write "${conf_file}" MM_X_VIRTUAL                     "${MM_X_VIRTUAL}"
    conf_variable_write "${conf_file}" MM_X_DISPLAYSIZE                 "${MM_X_DISPLAYSIZE}"

    conf_variable_write "${conf_file}" MM_X_HACK_HIDE_BLUE_LINE_ENABLED "${MM_X_HACK_HIDE_BLUE_LINE_ENABLED}"

    conf_variable_write "${conf_file}" MM_X_FETCH_XINITRC               "${MM_X_FETCH_XINITRC}"
    conf_variable_write "${conf_file}" MM_X_FETCH_XORG_CONF             "${MM_X_FETCH_XORG_CONF}"

    return 0
}

conf_fetch_x() {
    if /usr/bin/test "${MM_X_FETCH_XINITRC}"   = "yes" ; then
        /bin/rm -f /etc/X11/xinit/xinitrc
        mm_conf_get /xinitrc /etc/X11/xinit/xinitrc
        if /usr/bin/test ! -e /etc/X11/xinit/xinitrc ; then
            mm_message_output err "error: failed to fetch 'minimyth.script' file."
        fi
    fi
    if /usr/bin/test "${MM_X_FETCH_XORG_CONF}" = "yes" ; then
        /bin/rm -f /etc/X11/xorg.conf
        mm_conf_get /xorg.conf /etc/X11/xorg.conf
        if /usr/bin/test ! -e /etc/X11/xorg.conf ; then
            mm_message_output err "error: failed to fetch 'minimyth.script' file."
        fi
    fi

    return 0
}
