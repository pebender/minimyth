#!/usr/bin/perl

use strict;
use warnings;

use File::Basename ();
use MiniMyth ();

my $minimyth = new MiniMyth;

my $program      = File::Basename::basename(__FILE__);
my $game_console = shift;
my $game_file    = shift;

################################################################################
# Game console emulator configurations.
################################################################################
my %emulator = ();
{
    my $home         = $ENV{'HOME'};
    my $bios_root    = $minimyth->var_get('MM_GAME_BIOS_ROOT');
    my $resolution_x = 0;
    my $resolution_y = 0;
    if (($resolution_x == 0) || ($resolution_y == 0))
    {
        if (open(FILE, '-|', q(/usr/bin/xrandr --query)))
        {
            foreach my $resolution (grep(/\* *$/, <FILE>))
            {
                if ($resolution =~ / *([[:digit:]]+)x([[:digit:]]+) /)
                {
                    $resolution_x = $1;
                    $resolution_y = $2;
                    last;
                }
            }
            close(FILE);
        }
    }
    if (($resolution_x == 0) || ($resolution_y == 0))
    {
        if ($minimyth->var_get('MM_X_MODE') =~ /^([0-9]+)x([0-9]+)[^0-9]*$/)
        {
            $resolution_x = $1;
            $resolution_y = $2;
        }
    }

    $emulator{'fceu'} =
    {
        'program'  => '/usr/bin/fceu',
        'argument' => [
                        "-xres $resolution_x",
                        "-yres $resolution_y",
                        '-stretchx 1',
                        '-stretchy 1',
                        '-opengl 1',
                        '-fs 1',
                        '-sound 1',
                        '-soundrate 48000',
                        '-soundvol 100',
                        '-soundq 1',
                        '-soundbufsize 24',
                        '-input1 gamepad',
                        '-input2 gamepad'
                      ]
    };
    $emulator{'jzintv'} =
    {
        'program'  => '/usr/bin/jzintv',
        'argument' => [
                        (-e "$bios_root/intv/exec.bin" ) ? "--execimg=$bios_root/intv/exec.bin"      : '',
                        (-e "$bios_root/intv/grom.bin" ) ? "--gromimg=$bios_root/intv/grom.bin"      : '',
                        (-e "$bios_root/intv/ecs.bin"  ) ? "--ecsimg=$bios_root/intv/ecs.bin"        : '',
                        '--fullscreen=1',
                        (-e "$home/.jzintv/kbdhackfile") ? "--kbdhackfile=$home/.jzintv/kbdhackfile" : '',
                      ]
    };
    $emulator{'mednafen'} =
    {
        'program'  => '/usr/bin/mednafen',
        'argument' => [
                        '-fs 1',
                        '-gb.stretch 1',
                        "-gb.xres $resolution_x",
                        "-gb.yres $resolution_y",
                      ]
    };
    $emulator{'stella'} =
    {
        'program'  => '/usr/bin/stella',
        'argument' => [
                        '-video gl',
                        '-gl_fsmax 1',
                        '-fullscreen 1',
                        '-scale_tia zoom1x',
                        '-scale_ui zoom1x',
                        '-center 1',
                        '-sound 1',
                        '-channels 2',
                        '-freq 48000',
                        '-volume 100',
                        '-clipvol 1'
                      ]
    };
    $emulator{'VisualBoyAdvance'} =
    {
        'program'  => '/usr/bin/VisualBoyAdvance',
        'argument' => [
                        '--fullscreen',
                        '--no-debug'
                      ]
    };
}

################################################################################
# Game console configurations.
################################################################################
my %console = ();
{
    $console{'a2600'} =
    {
        'description' => 'Atari 2600',
        'emulator'    => [
                           $emulator{'stella'}
                         ]
    };
    $console{'cgb'} =
    {
        'description' => 'Color Game Boy',
        'emulator'    => [
                           $emulator{'VisualBoyAdvance'},
                           $emulator{'mednafen'}
                         ]
    };
    $console{'gb'} =
    {
        'description' => 'Game Boy',
        'emulator'    => [
                           $emulator{'VisualBoyAdvance'},
                           $emulator{'mednafen'}
                         ]
    };
    $console{'gba'} =
    {
        'description' => 'Game Boy Advance',
        'emulator'    => [
                           $emulator{'VisualBoyAdvance'},
                           $emulator{'mednafen'}
                         ]
    };
    $console{'intv'} =
    {
        'description' => 'Intellivision',
        'emulator'    => [
                           $emulator{'jzintv'}
                         ]
    };
    $console{'nes'} =
    {
        'description' => 'Nintendo Entertainment System',
        'emulator'    => [
                           $emulator{'fceu'},
                           $emulator{'mednafen'}
                         ]
    };
}
    
################################################################################
# Usage.
################################################################################
sub usage()
{
    my @usage = ();

    push(@usage, '');
    push(@usage, 'usage:');
    push(@usage, '  mm_mythgame_start <game_console> <game_file>');
    push(@usage, '');
    push(@usage, 'where:');
    push(@usage, '  <game_console>:');
    push(@usage, '    The game console.');
    push(@usage, '    Valid game consoles are:');
    my $width = 0;
    foreach (sort keys %console)
    {
        if ($width < length($_)) { $width = length($_); }
    }
    foreach (sort keys %console)
    {
        my $line = '';
        $line .= ' ' x 6;
        $line .= $_;
        $line .= ' ' x ($width - length($_) + 1);
        $line .= ':';
        $line .= ' ';
        $line .= $console{$_}->{'description'};
        push(@usage, $line);
    }
    push(@usage, '  <game_file>:');
    push(@usage, '    The game file.');
    push(@usage, '');

    return \@usage;
}

################################################################################
# Check arguments.
################################################################################
if ((! defined($game_console)) || (! $game_console))
{
    die join("\n", '', "error: game console missing.",                  '', @{usage()}) . "\n";
}
if (! exists($console{$game_console}))
{
    die join("\n", '', "error: game console $game_console is unknown.", '', @{usage()}) . "\n";
}
if ((! defined($game_file)) || (! $game_file))
{
    die join("\n", '', "error: game file missing.",                     '', @{usage()}) . "\n";
}
if (! -e $game_file)
{
    die join("\n", '', "error: game file $game_file does not exist.",   '', @{usage()}) . "\n";
}
if (! -f $game_file)
{
    die join("\n", '', "error: game file $game_file is not a file.",    '', @{usage()}) . "\n";
}
if (! -r $game_file)
{
    die join("\n", '', "error: game file $game_file cannot be read.",   '', @{usage()}) . "\n";
}

################################################################################
# Run emulator.
################################################################################
{
    my $emulator = undef;

    # Find the emulator.
    foreach (@{$console{$game_console}->{'emulator'}})
    {
        if (-e $_->{'program'})
        {
            $emulator = $_;
            last;
        }
    }
    if (! defined($emulator))
    {
        die join("\n", '', "error: console name $game_console has no valid emulator.",  '', @{usage()}) . "\n";
    }

    # Run the emulator with the screen saver deactivated.
    system(join(' ', '/usr/bin/mm_run_without_ss', $emulator->{'program'}, @{$emulator->{'argument'}}, qq('$game_file')));

    # Save game settings.
    if ($minimyth->var_get('MM_GAME_SAVE_ENABLED') eq 'yes')
    {
        system(qq(/usr/bin/mm_term_start /usr/bin/mm_command game_save));
    }
}

1;
