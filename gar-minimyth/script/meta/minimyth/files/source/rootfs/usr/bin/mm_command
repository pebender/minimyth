#!/usr/bin/perl

use strict;
use warnings;
use feature "switch";

use Class::Inspector ();
use MiniMyth ();

my $minimyth = new MiniMyth;
$minimyth->var_load();

sub output
{
    my $level = shift;
    my $value = shift;
    my $key   = shift;

    if (defined($value))
    {
        given (ref($value))
        {
            when (/^$/)
            {
                print ' ' x (4 * $level);
                if (defined($key))
                {
                    print "$key => ";
                }
                print "$value";
                print "\n";
            }
            when (/^ARRAY$/)
            {
                if (defined($key))
                {
                    print ' ' x (4 * $level);
                    print "$key => ";
                }
                print ' ' x (4 * $level);
                print '[';
                print "\n";
                foreach (@{$value})
                {
                    output($level + 1, $_);
                }
                print ' ' x (4 * $level);
                print ']';
                print "\n";
            }
            when (/^HASH$/)
            {
                if (defined($key))
                {
                    print ' ' x (4 * $level);
                    print "$key => ";
                }
                print ' ' x (4 * $level);
                print '{';
                print "\n";
                foreach (sort(keys(%{$value})))
                {
                    output($level + 1, $value->{$_}, $_);
                }
                print ' ' x (4 * $level);
                print '}';
                print "\n";
            }
        }
    }
}

sub usage
{

    my @usage = ();

    push(@usage, "");
    push(@usage, "usage:");
    push(@usage, "  mm_command command [command_args ...]");
    push(@usage, "");
    push(@usage, "  where 'command' is one of the MiniMyth perl package methods and");
    push(@usage, "  'command_args' are the arguments for that MiniMyth perl package method. Note");
    push(@usage, "  that MiniMyth perl package methods that arguments other than integers and");
    push(@usage, "  strings will not work correctly.");
    push(@usage, "");

    push(@usage, "MiniMyth perl package methods:");
    my $methods = Class::Inspector->methods( 'MiniMyth', 'public' );
    foreach (@{$methods})
    {
       if (! m/(destroy|new)/i)
       {
           push(@usage, "  $_");
       }
    }
    push(@usage, "");

    return \@usage;
}

my $command = shift;

if ((! defined($command)) || (! $command))
{
    die join("\n", @{usage()}) . "\n";
}

my @result = $minimyth->$command(@ARGV);
if ($#result == 0)
{                       
    output(0, $result[0]);
}                          
else     
{                      
    output(0, \@result);
}   

1;
