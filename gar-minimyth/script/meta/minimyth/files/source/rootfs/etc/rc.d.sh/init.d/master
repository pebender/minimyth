#!/bin/sh
################################################################################
# master
#
# This script configures MythTV master backend communication.
################################################################################
. /etc/rc.d.sh/functions

start() {

    local HOSTNAME
    local MASTER_WOL_BROADCAST
    local WOLSqlConnectRetry
    local WOLSqlReconnectWaitTime
    local WOLSqlCommand
    local WOLSqlConnectAttempt
    local WOL_Additional_Delay

    mm_message_output info "configuring MythTV master backend communication ..."

    HOSTNAME=`mm_hostname`

    # Determine broadcast address.
    MASTER_WOL_BROADCAST=`/sbin/ifconfig ${MM_NETWORK_INTERFACE} | /bin/grep ' Bcast:' | /bin/sed 's%.* Bcast:\([^ ]*\) .*%\1%'`

    # Configure config.xml file.
    mm_file_replace_variable '/home/minimyth/.mythtv/config.xml' '@MM_HOSTNAME@'          "${HOSTNAME}"
    mm_file_replace_variable '/home/minimyth/.mythtv/config.xml' '@MM_MASTER_SERVER@'     "${MM_MASTER_SERVER}"
    mm_file_replace_variable '/home/minimyth/.mythtv/config.xml' '@MM_MASTER_DBUSERNAME@' "${MM_MASTER_DBUSERNAME}"
    mm_file_replace_variable '/home/minimyth/.mythtv/config.xml' '@MM_MASTER_DBPASSWORD@' "${MM_MASTER_DBPASSWORD}"
    mm_file_replace_variable '/home/minimyth/.mythtv/config.xml' '@MM_MASTER_DBNAME@'     "${MM_MASTER_DBNAME}"

    # Configure mysql.txt file.
    mm_file_replace_variable '/home/minimyth/.mythtv/mysql.txt' '@MM_HOSTNAME@'          "${HOSTNAME}"
    mm_file_replace_variable '/home/minimyth/.mythtv/mysql.txt' '@MM_MASTER_SERVER@'     "${MM_MASTER_SERVER}"
    mm_file_replace_variable '/home/minimyth/.mythtv/mysql.txt' '@MM_MASTER_DBUSERNAME@' "${MM_MASTER_DBUSERNAME}"
    mm_file_replace_variable '/home/minimyth/.mythtv/mysql.txt' '@MM_MASTER_DBPASSWORD@' "${MM_MASTER_DBPASSWORD}"
    mm_file_replace_variable '/home/minimyth/.mythtv/mysql.txt' '@MM_MASTER_DBNAME@'     "${MM_MASTER_DBNAME}"
    if /usr/bin/test "${MM_MASTER_WOL_ENABLED}" = "yes" ; then
        mm_file_replace_variable '/home/minimyth/.mythtv/mysql.txt' '@MM_MASTER_WOL_FALSE@' '\#'
        mm_file_replace_variable '/home/minimyth/.mythtv/mysql.txt' '@MM_MASTER_WOL_TRUE@'  ''
    else
        mm_file_replace_variable '/home/minimyth/.mythtv/mysql.txt' '@MM_MASTER_WOL_FALSE@' ''
        mm_file_replace_variable '/home/minimyth/.mythtv/mysql.txt' '@MM_MASTER_WOL_TRUE@'  '\#%'
    fi
    mm_file_replace_variable '/home/minimyth/.mythtv/mysql.txt' '@MM_MASTER_WOLSQLRECONNECTWAITTIME@' "${MM_MASTER_WOLSQLRECONNECTWAITTIME}"
    mm_file_replace_variable '/home/minimyth/.mythtv/mysql.txt' '@MM_MASTER_WOLSQLCONNECTRETRY@'      "${MM_MASTER_WOLSQLCONNECTRETRY}"
    mm_file_replace_variable '/home/minimyth/.mythtv/mysql.txt' '@MM_MASTER_WOLSQLCOMMAND@'           "${MM_MASTER_WOLSQLCOMMAND}"
    mm_file_replace_variable '/home/minimyth/.mythtv/mysql.txt' '@MM_MASTER_WOL_BROADCAST@'           "${MASTER_WOL_BROADCAST}"
    mm_file_replace_variable '/home/minimyth/.mythtv/mysql.txt' '@MM_MASTER_WOL_MAC@'                 "${MM_MASTER_WOL_MAC}"

    # If using wake-on-lan, then make sure that the MythTV master backend is awake.
    if /usr/bin/test "${MM_MASTER_WOL_ENABLED}" = "yes" && ! mm_mythdb_test ; then
        WOLSqlConnectRetry=` \
		/bin/cat /home/minimyth/.mythtv/mysql.txt | \
		/bin/grep '^WOLSqlConnectRetry=' | \
		/bin/sed 's%WOLSqlConnectRetry=%%'`
        WOLSqlReconnectWaitTime=` \
		/bin/cat /home/minimyth/.mythtv/mysql.txt | \
		/bin/grep '^WOLSqlReconnectWaitTime=' | \
		/bin/sed 's%WOLSqlReconnectWaitTime=%%'`
        WOLSqlCommand=` \
		/bin/cat /home/minimyth/.mythtv/mysql.txt | \
		/bin/grep '^WOLSqlCommand=' | \
		/bin/sed 's%WOLSqlCommand=%%'`
        WOLSqlConnectAttempt=1
        while /usr/bin/test ${WOLSqlConnectAttempt} -le ${WOLSqlConnectRetry} && ! mm_mythdb_test ; do
            mm_message_output info "waking MythTV master backend database (${WOLSqlConnectAttempt} of ${WOLSqlConnectRetry} attempts) ..."
            ${WOLSqlCommand}
            /bin/sleep ${WOLSqlReconnectWaitTime}
            WOLSqlConnectAttempt=$((WOLSqlConnectAttempt+1))
        done
        # Wait the additional delay after MySQL is awake.
        if mm_mythdb_test ; then
            WOL_Additional_Delay=0
            while /usr/bin/test ${WOL_Additional_Delay} -le ${MM_MASTER_WOL_ADDITIONAL_DELAY} ; do
                mm_message_output info "waiting while MythTV master backend wakes (${WOL_Additional_Delay} of ${MM_MASTER_WOL_ADDITIONAL_DELAY} seconds) ..."
                /bin/sleep 1
                WOL_Additional_Delay=$((WOL_Additional_Delay+1))
            done
        fi
    fi

    # Test Myth database connection.
    if ! mm_mythdb_test ; then
        mm_message_output err "error: cannot connect to the MythTV master backend database."
        exit 1
    fi

    return 0
}

stop() {
    return 0
}

case $1 in
    start) start ;;
    stop)  stop  ;;
esac

exit 0
