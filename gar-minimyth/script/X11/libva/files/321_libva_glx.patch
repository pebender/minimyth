commit f1bfebcdc10323e9b20a0be15139a7cc2dc759d0
Author: Gwenole Beauchesne <gbeauchesne@splitted-desktop.com>
Date:   Wed Aug 26 12:01:30 2009 +0000

    Improve documentation and rename "tex" argument to "texture".

commit b191169d64f4abed13db5aaa759950cd4261655b
Author: Gwenole Beauchesne <gbeauchesne@splitted-desktop.com>
Date:   Fri Aug 21 11:58:16 2009 +0000

    Add initial OpenGL extensions.

diff --git a/Makefile.am b/Makefile.am
index 07385e6..6fb4cae 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -32,10 +32,13 @@ endif
 
 pcfiles = libva.pc
 pcfiles += libva-x11.pc
+if USE_GLX
+pcfiles += libva-glx.pc
+endif
 
 pkgconfigdir = @pkgconfigdir@
 pkgconfig_DATA = $(pcfiles)
 
-EXTRA_DIST = libva.pc.in libva-x11.pc.in
+EXTRA_DIST = libva.pc.in libva-x11.pc.in libva-glx.pc.in
 
 CLEANFILES = $(pcfiles)
diff --git a/configure.ac b/configure.ac
index 4c6bfc5..60275b9 100644
--- a/configure.ac
+++ b/configure.ac
@@ -66,6 +66,11 @@ LIBVA_LT_LDFLAGS="-version-info $LIBVA_LT_VERSION -release $LIBVA_VERSION.$LIBVA
 AC_SUBST(LIBVA_LT_VERSION)
 AC_SUBST(LIBVA_LT_LDFLAGS)
 
+AC_ARG_ENABLE(glx,
+              [AC_HELP_STRING([--enable-glx],
+                              [build with OpenGL for X11 support])],
+              [], [enable_glx=yes])
+
 AC_ARG_ENABLE(dummy-driver,
               [AC_HELP_STRING([--enable-dummy-driver],
                               [build dummy video driver])],
@@ -106,6 +111,23 @@ if test x$enable_i965_driver = xyes && ! $PKG_CONFIG --atleast-version=2.4 libdr
 fi
 AM_CONDITIONAL(BUILD_I965_DRIVER, test x$enable_i965_driver = xyes)
 
+# Check for OpenGL (X11)
+USE_GLX="no"
+GL_DEPS_CFLAGS=""
+GL_DEPS_LIBS=""
+
+if test x$enable_glx = xyes; then
+    AC_CHECK_HEADERS([GL/gl.h])
+    AC_CHECK_HEADERS([GL/glx.h])
+    AC_CHECK_LIB(GL, glXCreateContext, [
+        USE_GLX="yes"
+        GL_DEPS_LIBS="-lX11 -lGL"
+    ])
+fi
+AC_SUBST(GL_DEPS_CFLAGS)
+AC_SUBST(GL_DEPS_LIBS)
+AM_CONDITIONAL(USE_GLX, test "$USE_GLX" = "yes")
+
 # We only need the headers, we don't link against the DRM libraries
 LIBVA_CFLAGS="$DRM_CFLAGS"
 AC_SUBST(LIBVA_CFLAGS)
@@ -125,6 +147,7 @@ AC_OUTPUT([
 	src/Makefile
 	src/va_version.h
 	src/x11/Makefile
+	src/glx/Makefile
 	dummy_drv_video/Makefile
 	i965_drv_video/Makefile
 	i965_drv_video/shaders/Makefile
@@ -134,5 +157,6 @@ AC_OUTPUT([
 	test/Makefile
 	libva.pc
 	libva-x11.pc
+	libva-glx.pc
 ])
 
diff --git a/libva-glx.pc.in b/libva-glx.pc.in
new file mode 100644
index 0000000..20ba20a
--- /dev/null
+++ b/libva-glx.pc.in
@@ -0,0 +1,11 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+display=glx
+
+Name: libva-${display}
+Description: Userspace Video Acceleration (VA) ${display} interface
+Version: @PACKAGE_VERSION@
+Libs: -L${libdir} -lva-${display}
+Cflags: -I${includedir}
diff --git a/src/Makefile.am b/src/Makefile.am
index 2fcd03b..a319f7e 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -28,9 +28,17 @@ INCLUDES = \
 LDADD = \
 	$(LIBVA_LT_LDFLAGS)
 
-lib_LTLIBRARIES = \
-	libva.la \
-	libva-x11.la
+libva_x11_backend	= libva-x11.la
+libva_x11_backenddir	= x11
+if USE_GLX
+libva_glx_backend	= libva-glx.la
+libva_glx_backenddir	= glx
+else
+libva_glx_backend	=
+libva_glx_backenddir	=
+endif
+
+lib_LTLIBRARIES = libva.la $(libva_x11_backend) $(libva_glx_backend)
 
 libva_ladir = $(libdir)
 libva_la_LDFLAGS = $(LDADD) -no-undefined
@@ -42,7 +50,14 @@ libva_x11_la_LIBADD  = $(libvacorelib) x11/libva_x11.la $(LIBVA_LIBS) $(X11_LIBS
 libva_x11_la_LDFLAGS = $(LDADD)
 libva_x11_la_DEPENDENCIES = $(libvacorelib) x11/libva_x11.la
 
-SUBDIRS = x11
+libva_glx_la_SOURCES = 
+libva_glx_la_LIBADD  = $(libvacorelib) glx/libva_glx.la libva-x11.la $(GL_DEPS_LIBS)
+libva_glx_la_LDFLAGS = $(LDADD)
+libva_glx_la_DEPENDENCIES = $(libvacorelib) glx/libva_glx.la libva-x11.la
+
+SUBDIRS = $(libva_x11_backenddir) $(libva_glx_backenddir)
+
+DIST_SUBDIRS = x11 glx
 
 libva_la_SOURCES = va.c va_compat.c
 
diff --git a/src/glx/Makefile.am b/src/glx/Makefile.am
new file mode 100644
index 0000000..c62e5de
--- /dev/null
+++ b/src/glx/Makefile.am
@@ -0,0 +1,30 @@
+# Copyright (C) 2009 Splitted-Desktop Systems. All Rights Reserved.
+#
+# Permission is hereby granted, free of charge, to any person obtaining a
+# copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sub license, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+# 
+# The above copyright notice and this permission notice (including the
+# next paragraph) shall be included in all copies or substantial portions
+# of the Software.
+# 
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
+# IN NO EVENT SHALL PRECISION INSIGHT AND/OR ITS SUPPLIERS BE LIABLE FOR
+# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+AM_CFLAGS = -DLINUX -DIN_LIBVA -I$(top_srcdir)/src -I$(top_srcdir)/src/x11
+
+noinst_LTLIBRARIES = libva_glx.la	
+
+libva_glxincludedir = ${includedir}/va
+libva_glxinclude_HEADERS = va_glx.h
+
+libva_glx_la_SOURCES = va_glx.c
diff --git a/src/glx/va_glx.c b/src/glx/va_glx.c
new file mode 100644
index 0000000..49f09e0
--- /dev/null
+++ b/src/glx/va_glx.c
@@ -0,0 +1,107 @@
+/*
+ * Copyright (C) 2009 Splitted-Desktop Systems. All Rights Reserved.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sub license, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ * 
+ * The above copyright notice and this permission notice (including the
+ * next paragraph) shall be included in all copies or substantial portions
+ * of the Software.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+ * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
+ * IN NO EVENT SHALL PRECISION INSIGHT AND/OR ITS SUPPLIERS BE LIABLE FOR
+ * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+ * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+ * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+#include "config.h"
+#include "va.h"
+#include "va_backend.h"
+#include "va_x11.h"
+#include "va_glx.h"
+
+typedef struct VADisplayContextGLX *VADisplayContextGLXP;
+
+struct VADisplayContextGLX {
+    void (*vaDestroy)(VADisplayContextP ctx);
+};
+
+static void va_DisplayContextDestroy(VADisplayContextP pDisplayContext)
+{
+    VADisplayContextGLXP pDisplayContextGLX;
+
+    if (!pDisplayContext)
+        return;
+
+    pDisplayContextGLX = pDisplayContext->opaque;
+    if (pDisplayContextGLX) {
+        if (pDisplayContextGLX->vaDestroy)
+            pDisplayContextGLX->vaDestroy(pDisplayContext);
+        free(pDisplayContextGLX);
+        pDisplayContext->opaque = NULL;
+    }
+}
+
+VADisplay vaGetDisplayGLX(Display *native_dpy)
+{
+    VADisplay            dpy                = NULL;
+    VADisplayContextP    pDisplayContext    = NULL;
+    VADisplayContextGLXP pDisplayContextGLX = NULL;
+    VADriverContextP     pDriverContext;
+
+    dpy = vaGetDisplay(native_dpy);
+    if (!dpy)
+        return NULL;
+    pDisplayContext = (VADisplayContextP)dpy;
+    pDriverContext  = pDisplayContext->pDriverContext;
+
+    pDisplayContextGLX = calloc(1, sizeof(*pDisplayContextGLX));
+    if (!pDisplayContextGLX)
+        goto error;
+
+    pDisplayContextGLX->vaDestroy = pDisplayContext->vaDestroy;
+    pDisplayContext->vaDestroy    = va_DisplayContextDestroy;
+    pDisplayContext->opaque       = pDisplayContextGLX;
+    return dpy;
+
+error:
+    free(pDisplayContextGLX);
+    pDisplayContext->vaDestroy(pDisplayContext);
+    return NULL;
+}
+
+VAStatus vaCopySurfaceToTextureGLX(
+    VADisplay    dpy,
+    VASurfaceID  surface,
+    GLuint       texture,
+    unsigned int flags
+)
+{
+    VADisplayContextP pDisplayContext = (VADisplayContextP)dpy;
+    VADriverContextP ctx;
+
+    if (!pDisplayContext)
+        return VA_STATUS_ERROR_INVALID_DISPLAY;
+    if (!pDisplayContext->vaIsValid)
+        return VA_STATUS_ERROR_INVALID_DISPLAY;
+    if (!pDisplayContext->vaIsValid(pDisplayContext))
+        return VA_STATUS_ERROR_INVALID_DISPLAY;
+
+    ctx = pDisplayContext->pDriverContext;
+    if (!ctx)
+        return VA_STATUS_ERROR_OPERATION_FAILED;
+
+    if (ctx->vtable.vaCopySurfaceToTextureGLX)
+        return ctx->vtable.vaCopySurfaceToTextureGLX(ctx, surface, texture, flags);
+
+    /* XXX: implement with the GLX texture-from-pixmap + FBO extension? */
+    return VA_STATUS_ERROR_UNIMPLEMENTED;
+}
diff --git a/src/glx/va_glx.h b/src/glx/va_glx.h
new file mode 100644
index 0000000..f0bc21f
--- /dev/null
+++ b/src/glx/va_glx.h
@@ -0,0 +1,67 @@
+/*
+ * Copyright (C) 2009 Splitted-Desktop Systems. All Rights Reserved.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sub license, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ * 
+ * The above copyright notice and this permission notice (including the
+ * next paragraph) shall be included in all copies or substantial portions
+ * of the Software.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+ * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
+ * IN NO EVENT SHALL PRECISION INSIGHT AND/OR ITS SUPPLIERS BE LIABLE FOR
+ * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+ * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+ * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+#ifndef VA_GLX_H
+#define VA_GLX_H
+
+#ifdef IN_LIBVA
+#include "va.h"
+#else
+#include <va/va.h>
+#endif
+#include <GL/glx.h>
+
+/**
+ * Returns a suitable VADisplay for VA API
+ *
+ * @param dpy the X11 display
+ * @return VA_STATUS_SUCCESS if successful
+ */
+VADisplay vaGetDisplayGLX(
+    Display *dpy
+);
+
+/**
+ * Copy VA API surface to an OpenGL texture
+ *
+ * The application shall maintain the live GLX context itself.
+ * Implementations are free to use glXGetCurrentContext() and
+ * glXGetCurrentDrawable() functions for internal purposes.
+ *
+ * The default texture (0) will be bound on exit from this function.
+ *
+ * @param dpy the VA API display
+ * @param surface the VA API surface
+ * @param texture the OpenGL 2D texture
+ * @param flags the PutSurface flags
+ * @return VA_STATUS_SUCCESS if successful
+ */
+VAStatus vaCopySurfaceToTextureGLX(
+    VADisplay    dpy,
+    VASurfaceID  surface,
+    GLuint       texture,
+    unsigned int flags
+);
+
+#endif /* VA_GLX_H */
diff --git a/src/va_backend.h b/src/va_backend.h
index 9d787a9..ec56070 100644
--- a/src/va_backend.h
+++ b/src/va_backend.h
@@ -403,6 +403,14 @@ struct VADriverVTable
                 unsigned int *chroma_v_offset,
                 void **buffer
         );
+
+        /* Optional: copy surface to an OpenGL texture */
+        VAStatus (*vaCopySurfaceToTextureGLX) (
+                VADriverContextP ctx,
+                VASurfaceID surface,
+                unsigned int tex,
+                unsigned int flags
+        );
 };
 
 struct VADriverContext
@@ -445,6 +453,8 @@ struct VADisplayContext
 	VADisplayContextP ctx,
 	char **driver_name
     );
+
+    void *opaque;                       /* opaque for display extensions (e.g. GLX) */
 };
 
 typedef VAStatus (*VADriverInit) (
diff --git a/src/x11/va_x11.c b/src/x11/va_x11.c
index 9de904e..b8c60fa 100644
--- a/src/x11/va_x11.c
+++ b/src/x11/va_x11.c
@@ -243,6 +243,7 @@ VADisplay vaGetDisplay (
 	  pDisplayContext->vaIsValid       = va_DisplayContextIsValid;
 	  pDisplayContext->vaDestroy       = va_DisplayContextDestroy;
 	  pDisplayContext->vaGetDriverName = va_DisplayContextGetDriverName;
+          pDisplayContext->opaque          = NULL;
 	  pDisplayContexts                 = pDisplayContext;
 	  pDriverContext->dri_state 	   = dri_state;
 	  dpy                              = (VADisplay)pDisplayContext;
