diff -Naur imon-old/imon_vfd.c imon-new/imon_vfd.c
--- imon-old/imon_vfd.c	2010-05-06 16:49:01.000000000 -0700
+++ imon-new/imon_vfd.c	2010-05-06 16:49:24.000000000 -0700
@@ -197,7 +197,7 @@
 	usb_free_urb (context ->tx_urb);
 	kfree (context);
 
-	if (debug) info ("%s: context deleted", __FUNCTION__);
+	if (debug) printk(KERN_INFO "%s: context deleted\n", __func__);
 }
 
 
@@ -256,7 +256,7 @@
 #endif
 		context ->vfd_isopen = TRUE;
 		file ->private_data = context;
-		info ("VFD port opened");
+		printk(KERN_INFO "VFD port opened\n");
 	}
 
 	UNLOCK_CONTEXT;
@@ -293,7 +293,7 @@
 #ifndef KERNEL_2_5
 		MOD_DEC_USE_COUNT;
 #endif
-		info ("VFD port closed");
+		printk(KERN_INFO "VFD port closed\n");
 		if (!context ->dev_present) {
 
 			/* Device disconnected before close */
@@ -492,7 +492,7 @@
 	struct imon_context *context = NULL;
 	int i;
 
-	info ("%s: found IMON device", __FUNCTION__);
+	printk(KERN_INFO "%s: found iMON device\n", __func__);
 
 #if !defined(KERNEL_2_5)
 	for (subminor = 0; subminor < MAX_DEVICES; ++subminor) {
@@ -543,8 +543,8 @@
 
 			tx_endpoint = ep;
 			vfd_ep_found = TRUE;
-			if (debug) 
-				info ("%s: found VFD endpoint", __FUNCTION__);
+			if (debug)
+				printk(KERN_INFO "%s: found VFD endpoint\n", __func__);
 			break;
 		}
 	}
@@ -564,7 +564,7 @@
 			}
 		}
 
-		if (debug) info ("vfd_proto_6p: %d", vfd_proto_6p);
+		if (debug) printk(KERN_INFO "vfd_proto_6p: %d\n", vfd_proto_6p);
 	}
 	else {
 		err ("%s: No VFD endpoint found", __FUNCTION__);
@@ -618,13 +618,13 @@
 	context ->subminor = subminor;
 #endif
 
-	if (debug) info ("Registering VFD with devfs");
+	if (debug) printk(KERN_INFO "Registering display with devfs\n");
 #ifdef KERNEL_2_5
 	if (usb_register_dev (interface, &imon_class)) {
 
 		// Not a fatal error, so ignore
-		info ("%s: could not get a minor number for VFD", 
-			__FUNCTION__);
+		printk(KERN_INFO "%s: could not get a minor number for VFD\n",
+			__func__);
 	}
 #else
 	sprintf (name, DEVFS_NAME, subminor);
@@ -634,13 +634,13 @@
 				DEVFS_MODE, &vfd_fops, NULL))) {
 
 		// not a fatal error so ignore
-		info ("%s: devfs register failed for VFD",
-					__FUNCTION__);
+		printk(KERN_INFO "%s: devfs register failed for VFD\n",
+					__func__);
 	}
 #endif
 
-	info ("%s: iMON device on usb<%d:%d> initialized",
-			__FUNCTION__, dev ->bus ->busnum, dev ->devnum);
+	printk(KERN_INFO "%s: iMON device on usb<%d:%d> initialized\n",
+			__func__, dev->bus->busnum, dev->devnum);
 
 	UNLOCK_CONTEXT;
 exit:
@@ -672,7 +672,7 @@
 #endif
 	LOCK_CONTEXT;
 
-	info ("%s: iMON device disconnected", __FUNCTION__);
+	printk(KERN_INFO "%s: iMON device disconnected\n", __func__);
 
 #ifdef KERNEL_2_5
 	usb_set_intfdata (interface, NULL);
@@ -707,8 +707,8 @@
 {
 	int rc;
 
-	info (MOD_DESC ", v" MOD_VERSION);
-	info (MOD_AUTHOR);
+	printk(KERN_INFO MOD_DESC ", v" MOD_VERSION "\n");
+	printk(KERN_INFO MOD_AUTHOR "\n");
 
 	if ((rc = usb_register (&imon_driver)) < 0) {
 		err ("%s: usb register failed (%d)", __FUNCTION__, rc);
@@ -720,7 +720,7 @@
 static void __exit imon_exit (void)
 {
 	usb_deregister (&imon_driver);
-	info ("module removed. Goodbye!");
+	printk(KERN_INFO "module removed. Goodbye!\n");
 }
 
 
