diff -Naur qt-everywhere-opensource-src-4.6.3-old/src/3rdparty/webkit/WebCore/ChangeLog qt-everywhere-opensource-src-4.6.3-new/src/3rdparty/webkit/WebCore/ChangeLog
--- qt-everywhere-opensource-src-4.6.3-old/src/3rdparty/webkit/WebCore/ChangeLog	2010-08-22 10:59:21.000000000 -0700
+++ qt-everywhere-opensource-src-4.6.3-new/src/3rdparty/webkit/WebCore/ChangeLog	2010-08-22 11:01:21.000000000 -0700
@@ -1,3 +1,17 @@
+2010-08-20  Andreas Kling  <andreas.kling@nokia.com>
+
+        Reviewed by Kenneth Rohde Christiansen.
+
+        [Qt] Initialize GDK before loading plugins
+        https://bugs.webkit.org/show_bug.cgi?id=44324
+
+        Attempt to call gdk_init_check() before loading any plugins.
+        This prevents various crashes and freezes in Adobe's Flash plugin.
+
+        * plugins/qt/PluginPackageQt.cpp:
+        (WebCore::initializeGdkIfPossible):
+        (WebCore::PluginPackage::load):
+
 2010-08-17  Girish Ramakrishnan  <girish@forwardbias.in>
 
         Reviewed by Antonio Gomes.
diff -Naur qt-everywhere-opensource-src-4.6.3-old/src/3rdparty/webkit/WebCore/plugins/qt/PluginPackageQt.cpp qt-everywhere-opensource-src-4.6.3-new/src/3rdparty/webkit/WebCore/plugins/qt/PluginPackageQt.cpp
--- qt-everywhere-opensource-src-4.6.3-old/src/3rdparty/webkit/WebCore/plugins/qt/PluginPackageQt.cpp	2010-08-22 10:58:46.000000000 -0700
+++ qt-everywhere-opensource-src-4.6.3-new/src/3rdparty/webkit/WebCore/plugins/qt/PluginPackageQt.cpp	2010-08-22 11:01:21.000000000 -0700
@@ -35,8 +35,6 @@
 
 namespace WebCore {
 
-typedef void gtkInitFunc(int *argc, char ***argv);
-
 bool PluginPackage::fetchInfo()
 {
     if (!load())
@@ -92,6 +90,28 @@
     return NPN_GetValue(instance, variable, value);
 }
 
+static void initializeGdkIfPossible()
+{
+    static bool attemptMade = false;
+
+    if (attemptMade)
+        return;
+
+    attemptMade = true;
+
+    QLibrary library("libgdk-x11-2.0.so.0");
+    if (!library.load())
+        return;
+
+    typedef void *(*gdk_init_check_ptr)(int*, char***);
+    gdk_init_check_ptr gdk_init_check = (gdk_init_check_ptr)library.resolve("gdk_init_check");
+    if (!gdk_init_check)
+        return;
+
+    // NOTE: We're using gdk_init_check() since gdk_init() may exit() on failure.
+    (void) gdk_init_check(0, 0);
+}
+
 bool PluginPackage::load()
 {
     if (m_isLoaded) {
@@ -111,7 +131,6 @@
 
     NP_InitializeFuncPtr NP_Initialize;
     NPError npErr;
-    gtkInitFunc* gtkInit;
 
     NP_Initialize = (NP_InitializeFuncPtr)m_module->resolve("NP_Initialize");
     m_NPP_Shutdown = (NPP_ShutdownProcPtr)m_module->resolve("NP_Shutdown");
@@ -130,25 +149,8 @@
         m_browserFuncs.getvalue = staticPluginQuirkRequiresGtkToolKit_NPN_GetValue;
     }
 
-    // WORKAROUND: Prevent gtk based plugin crashes such as BR# 40567 by
-    // explicitly forcing the initializing of Gtk, i.e. calling gtk_init,
-    // whenver the symbol is present in the plugin library loaded above.
-    // Note that this workaround is based on code from the NSPluginClass ctor
-    // in KDE's kdebase/apps/nsplugins/viewer/nsplugin.cpp file.
-    gtkInit = (gtkInitFunc*)m_module->resolve("gtk_init");
-    if (gtkInit) {
-        // Prevent gtk_init() from replacing the X error handlers, since the Gtk
-        // handlers abort when they receive an X error, thus killing the viewer.
-#ifdef Q_WS_X11
-        int (*old_error_handler)(Display*, XErrorEvent*) = XSetErrorHandler(0);
-        int (*old_io_error_handler)(Display*) = XSetIOErrorHandler(0);
-#endif
-        gtkInit(0, 0);
-#ifdef Q_WS_X11
-        XSetErrorHandler(old_error_handler);
-        XSetIOErrorHandler(old_io_error_handler);
-#endif
-    }
+    // Try to initialize GDK - some versions of the Flash plugin depend on this.
+    initializeGdkIfPossible();
 
 #if defined(XP_UNIX)
     npErr = NP_Initialize(&m_browserFuncs, &m_pluginFuncs);
