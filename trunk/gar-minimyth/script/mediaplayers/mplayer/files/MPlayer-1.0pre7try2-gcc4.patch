diff -Naur MPlayer-1.0pre7try2-old/configure MPlayer-1.0pre7try2-new/configure
--- MPlayer-1.0pre7try2-old/configure	2005-04-13 04:46:35.000000000 -0700
+++ MPlayer-1.0pre7try2-new/configure	2005-12-15 19:09:50.000000000 -0800
@@ -605,7 +605,7 @@
       cc_version="v. ?.??, bad"
       cc_verc_fail=yes
       ;;
-    2.95.[2-9]|2.95.[2-9][-.]*|3.[0-9]|3.[0-9].[0-9])
+    2.95.[2-9]|2.95.[2-9][-.]*|3.[0-9]|3.[0-9].[0-9]|4.*)
       _cc_major=`echo $cc_version | cut -d '.' -f 1`
       _cc_minor=`echo $cc_version | cut -d '.' -f 2`
       _cc_mini=`echo $cc_version | cut -d '.' -f 3`
diff -Naur MPlayer-1.0pre7try2-old/liba52/imdct.c MPlayer-1.0pre7try2-new/liba52/imdct.c
--- MPlayer-1.0pre7try2-old/liba52/imdct.c	2005-03-22 15:27:18.000000000 -0800
+++ MPlayer-1.0pre7try2-new/liba52/imdct.c	2005-12-15 19:09:50.000000000 -0800
@@ -937,7 +937,8 @@
     /* 4-7. iterations */
     for (m=3; m < 7; m++) {
 	two_m = (1 << m);
-	two_m_plus_one = two_m<<1;
+	int two_m_plus_four=two_m<<4;
+	complex_t* buf_plus_128=buf+128;
 	asm volatile(
 		"movl %0, %%esi				\n\t"
 		".balign 16				\n\t"
@@ -963,7 +964,7 @@
 		"addl %2, %%esi				\n\t"
 		"cmpl %1, %%esi				\n\t"
 		" jb 1b					\n\t"
-		:: "g" (buf), "m" (buf+128), "m" (two_m_plus_one<<3), "r" (two_m<<3),
+		:: "g" (buf), "m" (buf_plus_128), "m" (two_m_plus_four), "r" (two_m<<3),
 		   "r" (sseW[m])
 		: "%esi", "%edi", "%edx"
 	);
diff -Naur MPlayer-1.0pre7try2-old/libavcodec/libpostproc/postprocess_template.c MPlayer-1.0pre7try2-new/libavcodec/libpostproc/postprocess_template.c
--- MPlayer-1.0pre7try2-old/libavcodec/libpostproc/postprocess_template.c	2005-04-16 13:41:13.000000000 -0700
+++ MPlayer-1.0pre7try2-new/libavcodec/libpostproc/postprocess_template.c	2005-12-15 19:09:50.000000000 -0800
@@ -2648,6 +2648,8 @@
 static always_inline void RENAME(do_a_deblock)(uint8_t *src, int step, int stride, PPContext *c){
 	int64_t dc_mask, eq_mask;
 	int64_t sums[10*8*2];
+	int64_t dc_and_eq_mask;
+
 	src+= step*3; // src points to begin of the 8x8 Block
 //START_TIMER
 asm volatile(
@@ -2754,8 +2756,9 @@
 		: "r" (src), "r" ((long)step), "m" (c->pQPb), "m"(c->ppMode.flatnessThreshold)
 		: "%"REG_a
 		);
+	dc_and_eq_mask=dc_mask & eq_mask;
 
-	if(dc_mask & eq_mask){
+	if(dc_and_eq_mask){
 		long offset= -8*step;
 		int64_t *temp_sums= sums;
 
@@ -2930,7 +2933,7 @@
 		" js 1b						\n\t"
 
 		: "+r"(offset), "+r"(temp_sums)
-		: "r" ((long)step), "r"(src - offset), "m"(dc_mask & eq_mask)
+		: "r" ((long)step), "r"(src - offset), "m"(dc_and_eq_mask)
 		);
 	}else
 		src+= step; // src points to begin of the 8x8 Block
diff -Naur MPlayer-1.0pre7try2-old/libavcodec/ppc/fdct_altivec.c MPlayer-1.0pre7try2-new/libavcodec/ppc/fdct_altivec.c
--- MPlayer-1.0pre7try2-old/libavcodec/ppc/fdct_altivec.c	2005-04-16 13:41:13.000000000 -0700
+++ MPlayer-1.0pre7try2-new/libavcodec/ppc/fdct_altivec.c	2005-12-15 19:09:57.000000000 -0800
@@ -29,7 +29,7 @@
 #define vu8(v)  ((vector unsigned char)(v))
 #define vu16(v) ((vector unsigned short)(v))
 #define vu32(v) ((vector unsigned int)(v))
-
+#define vf(v)	((vector float)(v))
 
 #define C1     0.98078525066375732421875000 /* cos(1*PI/16) */
 #define C2     0.92387950420379638671875000 /* cos(2*PI/16) */
@@ -214,8 +214,8 @@
 
     /* setup constants {{{ */
     /* mzero = -0.0 */
-    vu32(mzero) = vec_splat_u32(-1);
-    vu32(mzero) = vec_sl(vu32(mzero), vu32(mzero));
+    mzero = vf(vec_splat_u32(-1));
+    mzero = vf(vec_sl(vu32(mzero), vu32(mzero)));
     cp = fdctconsts;
     cnsts0 = vec_ld(0, cp); cp++;
     cnsts1 = vec_ld(0, cp); cp++;
@@ -227,43 +227,43 @@
 #define MERGE_S16(hl,a,b) vec_merge##hl(vs16(a), vs16(b))
 
     bp = (vector signed short*)block;
-    vs16(b00) = vec_ld(0,    bp);
-    vs16(b40) = vec_ld(16*4, bp);
-    vs16(b01) = MERGE_S16(h, b00, b40);
-    vs16(b11) = MERGE_S16(l, b00, b40);
+    b00 = vf(vec_ld(0,    bp));
+    b40 = vf(vec_ld(16*4, bp));
+    b01 = vf(MERGE_S16(h, b00, b40));
+    b11 = vf(MERGE_S16(l, b00, b40));
     bp++;
-    vs16(b10) = vec_ld(0,    bp);
-    vs16(b50) = vec_ld(16*4, bp);
-    vs16(b21) = MERGE_S16(h, b10, b50);
-    vs16(b31) = MERGE_S16(l, b10, b50);
+    b10 = vf(vec_ld(0,    bp));
+    b50 = vf(vec_ld(16*4, bp));
+    b21 = vf(MERGE_S16(h, b10, b50));
+    b31 = vf(MERGE_S16(l, b10, b50));
     bp++;
-    vs16(b20) = vec_ld(0,    bp);
-    vs16(b60) = vec_ld(16*4, bp);
-    vs16(b41) = MERGE_S16(h, b20, b60);
-    vs16(b51) = MERGE_S16(l, b20, b60);
+    b20 = vf(vec_ld(0,    bp));
+    b60 = vf(vec_ld(16*4, bp));
+    b41 = vf(MERGE_S16(h, b20, b60));
+    b51 = vf(MERGE_S16(l, b20, b60));
     bp++;
-    vs16(b30) = vec_ld(0,    bp);
-    vs16(b70) = vec_ld(16*4, bp);
-    vs16(b61) = MERGE_S16(h, b30, b70);
-    vs16(b71) = MERGE_S16(l, b30, b70);
-
-    vs16(x0) = MERGE_S16(h, b01, b41);
-    vs16(x1) = MERGE_S16(l, b01, b41);
-    vs16(x2) = MERGE_S16(h, b11, b51);
-    vs16(x3) = MERGE_S16(l, b11, b51);
-    vs16(x4) = MERGE_S16(h, b21, b61);
-    vs16(x5) = MERGE_S16(l, b21, b61);
-    vs16(x6) = MERGE_S16(h, b31, b71);
-    vs16(x7) = MERGE_S16(l, b31, b71);
-
-    vs16(b00) = MERGE_S16(h, x0, x4);
-    vs16(b10) = MERGE_S16(l, x0, x4);
-    vs16(b20) = MERGE_S16(h, x1, x5);
-    vs16(b30) = MERGE_S16(l, x1, x5);
-    vs16(b40) = MERGE_S16(h, x2, x6);
-    vs16(b50) = MERGE_S16(l, x2, x6);
-    vs16(b60) = MERGE_S16(h, x3, x7);
-    vs16(b70) = MERGE_S16(l, x3, x7);
+    b30 = vf(vec_ld(0,    bp));
+    b70 = vf(vec_ld(16*4, bp));
+    b61 = vf(MERGE_S16(h, b30, b70));
+    b71 = vf(MERGE_S16(l, b30, b70));
+
+    x0 = vf(MERGE_S16(h, b01, b41));
+    x1 = vf(MERGE_S16(l, b01, b41));
+    x2 = vf(MERGE_S16(h, b11, b51));
+    x3 = vf(MERGE_S16(l, b11, b51));
+    x4 = vf(MERGE_S16(h, b21, b61));
+    x5 = vf(MERGE_S16(l, b21, b61));
+    x6 = vf(MERGE_S16(h, b31, b71));
+    x7 = vf(MERGE_S16(l, b31, b71));
+
+    b00 = vf(MERGE_S16(h, x0, x4));
+    b10 = vf(MERGE_S16(l, x0, x4));
+    b20 = vf(MERGE_S16(h, x1, x5));
+    b30 = vf(MERGE_S16(l, x1, x5));
+    b40 = vf(MERGE_S16(h, x2, x6));
+    b50 = vf(MERGE_S16(l, x2, x6));
+    b60 = vf(MERGE_S16(h, x3, x7));
+    b70 = vf(MERGE_S16(l, x3, x7));
 
 #undef MERGE_S16
     /* }}} */
@@ -275,32 +275,32 @@
  */
 #if 1
     /* fdct rows {{{ */
-    vs16(x0) = vec_add(vs16(b00), vs16(b70));
-    vs16(x7) = vec_sub(vs16(b00), vs16(b70));
-    vs16(x1) = vec_add(vs16(b10), vs16(b60));
-    vs16(x6) = vec_sub(vs16(b10), vs16(b60));
-    vs16(x2) = vec_add(vs16(b20), vs16(b50));
-    vs16(x5) = vec_sub(vs16(b20), vs16(b50));
-    vs16(x3) = vec_add(vs16(b30), vs16(b40));
-    vs16(x4) = vec_sub(vs16(b30), vs16(b40));
+    x0 = vf(vec_add(vs16(b00), vs16(b70)));
+    x7 = vf(vec_sub(vs16(b00), vs16(b70)));
+    x1 = vf(vec_add(vs16(b10), vs16(b60)));
+    x6 = vf(vec_sub(vs16(b10), vs16(b60)));
+    x2 = vf(vec_add(vs16(b20), vs16(b50)));
+    x5 = vf(vec_sub(vs16(b20), vs16(b50)));
+    x3 = vf(vec_add(vs16(b30), vs16(b40)));
+    x4 = vf(vec_sub(vs16(b30), vs16(b40)));
 
-    vs16(b70) = vec_add(vs16(x0), vs16(x3));
-    vs16(b10) = vec_add(vs16(x1), vs16(x2));
+    b70 = vf(vec_add(vs16(x0), vs16(x3)));
+    b10 = vf(vec_add(vs16(x1), vs16(x2)));
 
-    vs16(b00) = vec_add(vs16(b70), vs16(b10));
-    vs16(b40) = vec_sub(vs16(b70), vs16(b10));
+    b00 = vf(vec_add(vs16(b70), vs16(b10)));
+    b40 = vf(vec_sub(vs16(b70), vs16(b10)));
 
 #define CTF0(n) \
-    vs32(b##n##1) = vec_unpackl(vs16(b##n##0)); \
-    vs32(b##n##0) = vec_unpackh(vs16(b##n##0)); \
+    b##n##1 = vf(vec_unpackl(vs16(b##n##0)));	\
+    b##n##0 = vf(vec_unpackh(vs16(b##n##0)));	\
     b##n##1 = vec_ctf(vs32(b##n##1), 0); \
     b##n##0 = vec_ctf(vs32(b##n##0), 0);
 
     CTF0(0);
     CTF0(4);
 
-    vs16(b20) = vec_sub(vs16(x0), vs16(x3));
-    vs16(b60) = vec_sub(vs16(x1), vs16(x2));
+    b20 = vf(vec_sub(vs16(x0), vs16(x3)));
+    b60 = vf(vec_sub(vs16(x1), vs16(x2)));
 
     CTF0(2);
     CTF0(6);
@@ -321,8 +321,8 @@
     b61 = vec_madd(cnst, b61, x1);
 
 #define CTFX(x,b) \
-    vs32(b##0) = vec_unpackh(vs16(x)); \
-    vs32(b##1) = vec_unpackl(vs16(x)); \
+    b##0 = vf(vec_unpackh(vs16(x)));  \
+    b##1 = vf(vec_unpackl(vs16(x)));  \
     b##0 = vec_ctf(vs32(b##0), 0); \
     b##1 = vec_ctf(vs32(b##1), 0); \
 
@@ -473,9 +473,9 @@
 #define CTS(n) \
     b##n##0 = vec_round(b##n##0); \
     b##n##1 = vec_round(b##n##1); \
-    vs32(b##n##0) = vec_cts(b##n##0, 0); \
-    vs32(b##n##1) = vec_cts(b##n##1, 0); \
-    vs16(b##n##0) = vec_pack(vs32(b##n##0), vs32(b##n##1)); \
+    b##n##0 = vf(vec_cts(b##n##0, 0));			\
+    b##n##1 = vf(vec_cts(b##n##1, 0));			\
+    b##n##0 = vf(vec_pack(vs32(b##n##0), vs32(b##n##1)));	\
     vec_st(vs16(b##n##0), 0, bp);
 
     bp = (vector signed short*)block;
diff -Naur MPlayer-1.0pre7try2-old/libmpdemux/frequencies.h MPlayer-1.0pre7try2-new/libmpdemux/frequencies.h
--- MPlayer-1.0pre7try2-old/libmpdemux/frequencies.h	2001-11-16 14:06:48.000000000 -0800
+++ MPlayer-1.0pre7try2-new/libmpdemux/frequencies.h	2005-12-15 19:09:50.000000000 -0800
@@ -104,7 +104,7 @@
 /* --------------------------------------------------------------------- */
 
 extern struct CHANLISTS   chanlists[];
-extern struct STRTAB chanlist_names[];
+/* extern struct STRTAB chanlist_names[]; */
 
 extern int                chantab;
 extern struct CHANLIST   *chanlist;
diff -Naur MPlayer-1.0pre7try2-old/libvo/aclib_template.c MPlayer-1.0pre7try2-new/libvo/aclib_template.c
--- MPlayer-1.0pre7try2-old/libvo/aclib_template.c	2005-01-21 13:11:35.000000000 -0800
+++ MPlayer-1.0pre7try2-new/libvo/aclib_template.c	2005-12-15 19:09:50.000000000 -0800
@@ -249,8 +249,8 @@
 		MOVNTQ" %%mm6, 48(%1)\n"
 		MOVNTQ" %%mm7, 56(%1)\n"
 		:: "r" (from), "r" (to) : "memory");
-		((const unsigned char *)from)+=64;
-		((unsigned char *)to)+=64;
+		from=((const unsigned char *)from)+64;
+		to=((unsigned char *)to)+64;
 	}
 
 //	printf(" %d %d\n", (int)from&1023, (int)to&1023);
@@ -338,8 +338,8 @@
 		MOVNTQ" %%mm6, 48(%1)\n"
 		MOVNTQ" %%mm7, 56(%1)\n"
 		:: "r" (from), "r" (to) : "memory");
-		((const unsigned char *)from)+=64;
-		((unsigned char *)to)+=64;
+		from=((const unsigned char *)from)+64;
+		to=((unsigned char *)to)+64;
 	}
 
 #endif /* Have SSE */
diff -Naur MPlayer-1.0pre7try2-old/libvo/vo_dxr3.c MPlayer-1.0pre7try2-new/libvo/vo_dxr3.c
--- MPlayer-1.0pre7try2-old/libvo/vo_dxr3.c	2005-03-31 14:06:34.000000000 -0800
+++ MPlayer-1.0pre7try2-new/libvo/vo_dxr3.c	2005-12-15 19:09:50.000000000 -0800
@@ -162,7 +162,7 @@
 static int v_width, v_height;
 static int s_width, s_height;
 static int osd_w, osd_h;
-static int fullscreen;
+static int my_fullscreen;
 static int img_format;
 
 /* Configuration values
@@ -293,12 +293,12 @@
 	case VOCTRL_FULLSCREEN:
 		if (dxr3_overlay) {
 			vo_x11_fullscreen();
-			if (fullscreen) {
+			if (my_fullscreen) {
 				overlay_signalmode(overlay_data, EM8300_OVERLAY_SIGNAL_WITH_VGA);
-				fullscreen = 0;
+				my_fullscreen = 0;
 			} else {
 				overlay_signalmode(overlay_data, EM8300_OVERLAY_SIGNAL_ONLY);
-				fullscreen = 1;
+				my_fullscreen = 1;
 			}
 			return VO_TRUE;
 		}
@@ -418,7 +418,7 @@
 	}
 }
 
-static uint32_t config(uint32_t width, uint32_t height, uint32_t d_width, uint32_t d_height, uint32_t fullscreen, char *title, uint32_t format)
+static uint32_t config(uint32_t width, uint32_t height, uint32_t d_width, uint32_t d_height, uint32_t my_fullscreen, char *title, uint32_t format)
 {
 	int tmp1, tmp2, size;
 	em8300_register_t reg;
diff -Naur MPlayer-1.0pre7try2-old/mmx.h MPlayer-1.0pre7try2-new/mmx.h
--- MPlayer-1.0pre7try2-old/mmx.h	2001-10-28 03:47:21.000000000 -0800
+++ MPlayer-1.0pre7try2-new/mmx.h	2005-12-15 19:09:50.000000000 -0800
@@ -353,11 +353,11 @@
 #define	mmx_m2r(op, mem, reg) \
 	__asm__ __volatile__ (#op " %0, %%" #reg \
 			      : /* nothing */ \
-			      : "X" (mem))
+			      : "m" (mem))
 
 #define	mmx_r2m(op, reg, mem) \
 	__asm__ __volatile__ (#op " %%" #reg ", %0" \
-			      : "=X" (mem) \
+			      : "=m" (mem) \
 			      : /* nothing */ )
 
 #define	mmx_r2r(op, regs, regd) \
@@ -367,8 +367,8 @@
 	__asm__ __volatile__ ("movq %0, %%mm0\n\t" \
 			      #op " %1, %%mm0\n\t" \
 			      "movq %%mm0, %0" \
-			      : "=X" (memd) \
-			      : "X" (mems))
+			      : "=m" (memd) \
+			      : "m" (mems))
 
 #endif
 
diff -Naur MPlayer-1.0pre7try2-old/postproc/swscale_template.c MPlayer-1.0pre7try2-new/postproc/swscale_template.c
--- MPlayer-1.0pre7try2-old/postproc/swscale_template.c	2005-02-16 15:47:00.000000000 -0800
+++ MPlayer-1.0pre7try2-new/postproc/swscale_template.c	2005-12-15 19:09:50.000000000 -0800
@@ -2136,6 +2136,7 @@
 	else
 	{
 		long counter= -2*dstW;
+		uint8_t* ptr=src+filterSize;
 //		filter-= counter*filterSize/2;
 		filterPos-= counter/2;
 		dst-= counter/2;
@@ -2177,7 +2178,7 @@
 			" jnc 1b			\n\t"
 
 			: "+r" (counter), "+r" (filter)
-			: "m" (filterPos), "m" (dst), "m"(src+filterSize),
+			: "m" (filterPos), "m" (dst), "m"(ptr),
 			  "m" (src), "r" ((long)filterSize*2)
 			: "%"REG_b, "%"REG_a, "%"REG_c
 		);
@@ -2320,6 +2321,8 @@
 	{
 #endif
 	//NO MMX just normal asm ...
+	  int xInc_hi=xInc>>16;
+	  int xInc_lo=xInc&0xffff;
 	asm volatile(
 		"xor %%"REG_a", %%"REG_a"	\n\t" // i
 		"xor %%"REG_b", %%"REG_b"	\n\t" // xx
@@ -2356,7 +2359,7 @@
 		" jb 1b				\n\t"
 
 
-		:: "r" (src), "m" (dst), "m" (dstWidth), "m" (xInc>>16), "m" (xInc&0xFFFF)
+		:: "r" (src), "m" (dst), "m" (dstWidth), "m" (xInc_hi), "m" (xInc_lo)
 		: "%"REG_a, "%"REG_b, "%ecx", "%"REG_D, "%esi"
 		);
 #ifdef HAVE_MMX2
@@ -2515,6 +2518,8 @@
 	else
 	{
 #endif
+	  int xInc_hi=xInc>>16;
+	  int xInc_lo=xInc&0xffff;
 	asm volatile(
 		"xor %%"REG_a", %%"REG_a"	\n\t" // i
 		"xor %%"REG_b", %%"REG_b"		\n\t" // xx
@@ -2548,7 +2553,7 @@
 		"cmp %2, %%"REG_a"		\n\t"
 		" jb 1b				\n\t"
 
-		:: "m" (src1), "m" (dst), "m" ((long)dstWidth), "m" ((long)(xInc>>16)), "m" ((xInc&0xFFFF)),
+		:: "m" (src1), "m" (dst), "m" ((long)dstWidth), "m" ((long)(xInc_hi)), "m" ((xInc_lo)),
 		"r" (src2)
 		: "%"REG_a, "%"REG_b, "%ecx", "%"REG_D, "%esi"
 		);
