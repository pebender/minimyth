diff -Naur mythtv-trunk-26177-old/libs/libmythmetadata/globals.cpp mythtv-trunk-26177-new/libs/libmythmetadata/globals.cpp
--- mythtv-trunk-26177-old/libs/libmythmetadata/globals.cpp	2010-09-08 20:09:18.000000000 -0700
+++ mythtv-trunk-26177-new/libs/libmythmetadata/globals.cpp	2010-09-08 20:09:19.000000000 -0700
@@ -32,5 +32,5 @@
 #ifdef Q_WS_MACX
 const QString DEFAULT_VIDEOSTARTUP_DIR = QDir::homePath() + "/Movies";
 #else
-const QString DEFAULT_VIDEOSTARTUP_DIR = "/share/Movies/dvd";
+const QString DEFAULT_VIDEOSTARTUP_DIR = "/mnt/video";
 #endif
diff -Naur mythtv-trunk-26177-old/programs/mythfrontend/globalsettings.cpp mythtv-trunk-26177-new/programs/mythfrontend/globalsettings.cpp
--- mythtv-trunk-26177-old/programs/mythfrontend/globalsettings.cpp	2010-09-08 20:09:18.000000000 -0700
+++ mythtv-trunk-26177-new/programs/mythfrontend/globalsettings.cpp	2010-09-08 20:09:19.000000000 -0700
@@ -515,7 +515,7 @@
 {
     HostCheckBox *gc = new HostCheckBox("MythControlsVolume");
     gc->setLabel(QObject::tr("Use internal volume controls"));
-    gc->setValue(true);
+    gc->setValue(false);
     gc->setHelpText(QObject::tr("If enabled, MythTV will control the PCM and "
                     "master mixer volume. Disable this option if you prefer "
                     "to control the volume externally (for example, using "
@@ -539,7 +539,7 @@
     }
 #endif
 #ifdef USING_ALSA
-    gc->addSelection("ALSA:default", "ALSA:default");
+    gc->addSelection("ALSA:default", "ALSA:default", true);
 #endif
 #ifdef USING_MINGW
     gc->addSelection("DirectX:", "DirectX:");
@@ -1836,7 +1836,7 @@
     gc->setLabel(QObject::tr("Sort episodes"));
     gc->addSelection(QObject::tr("Record date"), "Date");
     gc->addSelection(QObject::tr("Original air date"), "OrigAirDate");
-    gc->addSelection(QObject::tr("Program ID"), "Id");
+    gc->addSelection(QObject::tr("Program ID"), "Id", true);
     gc->setHelpText(QObject::tr("Selects how to sort a shows episodes"));
     return gc;
 }
@@ -2140,7 +2140,7 @@
     HostComboBox *gc = new HostComboBox("PlaybackExitPrompt");
     gc->setLabel(QObject::tr("Action on playback exit"));
     gc->addSelection(QObject::tr("Just exit"), "0");
-    gc->addSelection(QObject::tr("Save position and exit"), "2");
+    gc->addSelection(QObject::tr("Save position and exit"), "2", true);
     gc->addSelection(QObject::tr("Always prompt (excluding Live TV)"), "1");
     gc->addSelection(QObject::tr("Always prompt (including Live TV)"), "4");
     gc->addSelection(QObject::tr("Prompt for Live TV only"), "8");
@@ -2155,7 +2155,7 @@
 {
     HostCheckBox *gc = new HostCheckBox("EndOfRecordingExitPrompt");
     gc->setLabel(QObject::tr("Prompt at end of recording"));
-    gc->setValue(false);
+    gc->setValue(true);
     gc->setHelpText(QObject::tr("If enabled, a menu will be displayed allowing "
                     "you to delete the recording when it has finished "
                     "playing."));
@@ -2218,7 +2218,7 @@
 // {
 //     HostCheckBox *gc = new HostCheckBox("PlaybackPreview");
 //     gc->setLabel(QObject::tr("Display live preview of recordings"));
-//     gc->setValue(true);
+//     gc->setValue(false);
 //     gc->setHelpText(QObject::tr("If enabled, a preview of the recording "
 //                     "will play in a small window on the \"Watch a "
 //                     "Recording\" menu."));
@@ -2981,7 +2981,7 @@
     GlobalCheckBox *bc = new GlobalCheckBox("LastFreeCard");
     bc->setLabel(QObject::tr("Avoid conflicts between Live TV and "
                  "scheduled shows"));
-    bc->setValue(false);
+    bc->setValue(true);
     bc->setHelpText(QObject::tr("If enabled, Live TV will choose a tuner card "
                     "that is less likely to have scheduled recordings "
                     "rather than the best card available."));
