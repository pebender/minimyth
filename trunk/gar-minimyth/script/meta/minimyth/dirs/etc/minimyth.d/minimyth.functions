################################################################################
# minimyth.functions
################################################################################

# Read and export MiniMyth environment variables
. /etc/minimyth.d/env.script

################################################################################
# mount_url
#
# This function mounts a remote directory as a local directory.
#
# This function takes three arguments:
#     URL: required argument:
#         A URL that points to the remote directory. A URL must have the
#         following form:
#             <protocol>://<username>:<password>@<server>/<path>?<options>
#         where <options> are additional mount options (-o).
#         For example:
#             nfs://server.home/home/public/music
#             cifs://user:pass@server.home/home/public/music,domain=home
#             conf:themecache.tar.bz2
#         The valid protocol values are: nfs, smbfs (aka smb), cifs, tftp and
#         conf. For nfs, smbfs and cifs, the URL points to a remote directory.
#         For tftp, the URL points to a tarfile (*.tar.bz2) on a TFTP server
#         that will be downloaded and expanded into the mount point. For conf,
#         the URL points to a tarfile (*.tar.bz2) in the MiniMyth conf directory
#         on the TFTP server that will be download and expanded into the mount
#         point.
#     MOUNT_DIR: required argument:
#         The local directory (e.g. /mnt/music) where the URL will be mounted.
################################################################################
mount_url() {
    URL="$1"
    MOUNT_DIR="$2"

    mkdir -p ${MOUNT_DIR}

    URL_PROTOCOL=`echo ${URL} | cut -d? -f1 | cut -d: -f1`
    URL_USERNAME=`echo ${URL} | cut -d? -f1 | sed 's%^[^:]*:%%' | sed 's%^//%%' | sed 's%[^@]*$%%'  | sed 's%@$%%' | cut -d: -f1`
    URL_PASSWORD=`echo ${URL} | cut -d? -f1 | sed 's%^[^:]*:%%' | sed 's%^//%%' | sed 's%[^@]*$%%'  | sed 's%@$%%' | cut -d: -f2`
    URL_SERVER=`  echo ${URL} | cut -d? -f1 | sed 's%^[^:]*:%%' | sed 's%^//%%' | sed 's%^[^@]*@%%' | sed 's%/[^/]*%%g'`
    URL_PATH=`    echo ${URL} | cut -d? -f1 | sed 's%^[^:]*:%%' | sed 's%^//[^/]*/%/%'`
    URL_OPTIONS=` echo ${URL}               | sed 's%^[^?]*%%'  | sed 's%^?%%'`

    MOUNT_OPTIONS="${URL_OPTIONS}"

    MOUNT_VFSTYPE=""
    EXTRA_OPTIONS=""
    if   [ "${URL_PROTOCOL}" = "nfs" ] ; then
        MOUNT_VFSTYPE=nfs
    	MOUNT_DEVICE="${URL_SERVER}:${URL_PATH}"
        MOUNT_OPTIONS="${MOUNT_OPTIONS},rsize=8192,wsize=8192"
    elif [ "${URL_PROTOCOL}" = "smbfs" ] || [ "${URL_PROTOCOL}" = "smb" ] ; then
        MOUNT_VFSTYPE=smbfs
        EXTRA_OPTIONS="-n"
    	MOUNT_DEVICE="//${URL_SERVER}${URL_PATH}"
        if [ ! "${URL_USERNAME}" = "" ] ; then
            MOUNT_OPTIONS="${MOUNT_OPTIONS},username=${URL_USERNAME}"
        fi
        if [ ! "${URL_PASSWORD}" = "" ] ; then
            MOUNT_OPTIONS="${MOUNT_OPTIONS},password=${URL_PASSWORD}"
        fi
    elif [ "${URL_PROTOCOL}" = "cifs" ] ; then
        MOUNT_VFSTYPE=cifs
        EXTRA_OPTIONS="-n"
    	MOUNT_DEVICE="//${URL_SERVER}${URL_PATH}"
        if [ ! "${URL_USERNAME}" = "" ] ; then
            MOUNT_OPTIONS="${MOUNT_OPTIONS},username=${URL_USERNAME}"
        fi
        if [ ! "${URL_PASSWORD}" = "" ] ; then
            MOUNT_OPTIONS="${MOUNT_OPTIONS},password=${URL_PASSWORD}"
        fi
    elif [ "${URL_PROTOCOL}" = "tftp" ] ; then
	touch ${MOUNT_DIR}
        [ $? = 0 ] || make_dir_rw ${MOUNT_DIR}
	TARFILE="tmp.tar.bz2~"
	cd ${MOUNT_DIR}
    	tftp -g -r ${URL_PATH} -l ${TARFILE} ${URL_SERVER}
	tar -jxf ${TARFILE}
	rm -f ${TARFILE}
    elif [ "${URL_PROTOCOL}" = "conf" ] ; then
	touch ${MOUNT_DIR}
        [ $? = 0 ] || make_dir_rw ${MOUNT_DIR}
	TARFILE="tmp.tar.bz2~"
	cd ${MOUNT_DIR}
	get_file ${URL_PATH} ${TARFILE}
	tar -jxf ${TARFILE}
	rm -f ${TARFILE}
    fi

    if [ -n "${MOUNT_VFSTYPE}" ] ; then
        MOUNT_OPTIONS=`echo ${MOUNT_OPTIONS} | sed 's%^,%%'`
        [ -n "${MOUNT_OPTIONS}" ] && MOUNT_OPTIONS="-o ${MOUNT_OPTIONS}"
        mount -t ${MOUNT_VFSTYPE} ${EXTRA_OPTIONS} ${MOUNT_OPTIONS} ${MOUNT_DEVICE} ${MOUNT_DIR}
    fi
}

################################################################################
# get_file
################################################################################
get_file() {
    REMOTE_FILE=$1
    LOCAL_FILE=$2

    mkdir -p `echo /tmp/${LOCAL_FILE} | sed 's%/[^/]*$%%'`

    TMP_FILE=${LOCAL_FILE}~

    rm -f ${TMP_FILE}
    FILE_GOT=0
    [ ${FILE_GOT} = 0 ] && 
        tftp -g -r ${MM_TFTP_ROOTDIR}/conf/`hostname`/${REMOTE_FILE} -l ${TMP_FILE} ${MM_TFTP_SERVER} && FILE_GOT=1
    [ ${FILE_GOT} = 0 ] && 
        tftp -g -r ${MM_TFTP_ROOTDIR}/conf/${REMOTE_FILE}            -l ${TMP_FILE} ${MM_TFTP_SERVER} && FILE_GOT=1
    [ ${FILE_GOT} = 1 ] && 
        mv -f ${TMP_FILE} ${LOCAL_FILE}
    rm -f ${TMP_FILE}
}

################################################################################
# execute_and_log
################################################################################
execute_and_log() {
    COMMAND=$1

    echo "--- execution start: ${COMMAND}"  >> ${MM_LOGFILE} 2>&1
    ${COMMAND}                              >> ${MM_LOGFILE} 2>&1
    echo "--- execution end  : ${COMMAND}"  >> ${MM_LOGFILE} 2>&1
}

################################################################################
# Myth database access commands.
################################################################################
run_mythdb_command() {
    COMMAND=$1

    DBHostName=`cat /root/.mythtv/mysql.txt | grep "^DBHostName" | sed -e 's%^[^=]*=%%'`
    DBUserName=`cat /root/.mythtv/mysql.txt | grep "^DBUserName" | sed -e 's%^[^=]*=%%'`
    DBPassword=`cat /root/.mythtv/mysql.txt | grep "^DBPassword" | sed -e 's%^[^=]*=%%'`
    DBName=`cat /root/.mythtv/mysql.txt     | grep "^DBName"     | sed -e 's%^[^=]*=%%'`

    mysql \
	--host=${DBHostName} \
	--user=${DBPassword} \
	--password=${DBPassword} \
	--exec="use ${DBName} ; ${COMMAND} ;"
}

update_mythdb_settings() {
    VALUE=$1
    DATA=$2
    HOSTNAME=`hostname`

    run_mythdb_command "UPDATE settings SET data=\"${DATA}\" WHERE value=\"${VALUE}\" AND hostname=\"${HOSTNAME}\""
}

dump_mythdb_settings() {
    HOSTNAME=`hostname`

    run_mythdb_command "SELECT * FROM settings WHERE hostname=\"${HOSTNAME}\""
}

################################################################################
# Use unionfs to make a ro directory into a rw directory.
################################################################################
make_dir_rw() {
    DIR=$1

    modprobe unionfs

    UNIONFS=/var/unionfs
    UNIONFS_RO=${UNIONFS}/ro
    UNIONFS_RW=${UNIONFS}/rw

    if [ ! -e ${UNIONFS} ] ; then
	mkdir -p /var/unionfs
        mount -t tmpfs tmpfs ${UNIONFS}
    fi
    mkdir -p ${UNIONFS_RO}${DIR}
    mkdir -p ${UNIONFS_RW}${DIR}

    mount --bind ${DIR} ${UNIONFS_RO}${DIR}
    mount -t unionfs -o dirs=${UNIONFS_RW}${DIR}=rw:${UNIONFS_RO}${DIR}=ro,copyup=preserve none ${DIR}
}
