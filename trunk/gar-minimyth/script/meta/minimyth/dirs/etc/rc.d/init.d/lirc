#!/bin/sh
################################################################################
# lirc
#
# This script configures and starts LIRC.
################################################################################
. /etc/rc.d/functions

start() {

    local DELAY
    local LIRC_DRIVER

    mm_message_output info 'starting remote control ...'

    # lircd is already running, so return.
    if /usr/bin/test -n "`/bin/pidof lircd`" ; then
        return
    fi

    # Load the LIRC configuration files.
    if /usr/bin/test -n "${MM_LIRC_REMOTE}" && /usr/bin/test -n "${MM_LIRC_DRIVER}" ; then
        if /usr/bin/test ! -e /etc/lircd.conf ; then
            if /usr/bin/test -e /etc/lirc.d/lircd.conf.${MM_LIRC_REMOTE}.${MM_LIRC_DRIVER} ; then
                /bin/cat /etc/lirc.d/lircd.conf.${MM_LIRC_REMOTE}.${MM_LIRC_DRIVER} >> /etc/lircd.conf
            fi
        fi
        if /usr/bin/test ! -e /etc/lircrc ; then
            if /usr/bin/test -e /etc/lirc.d/lircrc.${MM_LIRC_REMOTE}.${MM_LIRC_DRIVER} ; then
                /bin/cat /etc/lirc.d/lircrc.${MM_LIRC_REMOTE}.${MM_LIRC_DRIVER} >> /etc/lircrc
            fi
        fi
    fi

    # Load kernel module (if needed).
    if /usr/bin/test -n "${MM_LIRC_KERNEL_MODULE}" ; then
        /sbin/modprobe ${MM_LIRC_KERNEL_MODULE} ${MM_LIRC_KERNEL_MODULE_OPTIONS}
    fi

    # Start the LIRC daemon.
    if /usr/bin/test -n "${MM_LIRC_DRIVER}" && /usr/bin/test -n "${MM_LIRC_DEVICE}" ; then
        /bin/mkdir -p /var/lock
        /bin/mkdir -p /var/run

        # Wait up to 60 seconds for the device to appear in the device file system.
        DELAY=0
        while /usr/bin/test ! -e ${MM_LIRC_DEVICE} && /usr/bin/test ${DELAY} -lt 60 ; do
            /bin/sleep 1
            DELAY=$((DELAY + 1))
            mm_message_output info "waiting for remote control device (${DELAY} seconds) ..."
        done
        if /usr/bin/test ! -e ${MM_LIRC_DEVICE} ; then
            mm_message_output err 'error: timed out waiting for remote control device.'
            exit 1
        fi

        LIRC_DRIVER=`/usr/sbin/lircd --driver=help 2>&1 | /bin/sed -e 's%[[:cntrl:]]%%g' | /bin/grep -i -e "^${MM_LIRC_DRIVER}$"`
        /usr/bin/test -z "${LIRC_DRIVER}" && LIRC_DRIVER="default"

        /usr/sbin/lircd \
            --driver=${LIRC_DRIVER} --device=${MM_LIRC_DEVICE} \
            --output=/dev/lircd1 --pidfile=/var/run/lircd1.pid \
            --listen=$((8765 -1 + 1))
        /usr/sbin/lircd \
            --driver=null \
            --output=/dev/lircd  --pidfile=/var/run/lircd.pid  \
            --connect=localhost:$((8765 -1 + 1))
    fi

    # Auto-configure usage of 'irexec'.
    if /usr/bin/test "${MM_LIRC_IREXEC_ENABLED}" = "auto" ; then
        /usr/bin/logger -t minimyth -p "local0.info" "MM_LIRC_IREXEC_ENABLED is 'auto'. attempting to auto-configure usage of 'irexec'."
        MM_LIRC_IREXEC_ENABLED='no'
        if /usr/bin/test -e /etc/lircrc ; then
            if /bin/cat /etc/lircrc | /bin/grep -q -e '^ *prog *= *irexec' ; then
                MM_LIRC_IREXEC_ENABLED='yes'
            fi
        fi
        /usr/bin/logger -t minimyth -p "local0.info" "auto-configured usage of 'irexec' as '${MM_LIRC_IREXEC_ENABLED}'."
    fi

    # Start the irexec daemon.
    if /usr/bin/test "${MM_LIRC_IREXEC_ENABLED}" = "yes" ; then
        /usr/bin/irexec -d /etc/lircrc
    fi
}

stop() {
    mm_message_output info 'stopping remote control ...'

    /usr/bin/test -n "`/bin/pidof lircd`" && /usr/bin/killall lircd
}

case $1 in
    start) start ;;
    stop)  stop  ;;
esac

exit 0
