#!/bin/sh
################################################################################
# lirc
#
# This script configures and starts LIRC.
################################################################################
. /etc/rc.d/functions

# Find USB devices associated with each LIRC device and enable ACPI wakeup.
remote_wakeup_enable() {
    local lirc_list
    local lirc
    local busnum
    local serial
    local entry
    local device
    local status

    if /usr/bin/test ! -r "/sys/class/lirc" ; then
        return
    fi
    lirc_list=`cd /sys/class/lirc ; ls -1`
    
    for lirc in ${lirc_list} ; do
        if /usr/bin/test -z "${lirc}" ; then
            continue
        fi
        if /usr/bin/test ! -r "/sys/class/lirc/${lirc}/device/busnum" ; then
            continue
        fi
        busnum=`/bin/cat "/sys/class/lirc/${lirc}/device/busnum" 2> /dev/null`
        if /usr/bin/test $? -ne 0 || /usr/bin/test -z "${busnum}" ; then
            continue
        fi
    
        if /usr/bin/test ! -r "/sys/class/lirc/${lirc}/device/bus/devices/usb${busnum}/serial" ; then
            continue
        fi
        serial=`/bin/cat "/sys/class/lirc/${lirc}/device/bus/devices/usb${busnum}/serial"`
        if /usr/bin/test $? -ne 0 || /usr/bin/test -z "${busnum}" ; then
            continue
        fi

        if /usr/bin/test ! -r "/proc/acpi/wakeup" ; then
            continue
        fi
        entry=`/bin/cat /proc/acpi/wakeup | /bin/grep -e "${serial}\$" | /bin/sed -e 's%  *% %g'`
        if /usr/bin/test $? -ne 0 || /usr/bin/test -z "${entry}" ; then
            continue
        fi

        device=`/bin/echo ${entry} | /usr/bin/cut -d ' ' -f 1`
        if /usr/bin/test $? -ne 0 || /usr/bin/test -z "${device}" ; then
            continue
        fi

        status=`/bin/echo ${entry} | /usr/bin/cut -d ' ' -f 3`
        if /usr/bin/test $? -ne 0 || /usr/bin/test -z "${status}" ; then
            continue
        fi

        if /usr/bin/test ! -w "/proc/acpi/wakeup" ; then
            continue
        fi
        if /usr/bin/test ! "${status}" = "enabled" ; then
            /bin/echo ${device} > /proc/acpi/wakeup
            if /usr/bin/test $? -ne 0 ; then
                continue
            fi
        fi
    done
}

device_item_create() {
    local device=$1
    local driver=$2
    local remote=$3

    local device_item

    local details

    details="device='${device}', driver='${driver}' and remote='${remote}'"

    # Determine 'lircd.conf' file.
    lircd_conf=
    if   /usr/bin/test -e /etc/lircd.conf ; then
        lircd_conf="/etc/lircd.conf"
    elif /usr/bin/test -e /etc/lirc.d/lircd.conf.d/lircd.conf.${driver}.${remote} ; then
        lircd_conf="/etc/lirc.d/lircd.conf.d/lircd.conf.${driver}.${remote}"
    elif /usr/bin/test -e /etc/lirc.d/lircd.conf.d/lircd.conf.${driver} ; then
        lircd_conf="/etc/lirc.d/lircd.conf.d/lircd.conf.${driver}"
    else
        lircd_conf=
    fi

    # If there is no 'lircd.conf' file, then there do not use the LIRC device.
    if /usr/bin/test -z "${lircd_conf}" ; then
        /usr/bin/logger -t minimyth -p "local0.warn" "warning: 'lircd.conf' file not found for remote control device: ${details}."
        return
    fi

    details="${details} lircd.conf='${lircd_conf}'"

    # Convert driver to the the lirc daemon appropriate driver.
    driver=`/usr/sbin/lircd --driver=help 2>&1 | /bin/sed -e 's%[[:cntrl:]]%%g' | /bin/grep -i -e "^${driver}$"`
    if /usr/bin/test -z "${driver}" ; then
        driver="default"
    fi

    /usr/bin/logger -t minimyth -p "local0.info" "using remote control device: ${details}."

    device_item="${device},${driver},${remote},${lircd_conf}"

    /bin/echo ${device_item}
}

start() {

    local daemon
    local daemon_master
    local delay
    local device
    local device_count
    local device_item
    local device_list
    local driver
    local file
    local idVendor
    local idProduct
    local index
    local lircd_conf
    local map
    local remote

    mm_message_output info "starting remote control ..."

    # Create device list.
    # First, add user configured LIRC device.
    # Second, add autodetected LIRC device(s).
    device_list=
    if /usr/bin/test -n "${MM_LIRC_DRIVER}" ; then
        device_list="${device_list} `device_item_create ${MM_LIRC_DEVICE} ${MM_LIRC_DRIVER} ${MM_LIRC_REMOTE}`"
    fi
    if /usr/bin/test "${MM_LIRC_AUTO_ENABLED}" = "yes" ; then
        if /usr/bin/test -d /sys/class/lirc ; then
            for device in `cd /sys/class/lirc ; ls -1` ; do
                idVendor=
                idProcuct=
                driver=
                remote=
                if /usr/bin/test -e /sys/class/lirc/${device}/device/idVendor  ; then
                    idVendor=`/bin/cat /sys/class/lirc/${device}/device/idVendor`
                fi
                if /usr/bin/test -e /sys/class/lirc/${device}/device/idProduct ; then
                    idProduct=`/bin/cat /sys/class/lirc/${device}/device/idProduct`
                fi
                if /usr/bin/test ! -z "${idVendor}"  && /usr/bin/test ! "${idVendor}"  = "0000"  || \
                   /usr/bin/test ! -z "${idProduct}" && /usr/bin/test ! "${idProduct}" = "0000" ; then
                    map=`/bin/cat /etc/hardware.d/usb2lirc.map \
                        | /bin/sed -e 's%#.*$%%g' -e 's%^ *%%' -e 's% *$%%' -e 's% *, *%,%g' \
                        | grep -e "^${idVendor},${idProduct}"`
                    if /usr/bin/test -n "${map}" ; then
                        driver=`/bin/echo ${map} | /usr/bin/cut -d ',' -f 3`
                        remote=`/bin/echo ${map} | /usr/bin/cut -d ',' -f 4`
                    fi
                fi
                device_list="${device_list} `device_item_create /dev/${device} ${driver} ${remote}`"
            done
        fi
    fi
    device_list=`/bin/echo ${device_list} | /bin/sed -e 's%  *% %g' -e 's%^ %%' -e 's% $%%'`

    # Count the LIRC devices.
    device_count=0
    for device in ${device_list} ; do
        device_count=$((${device_count}+1))
    done

    # There are no remote control devices, so there is no need to continue.
    if /usr/bin/test ${device_count} -eq 0 ; then
        /usr/bin/logger -t minimyth -p "local0.warn" \
            "no remote control device was found."
        return
    fi

    # Load user configured kernel module.
    if /usr/bin/test -n "${MM_LIRC_KERNEL_MODULE}" ; then
        /sbin/modprobe ${MM_LIRC_KERNEL_MODULE} ${MM_LIRC_KERNEL_MODULE_OPTIONS}
        # Wait up to 60 seconds for the device to appear in the device file system.
        delay=0
        while /usr/bin/test ! -e ${MM_LIRC_DEVICE} && /usr/bin/test ${delay} -lt 60 ; do
            /bin/sleep 1
            delay=$((delay + 1))
            mm_message_output info "waiting for remote control device (${delay} seconds) ..."
        done
        if /usr/bin/test ! -e ${MM_LIRC_DEVICE} ; then
            mm_message_output err "error: timed out waiting for remote control device."
            exit 1
        fi
    fi

    # Determine master LIRC daemon.
    # The master LIRC daemon combines the LIRC daemons for multiple LIRC devices.
    # Therefore, if there is more than one LIRC device, then we need a master LIRC daemon.
    daemon_master=
    if /usr/bin/test ${device_count} -gt 1 ; then
        daemon_master="/usr/sbin/lircd"
        daemon_master="${daemon_master} --driver=null"
        daemon_master="${daemon_master} --output=/dev/lircd --pidfile=/var/run/lircd.pid"
        index=1
        while /usr/bin/test ${index} -le ${device_count} ; do
            daemon_master="${daemon_master} --connect=localhost:$((8765 + ${index} - 1))"
            index=$((${index} + 1))
        done
    fi

    # If there is no lircrc file, then create it.
    if /usr/bin/test ! -e /etc/lircrc ; then
        /bin/echo "# autogenerated" >> /etc/lircrc
        /bin/echo "include /etc/lirc.d/lircrc" >> /etc/lircrc
        if /usr/bin/test "${MM_LIRC_SLEEP_ENABLED}" = "yes" ; then
            /bin/echo "include /etc/lirc.d/lircrc.power.sleep" >> /etc/lircrc
        fi
        for file in `/bin/ls /etc/lirc.d/lircrc.d/lircrc.* 2> /dev/null` ; do
            /bin/echo "include ${file}" >> /etc/lircrc
        done
    fi

    # Create directories used by the LIRC daemon.
    /bin/mkdir -p /var/lock
    /bin/mkdir -p /var/run

    # Start an LIRC daemon for each device.
    index=1
    for device_item in ${device_list} ; do
        device=`/bin/echo ${device_item} | /usr/bin/cut -d ',' -f1`
        driver=`/bin/echo ${device_item} | /usr/bin/cut -d ',' -f2`
        remote=`/bin/echo ${device_item} | /usr/bin/cut -d ',' -f3`
        lircd_conf=`/bin/echo ${device_item} | /usr/bin/cut -d ',' -f4`
        daemon=
        if /usr/bin/test -n "${daemon_master}" ; then
            daemon="/usr/sbin/lircd"
            daemon="${daemon} --device=${device} --driver=${driver}"
            daemon="${daemon} --output=/dev/lircd${index} --pidfile=/var/run/lircd${index}.pid"
            daemon="${daemon} --listen=$((8765 + ${index} - 1))"
            daemon="${daemon} ${lircd_conf}"
        else
            daemon="/usr/sbin/lircd"
            daemon="${daemon} --device=${device} --driver=${driver}"
            daemon="${daemon} --output=/dev/lircd --pidfile=/var/run/lircd.pid"
            daemon="${daemon} ${lircd_conf}"
        fi
        /usr/bin/logger -t minimyth -p "local0.info" "started '${daemon}'."
        ${daemon}
        index=$((${index} + 1))
    done

    # Start master LIRC daemon.
    if /usr/bin/test -n "${daemon_master}" ; then
        ${daemon_master}
    fi

    # Auto-configure usage of 'irexec'.
    if /usr/bin/test "${MM_LIRC_IREXEC_ENABLED}" = "auto" ; then
        /usr/bin/logger -t minimyth -p "local0.info" "attempting to auto-configure usage of 'irexec'."
        MM_LIRC_IREXEC_ENABLED='no'
        if /usr/bin/test -e /etc/lircrc ; then
            # Only one level of includes is supported.
            lircrc_files="/etc/lircrc `/bin/cat /etc/lircrc | /bin/grep -e '^include ' | /bin/sed -e 's%^include *%%'`"
            for lircrc_file in ${lircrc_files} ; do
                if /bin/cat ${lircrc_file} | /bin/grep -q -e '^ *prog *= *irexec' ; then
                    MM_LIRC_IREXEC_ENABLED='yes'
                fi
           done
        fi
        /usr/bin/logger -t minimyth -p "local0.info" "auto-configured usage of 'irexec' as '${MM_LIRC_IREXEC_ENABLED}'."
    fi

    # Start the irexec daemon.
    if /usr/bin/test "${MM_LIRC_IREXEC_ENABLED}" = "yes" ; then
        /usr/bin/irexec -d /etc/lircrc
    fi

    # Enable wakeup on remote.
    if /usr/bin/test "${MM_LIRC_WAKEUP_ENABLED}" = "yes" ; then
        remote_wakeup_enable
    fi
}

stop() {
    mm_message_output info "stopping remote control ..."

    /usr/bin/test -n "`/bin/pidof irexec`" && /usr/bin/killall irexec 
    /usr/bin/test -n "`/bin/pidof lircd`"  && /usr/bin/killall lircd
}

case $1 in
    start) start ;;
    stop)  stop  ;;
esac

exit 0
