#!/bin/sh
################################################################################
# lirc
#
# This script configures and starts LIRC.
################################################################################
. /etc/rc.d/functions

remote_wakeup_enable() {
    local wakeup_device_list="$1"

    local entry
    local device
    local status

    for device in ${wakeup_device_list} ; do
        if /usr/bin/test ! -r "/proc/acpi/wakeup" ; then
            continue
        fi
        entry=`/bin/cat /proc/acpi/wakeup | /bin/grep -e "^${device}" | /bin/sed -e 's%  *% %g'`
        if /usr/bin/test $? -ne 0 || /usr/bin/test -z "${entry}" ; then
            continue
        fi

        status=`/bin/echo ${entry} | /usr/bin/cut -d ' ' -f 3`
        if /usr/bin/test $? -ne 0 || /usr/bin/test -z "${status}" ; then
            continue
        fi

        if /usr/bin/test ! -w "/proc/acpi/wakeup" ; then
            continue
        fi
        if /usr/bin/test ! "${status}" = "enabled" ; then
            /bin/echo ${device} > /proc/acpi/wakeup
            if /usr/bin/test $? -ne 0 ; then
                continue
            fi
        fi
    done
}

start() {

    local daemon
    local daemon_master
    local delay
    local device
    local device_item
    local driver
    local file
    local index
    local instance
    local lircd_conf
    local map
    local remote

    # There are no remote control devices, so there is no need to continue.
    if /usr/bin/test ${MM_DEVICE_COUNT} -eq 0 ; then
        return
    fi

    mm_message_output info "starting remote control(s) ..."

    # Load user configured kernel module.
    if /usr/bin/test -n "${MM_LIRC_KERNEL_MODULE}" ; then
        /sbin/modprobe ${MM_LIRC_KERNEL_MODULE} ${MM_LIRC_KERNEL_MODULE_OPTIONS}
        # Wait up to 60 seconds for the device to appear in the device file system.
        delay=0
        while /usr/bin/test ! -e ${MM_LIRC_DEVICE} && /usr/bin/test ${delay} -lt 60 ; do
            /bin/sleep 1
            delay=$((delay + 1))
            mm_message_output info "waiting for remote control device (${delay} seconds) ..."
        done
        if /usr/bin/test ! -e ${MM_LIRC_DEVICE} ; then
            mm_message_output err "error: timed out waiting for remote control device."
            exit 1
        fi
    fi

    # Determine master LIRC daemon.
    # The master LIRC daemon combines the LIRC daemons for multiple LIRC devices.
    # Therefore, if there is more than one LIRC device, then we need a master LIRC daemon.
    daemon_master=
    if /usr/bin/test ${MM_LIRC_DEVICE_COUNT} -gt 1 ; then
        daemon_master="/usr/sbin/lircd"
        daemon_master="${daemon_master} --driver=null"
        daemon_master="${daemon_master} --output=/dev/lircd --pidfile=/var/run/lircd.pid"
        index=1
        while /usr/bin/test ${index} -le ${MM_LIRC_DEVICE_COUNT} ; do
            daemon_master="${daemon_master} --connect=localhost:$((8765 + ${index} - 1))"
            index=$((${index} + 1))
        done
    fi

    # If there is no lircd.conf file, then create it.
    if /usr/bin/test ! -e /etc/lircd.conf ; then
        /bin/echo "# autogenerated" >> /etc/lircd.conf
        for file in `/bin/ls /etc/lirc.d/lircd.conf.d/lircd.conf.* 2> /dev/null` ; do
            /bin/echo "include ${file}" >> /etc/lircd.conf
        done
    fi

    # If there is no lircrc file, then create it.
    if /usr/bin/test ! -e /etc/lircrc ; then
        /bin/echo "# autogenerated" >> /etc/lircrc
        /bin/echo "include /etc/lirc.d/lircrc" >> /etc/lircrc
        if /usr/bin/test "${MM_LIRC_SLEEP_ENABLED}" = "yes" ; then
            /bin/echo "include /etc/lirc.d/lircrc.power.sleep" >> /etc/lircrc
        fi
        if /usr/bin/test "${MM_EXTERNAL_VOLUME_ENABLED}" = "yes" ; then
            /bin/echo "include /etc/lirc.d/lircrc.volume.external" >> /etc/lircrc
        else
            /bin/echo "include /etc/lirc.d/lircrc.volume.internal" >> /etc/lircrc
        fi
        for file in `/bin/ls /etc/lirc.d/lircrc.d/lircrc.* 2> /dev/null` ; do
            /bin/echo "include ${file}" >> /etc/lircrc
        done
    fi

    # Create directories used by the LIRC daemon.
    /bin/mkdir -p /var/lock
    /bin/mkdir -p /var/run

    # Start an LIRC daemon for each device.
    index=1
    for device_item in ${MM_LIRC_DEVICE_LIST} ; do
        device=`/bin/echo ${device_item} | /usr/bin/cut -d ',' -f1`
        driver=`/bin/echo ${device_item} | /usr/bin/cut -d ',' -f2`
        remote=`/bin/echo ${device_item} | /usr/bin/cut -d ',' -f3`
        daemon=
        if /usr/bin/test -n "${daemon_master}" ; then
            instance=`/bin/echo ${device} | /bin/sed -e 's%//*%-%g' | /bin/sed -e 's%^-dev-%%'`
            daemon="/usr/sbin/lircd"
            daemon="${daemon} --device=${device} --driver=${driver}"
            daemon="${daemon} --output=/dev/lircd-${instance} --pidfile=/var/run/lircd-${instance}.pid"
            daemon="${daemon} --listen=$((8765 + ${index} - 1))"
        else
            daemon="/usr/sbin/lircd"
            daemon="${daemon} --device=${device} --driver=${driver}"
            daemon="${daemon} --output=/dev/lircd --pidfile=/var/run/lircd.pid"
        fi
        /usr/bin/logger -t minimyth -p "local0.info" "started '${daemon}'."
        ${daemon}
        index=$((${index} + 1))
    done

    # Start master LIRC daemon.
    if /usr/bin/test -n "${daemon_master}" ; then
        ${daemon_master}
    fi

    # Auto-configure usage of 'irexec'.
    if /usr/bin/test "${MM_LIRC_IREXEC_ENABLED}" = "auto" ; then
        /usr/bin/logger -t minimyth -p "local0.info" "attempting to auto-configure usage of 'irexec'."
        MM_LIRC_IREXEC_ENABLED='no'
        if /usr/bin/test -e /etc/lircrc ; then
            # Only one level of includes is supported.
            lircrc_files="/etc/lircrc `/bin/cat /etc/lircrc | /bin/grep -e '^include ' | /bin/sed -e 's%^include *%%'`"
            for lircrc_file in ${lircrc_files} ; do
                if /bin/cat ${lircrc_file} | /bin/grep -q -e '^ *prog *= *irexec' ; then
                    MM_LIRC_IREXEC_ENABLED='yes'
                fi
           done
        fi
        /usr/bin/logger -t minimyth -p "local0.info" "auto-configured usage of 'irexec' as '${MM_LIRC_IREXEC_ENABLED}'."
    fi

    # Start the irexec daemon.
    if /usr/bin/test "${MM_LIRC_IREXEC_ENABLED}" = "yes" ; then
        /usr/bin/irexec -d /etc/lircrc
    fi

    # Enable wakeup on remote.
    remote_wakeup_enable "${MM_LIRC_WAKEUP_DEVICE_LIST}"
}

stop() {
    mm_message_output info "stopping remote control ..."

    /usr/bin/test -n "`/bin/pidof irexec`" && /usr/bin/killall irexec 
    /usr/bin/test -n "`/bin/pidof lircd`"  && /usr/bin/killall lircd
}

case $1 in
    start) start ;;
    stop)  stop  ;;
esac

exit 0
