################################################################################
# MM_LIRC configuration variables and files.
################################################################################
_MM_LIRC_wakeup_device_list_create() {
    local lirc_device_list="$1"

    local lirc_list
    local lirc
    local name
    local busnum
    local serial
    local entry
    local device
    local wakeup_device_list

    if /usr/bin/test ! -r "/sys/class/lirc" ; then
        return
    fi
    lirc_list=`cd /sys/class/lirc ; ls -1`
    
    for lirc in ${lirc_list} ; do
        if /usr/bin/test -z "${lirc}" ; then
            continue
        fi

        name="/dev/`/sbin/udevadm info --query=name --path=/sys/class/lirc/${lirc}`"
        /bin/echo " ${lirc_device_list}" | grep -q " ${name},"
        if /usr/bin/test $? -ne 0 ; then
            continue
        fi

        if /usr/bin/test ! -r "/sys/class/lirc/${lirc}/device/busnum" ; then
            continue
        fi
        busnum=`/bin/cat "/sys/class/lirc/${lirc}/device/busnum" 2> /dev/null`
        if /usr/bin/test $? -ne 0 || /usr/bin/test -z "${busnum}" ; then
            continue
        fi
    
        if /usr/bin/test ! -r "/sys/class/lirc/${lirc}/device/subsystem/devices/usb${busnum}/serial" ; then
            continue
        fi
        serial=`/bin/cat "/sys/class/lirc/${lirc}/device/subsystem/devices/usb${busnum}/serial"`
        if /usr/bin/test $? -ne 0 || /usr/bin/test -z "${busnum}" ; then
            continue
        fi

        if /usr/bin/test ! -r "/proc/acpi/wakeup" ; then
            continue
        fi
        entry=`/bin/cat /proc/acpi/wakeup | /bin/grep -e "${serial}\$" | /bin/sed -e 's%  *% %g'`
        if /usr/bin/test $? -ne 0 || /usr/bin/test -z "${entry}" ; then
            continue
        fi

        device=`/bin/echo ${entry} | /usr/bin/cut -d ' ' -f 1`
        if /usr/bin/test $? -ne 0 || /usr/bin/test -z "${device}" ; then
            continue
        fi

        wakeup_device_list="${wakeup_device_list} ${device}"
    done

    wakeup_device_list=`/bin/echo "${wakeup_device_list}" | mm_uniq`

    /bin/echo "${wakeup_device_list}"
}


_MM_LIRC_lirc_device_item_create() {
    local device=$1
    local driver=$2
    local remote=$3

    local device_item

    local details

    details="device='${device}', driver='${driver}' and remote='${remote}'"

    # Determine 'lircd.conf' file.
    lircd_conf=
    if   /usr/bin/test -e /etc/lircd.conf ; then
        lircd_conf="/etc/lircd.conf"
    elif /usr/bin/test -e /etc/lirc.d/lircd.conf.d/lircd.conf.${driver}.${remote} ; then
        lircd_conf="/etc/lirc.d/lircd.conf.d/lircd.conf.${driver}.${remote}"
    elif /usr/bin/test -e /etc/lirc.d/lircd.conf.d/lircd.conf.${driver} ; then
        lircd_conf="/etc/lirc.d/lircd.conf.d/lircd.conf.${driver}"
    else
        lircd_conf=
    fi

    # If there is no 'lircd.conf' file, then there do not use the LIRC device.
    if /usr/bin/test -z "${lircd_conf}" ; then
        /usr/bin/logger -t minimyth -p "local0.warn" "warning: 'lircd.conf' file not found for remote control device: ${details}."
        return
    fi

    details="${details} lircd.conf='${lircd_conf}'"

    # Convert driver to the the lirc daemon appropriate driver.
    driver=`/usr/sbin/lircd --driver=help 2>&1 | /bin/sed -e 's%[[:cntrl:]]%%g' | /bin/grep -i -e "^${driver}$"`
    if /usr/bin/test -z "${driver}" ; then
        driver="default"
    fi

    /usr/bin/logger -t minimyth -p "local0.info" "using remote control device: ${details}."

    device_item="${device},${driver},${remote},${lircd_conf}"

    /bin/echo ${device_item}
}

conf_clean_MM_LIRC() {
    /bin/rm -rf /tmp/init.conf.lirc

    return 0
}

conf_check_MM_LIRC() {
    # Check for obsolete value.
    if /usr/bin/test "${MM_LIRC_DRIVER}"        = "auto"           ; then
        mm_message_output err "error: 'minimyth.conf' is out of date. MM_LIRC_DRIVER='auto' is obsolete."
    fi
    if /usr/bin/test "${MM_LIRC_DRIVER}"        = "mceusbnew"      ; then
        mm_message_output err "error: 'minimyth.conf' is out of date. MM_LIRC_DRIVER='mceusbnew' is obsolete."
    fi
    if /usr/bin/test "${MM_LIRC_KERNEL_MODULE}" = "lirc_mceusbnew" ; then
        mm_message_output err "error: 'minimyth.conf' is out of date. MM_LIRC_KERNEL_MODULE='lirc_mceusbnew' is obsolete."
    fi
    if /usr/bin/test "${MM_LIRC_REMOTE}"        = "auto"           ; then
        mm_message_output err "error: 'minimyth.conf' is out of date. MM_LIRC_REMOTE='auto' is obsolete."
    fi
    if /usr/bin/test "${MM_LIRC_REMOTE}"        = "mceusbnew"      ; then
        mm_message_output err "error: 'minimyth.conf' is out of date. MM_LIRC_REMOTE='mceusbnew' is obsolete."
    fi

    if /usr/bin/test -z "${MM_LIRC_DRIVER}" || /usr/bin/test "${MM_LIRC_DRIVER}" = "none" ; then
        if /usr/bin/test ! -z "${MM_LIRC_REMOTE}" && /usr/bin/test ! "${MM_LIRC_REMOTE}" = "none" ; then
            mm_message_output err "error: 'MM_LIRC_DRIVER' must be set when 'MM_LIRC_REMOTE is set."
        fi
        if /usr/bin/test ! -z "${MM_LIRC_DEVICE}" ; then
            mm_message_output err "error: 'MM_LIRC_DRIVER' must be set when 'MM_LIRC_DEVICE' is set."
        fi
        if /usr/bin/test ! -z "${MM_LIRC_KERNEL_MODULE}" ; then
            mm_message_output err "error: 'MM_LIRC_DRIVER' must be set when 'MM_LIRC_KERNEL_MODULE' is set."
        fi
        if /usr/bin/test ! -z "${MM_LIRC_KERNEL_MODULE_OPTIONS}" ; then
            mm_message_output err "error: 'MM_LIRC_DRIVER' must be set when 'MM_LIRC_KERNEL_MODULE_OPTIONS' is set."
        fi
    fi
}

conf_default_MM_LIRC() {

    local device
    local driver
    local idVendor
    local idProduct
    local remote

    if /usr/bin/test -z "${MM_LIRC_DRIVER}" ; then
        MM_LIRC_DRIVER='none'
    fi
    if /usr/bin/test -z "${MM_LIRC_REMOTE}" ; then
        MM_LIRC_REMOTE='none'
    fi
    if /usr/bin/test -z "${MM_LIRC_DEVICE}" ; then
        MM_LIRC_DEVICE='auto'
    fi
    if /usr/bin/test -z "${MM_LIRC_KERNEL_MODULE}" ; then
        MM_LIRC_KERNEL_MODULE='auto'
    fi
    if /usr/bin/test -z "${MM_LIRC_KERNEL_MODULE_OPTIONS}" ; then
        MM_LIRC_KERNEL_MODULE_OPTIONS='auto'
    fi
    if /usr/bin/test -z "${MM_LIRC_IREXEC_ENABLED}" ; then
        MM_LIRC_IREXEC_ENABLED='auto'
    fi
    if /usr/bin/test -z "${MM_LIRC_SLEEP_ENABLED}" ; then
        MM_LIRC_SLEEP_ENABLED='yes'
    fi
    if /usr/bin/test -z "${MM_LIRC_WAKEUP_ENABLED}" ; then
        MM_LIRC_WAKEUP_ENABLED='yes'
    fi

    if /usr/bin/test -z "${MM_LIRC_FETCH_LIRCD_CONF}" ; then
        MM_LIRC_FETCH_LIRCD_CONF='no'
    fi
    if /usr/bin/test -z "${MM_LIRC_FETCH_LIRCRC}"     ; then
        MM_LIRC_FETCH_LIRCRC='no'
    fi
    if /usr/bin/test -z "${MM_LIRC_AUTO_ENABLED}" ; then
        if /usr/bin/test "${MM_LIRC_DRIVER}" = "none" ; then
            MM_LIRC_AUTO_ENABLED='yes'
        else
            MM_LIRC_AUTO_ENABLED='no'
        fi
    fi

    # Read LIRC driver specific configuration file,
    # but do not allow the values to override values in the MiniMyth configuration file.
    if /usr/bin/test ! "${MM_LIRC_DRIVER}" = "none" && /usr/bin/test -r /etc/lirc.d/driver.conf.d/driver.conf.${MM_LIRC_DRIVER} ; then
        /bin/rm -rf /tmp/driver.conf.${MM_LIRC_DRIVER}~
        /bin/cat /etc/lirc.d/driver.conf.d/driver.conf.${MM_LIRC_DRIVER} \
            | /bin/sed -e 's%#.*$%%g' \
            | /bin/sed -e 's%^  *%%'  \
            | /bin/sed -e 's%^\(.*\)$%local _\1%' \
            > /tmp/driver.conf.${MM_LIRC_DRIVER}~
        . /tmp/driver.conf.${MM_LIRC_DRIVER}~
        /bin/rm -rf /tmp/driver.conf.${MM_LIRC_DRIVER}~
     
       if /usr/bin/test "${MM_LIRC_DEVICE}" = "auto" ; then
           MM_LIRC_DEVICE="${_MM_LIRC_DEVICE}"
       fi
       if /usr/bin/test "${MM_LIRC_KERNEL_MODULE}" = "auto" ; then
           MM_LIRC_KERNEL_MODULE="${_MM_LIRC_KERNEL_MODULE}"
       fi
       if /usr/bin/test "${MM_LIRC_KERNEL_MODULE_OPTIONS}" = "auto" ; then
           MM_LIRC_KERNEL_MODULE_OPTIONS="${_MM_LIRC_KERNEL_MODULE_OPTIONS}"
       fi
    fi

    # Convert 'auto' to empty.
    if /usr/bin/test "${MM_LIRC_DEVICE}" = "auto" ; then
        MM_LIRC_DEVICE=
    fi
    if /usr/bin/test "${MM_LIRC_KERNEL_MODULE}" = "auto" ; then
        MM_LIRC_KERNEL_MODULE=
    fi
    if /usr/bin/test "${MM_LIRC_KERNEL_MODULE_OPTIONS}" = "auto" ; then
        MM_LIRC_KERNEL_MODULE_OPTIONS=
    fi

    # Convert 'none' to empty.
    if /usr/bin/test "${MM_LIRC_DRIVER}" = "none" ; then
        MM_LIRC_DRIVER=
    fi
    if /usr/bin/test "${MM_LIRC_REMOTE}" = "none" ; then
        MM_LIRC_REMOTE=
    fi
    if /usr/bin/test "${MM_LIRC_DEVICE}" = "none" ; then
        MM_LIRC_DEVICE=
    fi
    if /usr/bin/test "${MM_LIRC_KERNEL_MODULE}" = "none" ; then
        MM_LIRC_KERNEL_MODULE=
    fi
    if /usr/bin/test "${MM_LIRC_KERNEL_MODULE_OPTIONS}" = "none" ; then
        MM_LIRC_KERNEL_MODULE_OPTIONS=
    fi

    # Create LIRC device list.
    # First, add user configured LIRC device.
    # Second, add autodetected LIRC device(s).
    MM_LIRC_DEVICE_LIST=
    if /usr/bin/test -n "${MM_LIRC_DRIVER}" ; then
        MM_LIRC_DEVICE_LIST="${MM_LIRC_DEVICE_LIST} `_MM_LIRC_lirc_device_item_create ${MM_LIRC_DEVICE} ${MM_LIRC_DRIVER} ${MM_LIRC_REMOTE}`"
    fi
    if /usr/bin/test "${MM_LIRC_AUTO_ENABLED}" = "yes" ; then
        if /usr/bin/test -d /sys/class/lirc ; then
            for device in `cd /sys/class/lirc ; ls -1` ; do
                idVendor=
                idProcuct=
                driver=
                remote=
                if /usr/bin/test -e /sys/class/lirc/${device}/device/idVendor  ; then
                    idVendor=`/bin/cat /sys/class/lirc/${device}/device/idVendor`
                fi
                if /usr/bin/test -e /sys/class/lirc/${device}/device/idProduct ; then
                    idProduct=`/bin/cat /sys/class/lirc/${device}/device/idProduct`
                fi
                if /usr/bin/test ! -z "${idVendor}"  && /usr/bin/test ! "${idVendor}"  = "0000"  || \
                   /usr/bin/test ! -z "${idProduct}" && /usr/bin/test ! "${idProduct}" = "0000" ; then
                    map=`/bin/cat /etc/hardware.d/usb2lirc.map \
                        | /bin/sed -e 's%#.*$%%g' -e 's%^ *%%' -e 's% *$%%' -e 's% *, *%,%g' \
                        | grep -e "^${idVendor},${idProduct}"`
                    if /usr/bin/test -n "${map}" ; then
                        driver=`/bin/echo ${map} | /usr/bin/cut -d ',' -f 3`
                        remote=`/bin/echo ${map} | /usr/bin/cut -d ',' -f 4`
                    fi
                fi
                MM_LIRC_DEVICE_LIST="${MM_LIRC_DEVICE_LIST} `_MM_LIRC_lirc_device_item_create /dev/${device} ${driver} ${remote}`"
            done
        fi
    fi
    MM_LIRC_DEVICE_LIST=`/bin/echo ${MM_LIRC_DEVICE_LIST} | /bin/sed -e 's%  *% %g' -e 's%^ %%' -e 's% $%%'`

    # Count the LIRC devices.
    MM_LIRC_DEVICE_COUNT=0
    for device in ${MM_LIRC_DEVICE_LIST} ; do
        MM_LIRC_DEVICE_COUNT=$((${MM_LIRC_DEVICE_COUNT}+1))
    done

    if /usr/bin/test ${MM_LIRC_DEVICE_COUNT} -eq 0 ; then
        /usr/bin/logger -t minimyth -p "local0.warn" \
            "no remote control device was found."
    fi

    if /usr/bin/test "${MM_LIRC_WAKEUP_ENABLED}" = "yes" ; then
        MM_LIRC_WAKEUP_DEVICE_LIST=`_MM_LIRC_wakeup_device_list_create ${MM_LIRC_DEVICE_LIST}`
        MM_LIRC_WAKEUP_DEVICE_COUNT=0
        for device in ${MM_LIRC_WAKEUP_DEVICE_LIST} ; do
            MM_LIRC_WAKEUP_DEVICE_COUNT=$((${MM_LIRC_WAKEUP_DEVICE_COUNT}+1))
        done
        if /usr/bin/test ${MM_LIRC_WAKEUP_DEVICE_COUNT} -eq 0 ; then
            /usr/bin/logger -t minimyth -p "local0.warn" \
                "no remote control wakeup device was found."
        fi
    fi

    return 0
}

conf_write_MM_LIRC() {
    local conf_file=$1

    conf_variable_write "${conf_file}" MM_LIRC_AUTO_ENABLED          "${MM_LIRC_AUTO_ENABLED}"
    conf_variable_write "${conf_file}" MM_LIRC_DRIVER                "${MM_LIRC_DRIVER}"
    conf_variable_write "${conf_file}" MM_LIRC_REMOTE                "${MM_LIRC_REMOTE}"
    conf_variable_write "${conf_file}" MM_LIRC_DEVICE                "${MM_LIRC_DEVICE}"
    conf_variable_write "${conf_file}" MM_LIRC_DEVICE_LIST           "${MM_LIRC_DEVICE_LIST}"
    conf_variable_write "${conf_file}" MM_LIRC_DEVICE_COUNT          "${MM_LIRC_DEVICE_COUNT}"
    conf_variable_write "${conf_file}" MM_LIRC_KERNEL_MODULE         "${MM_LIRC_KERNEL_MODULE}"
    conf_variable_write "${conf_file}" MM_LIRC_KERNEL_MODULE_OPTIONS "${MM_LIRC_KERNEL_MODULE_OPTIONS}"
    conf_variable_write "${conf_file}" MM_LIRC_IREXEC_ENABLED        "${MM_LIRC_IREXEC_ENABLED}"
    conf_variable_write "${conf_file}" MM_LIRC_SLEEP_ENABLED         "${MM_LIRC_SLEEP_ENABLED}"
    conf_variable_write "${conf_file}" MM_LIRC_WAKEUP_ENABLED        "${MM_LIRC_WAKEUP_ENABLED}"
    conf_variable_write "${conf_file}" MM_LIRC_WAKEUP_DEVICE_LIST    "${MM_LIRC_WAKEUP_DEVICE_LIST}"
    conf_variable_write "${conf_file}" MM_LIRC_WAKEUP_DEVICE_COUNT   "${MM_LIRC_WAKEUP_DEVICE_COUNT}"
    conf_variable_write "${conf_file}" MM_LIRC_FETCH_LIRCD_CONF      "${MM_LIRC_FETCH_LIRCD_CONF}"
    conf_variable_write "${conf_file}" MM_LIRC_FETCH_LIRCRC          "${MM_LIRC_FETCH_LIRCRC}"

    return 0
}

conf_fetch_MM_LIRC() {
    if /usr/bin/test "${MM_LIRC_FETCH_LIRCD_CONF}" = "yes" ; then
        /bin/rm -f /etc/lircd.conf
        mm_confro_get /lircd.conf /etc/lircd.conf
        if /usr/bin/test ! -e /etc/lircd.conf ; then
            mm_message_output err "error: failed to fetch 'lircd.conf' file."
        fi
    fi
    if /usr/bin/test "${MM_LIRC_FETCH_LIRCRC}"     = "yes" ; then
        /bin/rm -f /etc/lircrc
        mm_confro_get /lircrc /etc/lircrc
        if /usr/bin/test ! -e /etc/lircrc ; then
            mm_message_output err "error: failed to fetch 'lircrc' file."
        fi
    fi

    return 0
}
