#!/bin/sh
################################################################################
# mythtv
#
# This script configures MythTV.
################################################################################
. /etc/rc.d/functions

start() {

    local jumppoints
    local jumppoints_destination
    local jumppoints_keylist
    local keybindings
    local keybindings_actions
    local keybindings_context
    local keybindings_keylist
    local settings
    local settings_data
    local settings_value
    local TRANSCODE
    local file

    mm_message_output info "configuring MythTV ..."

    # Set OSD fonts.
    mm_mythdb_settings_set "OSDFont"   "FreeSans.ttf"
    mm_mythdb_settings_set "OSDCCFont" "FreeSans.ttf"

    # Set the MythTV theme.
    if /usr/bin/test -n "${MM_THEME_NAME}" ; then
        mm_mythdb_settings_set "Theme" "${MM_THEME_NAME}"
    fi
    # Mount MythTV theme directory.
    if /usr/bin/test -n "${MM_THEME_URL}" ; then
        if ! mm_url_mount "${MM_THEME_URL}" "/usr/share/mythtv/themes/${MM_THEME_NAME}" ; then
            mm_message_output err "error: mount of 'MM_THEME_URL=${MM_THEME_URL}' failed."
            exit 1
        fi
    fi

    # Set the MythTV OSD theme.
    if /usr/bin/test -n "${MM_THEMEOSD_NAME}" ; then
        mm_mythdb_settings_set "OSDTheme" "${MM_THEMEOSD_NAME}"
    fi
    # Mount MythTV OSD theme directory.
    if /usr/bin/test -n "${MM_THEMEOSD_URL}" ; then
        if ! mm_url_mount "${MM_THEMEOSD_URL}" "/usr/share/mythtv/themes/${MM_THEMEOSD_NAME}" ; then
            mm_message_output err "error: mount of 'MM_THEMEOSD_URL=${MM_THEMEOSD_URL}' failed."
            exit 1
        fi
    fi

    # Mount themecache directory.
    if /usr/bin/test -n "${MM_THEMECACHE_URL}" ; then
        mm_url_mount "${MM_THEMECACHE_URL}" "/home/minimyth/.mythtv/themecache"
    fi

    # Configure MythDVD ripping.
    if /usr/bin/test "${MM_MYTHDVD_ENABLED}" = "yes" ; then
        if /usr/bin/test -d "${MM_MYTHDVD_MOUNTPOINT}" && /usr/bin/test -w "${MM_MYTHDVD_MOUNTPOINT}" ; then
            /bin/mkdir -p "${MM_MYTHDVD_MOUNTPOINT}/mythdvd/temp"
        fi
        if /usr/bin/test -d "${MM_MYTHDVD_MOUNTPOINT}/mythdvd/temp" && \
           /usr/bin/test -w "${MM_MYTHDVD_MOUNTPOINT}/mythdvd/temp" ; then
            mm_mythdb_settings_set "DVDRipLocation" "${MM_MYTHDVD_MOUNTPOINT}/mythdvd/temp"
            TRANSCODE=`/usr/bin/which transcode`
            mm_mythdb_settings_set "TranscodeCommand" "${TRANSCODE}"
            /usr/bin/mtd --daemon
        fi
    fi

    # Configure Myth database jumppoints to match MiniMyth frontend.
    set | /bin/grep -e '^MM_MYTHDB_JUMPPOINTS_[^=]*=' | /bin/sed -e 's%^MM_MYTHDB_JUMPPOINTS_[^=]*=%%' -e "s%^'%%" -e "s%'$%%" | \
    while read jumppoints ; do
        jumppoints_destination=`/bin/echo ${jumppoints} | /usr/bin/cut -d '~' -f 1`
        jumppoints_keylist=`/bin/echo ${jumppoints} | /usr/bin/cut -d '~' -f 2`
        mm_mythdb_jumppoints_update "${jumppoints_destination}" "${jumppoints_keylist}"
    done

    # Configure Myth database keybindings to match MiniMyth frontend.
    set | /bin/grep -e '^MM_MYTHDB_KEYBINDINGS_[^=]*=' | /bin/sed -e 's%^MM_MYTHDB_KEYBINDINGS_[^=]*=%%' -e "s%^'%%" -e "s%'$%%" | \
    while read keybindings ; do
        keybindings_context=`/bin/echo ${keybindings} | /usr/bin/cut -d '~' -f 1`
        keybindings_action=`/bin/echo ${keybindings} | /usr/bin/cut -d '~' -f 2`
        keybindings_keylist=`/bin/echo ${keybindings} | /usr/bin/cut -d '~' -f 3`
        mm_mythdb_keybindings_update "${keybindings_context}" "${keybindings_action}" "${keybindings_keylist}"
    done

    # Configure Myth database settings to match MiniMyth frontend.
    set | /bin/grep -e '^MM_MYTHDB_SETTINGS_[^=]*=' | /bin/sed -e 's%^MM_MYTHDB_SETTINGS_[^=]*=%%' -e "s%^'%%" -e "s%'$%%" | \
    while read settings ; do
        settings_value=`/bin/echo ${settings} | /usr/bin/cut -d '~' -f 1`
        settings_data=`/bin/echo ${settings} | /usr/bin/cut -d '~' -f 2`
        mm_mythdb_settings_set "${settings_value}" "${settings_data}"
    done

    # Delete disabled plugins.
    if /usr/bin/test "${MM_MYTHTV_OPTICAL_DISK_ENABLED}" = "no" ; then
        case ${MM_VERSION_MYTH} in
            0.19)
                /bin/sed -i -e 's%<depends>mythmusic mythdvd</depends>%<depends>disabled</depends>%' \
                    /usr/share/mythtv/mainmenu.xml
                ;;
            *)
                /bin/sed -i -e 's%<depends>mythmusic mythdvd mytharchive mythburn</depends>%<depends>disabled</depends>%' \
                    /usr/share/mythtv/mainmenu.xml
                ;;
        esac
    fi
    if /usr/bin/test "${MM_MYTHDVD_ENABLED}"     = "no" ; then
        /bin/rm -rf /usr/lib/mythtv/plugins/libmythdvd.so
        /bin/rm -rf /usr/share/mythtv/dvd*
        /bin/rm -rf /usr/share/mythtv/mythdvd*
    fi
    if /usr/bin/test "${MM_MYTHGALLERY_ENABLED}" = "no" ; then
        /bin/rm -rf /usr/lib/mythtv/plugins/libmythgallery.so
        /bin/rm -rf /usr/share/mythtv/gallery*
        /bin/rm -rf /usr/share/mythtv/mythgallery*
    fi
    if /usr/bin/test "${MM_MYTHGAME_ENABLED}"    = "no" ; then
        /bin/rm -rf /usr/lib/mythtv/plugins/libmythgame.so
        /bin/rm -rf /usr/share/mythtv/game*
        /bin/rm -rf /usr/share/mythtv/mythgame*
    fi
    if /usr/bin/test "${MM_MYTHMUSIC_ENABLED}"   = "no" ; then
        /bin/rm -rf /usr/lib/mythtv/plugins/libmythmusic.so
        /bin/rm -rf /usr/share/mythtv/music*
        /bin/rm -rf /usr/share/mythtv/mythmusic*
    fi
    if /usr/bin/test "${MM_MYTHAUDIO_ENABLED}"   = "no" ; then
        /bin/rm -rf /usr/lib/mythtv/plugins/libmythaudio.so
        /bin/rm -rf /usr/share/mythtv/audio*
        /bin/rm -rf /usr/share/mythtv/mythaudio*
    fi
    if /usr/bin/test "${MM_MYTHNEWS_ENABLED}"    = "no" ; then
        /bin/rm -rf /usr/lib/mythtv/plugins/libmythnews.so
        /bin/rm -rf /usr/share/mythtv/news*
        /bin/rm -rf /usr/share/mythtv/mythnews*
    fi
    if /usr/bin/test "${MM_MYTHSTREAM_ENABLED}"  = "no" ; then
        /bin/rm -rf /usr/lib/mythtv/plugins/libmythstream.so
        /bin/rm -rf /usr/share/mythtv/stream*
        /bin/rm -rf /usr/share/mythtv/mythstream*
    fi
    if /usr/bin/test "${MM_MYTHVIDEO_ENABLED}"   = "no" ; then
        /bin/rm -rf /usr/lib/mythtv/plugins/libmythvideo.so
        /bin/rm -rf /usr/share/mythtv/video*
        /bin/rm -rf /usr/share/mythtv/mythvideo*
    fi
    if /usr/bin/test "${MM_MYTHWEATHER_ENABLED}" = "no" ; then
        /bin/rm -rf /usr/lib/mythtv/plugins/libmythweather.so
        /bin/rm -rf /usr/share/mythtv/weather*
        /bin/rm -rf /usr/share/mythtv/mythweather*
    fi

    # Enable MythTV to detect the addition and removal of storage devices.
    for file in `cd /etc/udev/rules.d ; /bin/ls -1 *-minimyth-mythtv.rules.disabled 2> /dev/null` ; do
        file_old=`/bin/echo ${file}`
        file_new=`/bin/echo ${file} | /bin/sed -e 's%\.disabled\$%%'`
	/bin/mv -f /etc/udev/rules.d/${file_old} /etc/udev/rules.d/${file_new}
    done

    return 0
}

stop() {
    return 0
}

case $1 in
    start) start ;;
    stop)  stop  ;;
esac

exit 0
