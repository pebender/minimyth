#!/bin/sh

/usr/bin/test -r /etc/conf.d/core && . /etc/conf.d/core

/usr/bin/test -n "${MM_DEBUG}" && set -x

DHCP_CONF='/etc/conf.d/dhcp'
DHCP_OVERRIDE_CONF='/etc/conf.d/dhcp.override'
HOSTS_CONF='/etc/hosts'
LOG_CONF='/etc/log.conf'
NTP_CONF='/etc/ntp.conf'
RESOLV_CONF='/etc/resolv.conf'
TZ_CONF='/etc/localtime'

conf_variable_write() {
    /bin/echo -n ${2} >> ${1}
    /bin/echo -n "="  >> ${1}
    /bin/echo -n "'"  >> ${1}
    /bin/echo -n ${3} >> ${1}
    /bin/echo    "'"  >> ${1}

    return 0
}

case "${reason}" in
    PREINIT)
        # If we have an IP address, then do not reset the interface, because
        # (1) resetting the interface on NFS boot is fatal and
        # (2) resetting the interface on DHCP restart is not needed.
        IP_ADDRESS=`/sbin/ifconfig ${interface} | /bin/grep '^ *inet addr:' | /bin/sed 's%^ *inet addr:\([^ ]*\) .*%\1%'`
        if /usr/bin/test -z "${IP_ADDRESS}" ; then
            /sbin/ifconfig ${interface} 0.0.0.0 broadcast 255.255.255.255 up
        fi
	break
        ;;
    BOUND|REBIND|REBOOT|RENEW)
        # Configure interface basics.
        if /usr/bin/test   "x${reason}"                = "xBOUND"                    || \
           /usr/bin/test   "x${reason}"                = "xREBOOT"                   || \
           /usr/bin/test ! "x${new_ip_address}"        = "x${old_ip_address}"        || \
           /usr/bin/test ! "x${new_subnet_mask}"       = "x${old_subnet_mask}"       || \
           /usr/bin/test ! "x${new_broadcast_address}" = "x${old_broadcast_address}" ; then
            /usr/bin/test -n "${new_broadcast_address}" && BROADCAST="broadcast ${new_broadcast_address}"
            /usr/bin/test -n "${new_subnet_mask}"       && NETMASK="netmask ${new_subnet_mask}"
            /sbin/ifconfig ${interface} ${new_ip_address} ${BROADCAST} ${NETMASK}
        fi

        # Configure default gateways.
        if /usr/bin/test   "x${reason}"      = "xBOUND"          || \
           /usr/bin/test   "x${reason}"      = "xREBOOT"         || \
           /usr/bin/test ! "x${new_routers}" = "x${old_routers}" ; then
            while /sbin/route del default gw 0.0.0.0 dev ${interface} 2> /dev/null ; do
                :
            done
            for router in ${new_routers} ; do
                /sbin/route add default gw ${router} dev ${interface}
            done
        fi

        # Set host name.
        CUR_HOST_NAME=`/bin/hostname`
        if /usr/bin/test ! "x${new_host_name}" = "x${CUR_HOST_NAME}" ; then
            /bin/hostname "${new_host_name}"
        fi
        if /usr/bin/test -e ${DHCP_OVERRIDE_CONF} ; then
            if /usr/bin/test ! -n "`/bin/hostname`" ; then
                /usr/bin/logger -s -t dhclient -p "daemon.err" \
                    "error: 'Host Name' (host-name) not configured."
            fi
        fi

        # Create local hosts file.
        if /usr/bin/test   "x${reason}"          = "xBOUND"              || \
           /usr/bin/test   "x${reason}"          = "xREBOOT"             || \
           /usr/bin/test ! "x${new_ip_address}"  = "x${old_ip_address}"  || \
           /usr/bin/test ! "x${new_host_name}"   = "x${old_host_name}"   || \
           /usr/bin/test ! "x${new_domain_name}" = "x${old_domain_name}" || \
           /usr/bin/test ! -e "${HOSTS_CONF}"                            ; then
            /bin/rm -f ${HOSTS_CONF}~
            /bin/touch ${HOSTS_CONF}~
            /bin/chmod 644 ${HOSTS_CONF}~
            /bin/echo "127.0.0.1 localhost.localdomain localhost"       >> ${HOSTS_CONF}~
            if /usr/bin/test -n "${new_host_name}" ; then
                /bin/echo -n "${new_ip_address}"                        >> ${HOSTS_CONF}~
                if /usr/bin/test -n "${new_domain_name}" ; then
                    /bin/echo -n " ${new_host_name}.${new_domain_name}" >> ${HOSTS_CONF}~
                fi
                /bin/echo -n " ${new_host_name}"                        >> ${HOSTS_CONF}~
            fi
            /usr/bin/cmp -s "${HOSTS_CONF}~" "${HOSTS_CONF}" 2> /dev/null
            if /usr/bin/test $? -ne 0 ; then
                /bin/mv -f ${HOSTS_CONF}~ ${HOSTS_CONF}
            else
                /bin/rm -f ${HOSTS_CONF}~
            fi
        fi

        # Set time zone.
        if /usr/bin/test   "x${reason}"    = "xBOUND"        || \
           /usr/bin/test   "x${reason}"    = "xREBOOT"       || \
           /usr/bin/test ! "x${new_tcode}" = "x${old_tcode}" || \
           /usr/bin/test ! -e "${TZ_CONF}"                   ; then
            if   /usr/bin/test -z "${new_tcode}" ; then
                /bin/rm -f ${TZ_CONF}
            elif /usr/bin/test ! -r /usr/share/zoneinfo/${new_tcode} ; then
                /bin/rm -f ${TZ_CONF}
                /usr/bin/logger -s -t dhclient -p "daemon.err" \
                    "error: TCode (tcode) '${new_tcode}' not valid."
            else
                /bin/rm -f ${TZ_CONF}~
                /bin/touch ${TZ_CONF}~
                /bin/chmod 644 ${TZ_CONF}~
                /bin/cat /usr/share/zoneinfo/${new_tcode} > ${TZ_CONF}~
                /usr/bin/cmp -s "${TZ_CONF}~" "${TZ_CONF}" 2> /dev/null
                if /usr/bin/test $? -ne 0 ; then
                    /bin/mv -f ${TZ_CONF}~ ${TZ_CONF}
                else
                    /bin/rm -f ${TZ_CONF}~
                fi
            fi
            if /usr/bin/test -e ${DHCP_OVERRIDE_CONF} ; then
                if /usr/bin/test ! -e "${TZ_CONF}" ; then
                    /usr/bin/logger -s -t dhclient -p "daemon.err" \
                        "error: 'TCode' (tcode) not configured."
                fi
            fi
        fi

        # Create domain name resolution file.
        if /usr/bin/test   "x${reason}"                  = "xBOUND"                      || \
           /usr/bin/test   "x${reason}"                  = "xREBOOT"                     || \
           /usr/bin/test ! "x${new_domain_name_servers}" = "x${old_domain_name_servers}" || \
           /usr/bin/test ! "x${new_domain_name}"         = "x${old_domain_name}"         || \
           /usr/bin/test ! -e "${RESOLV_CONF}"                                           ; then
            /bin/rm -f ${RESOLV_CONF}~
            /bin/touch ${RESOLV_CONF}~
            /bin/chmod 644 ${RESOLV_CONF}~
            if /usr/bin/test -n "${new_domain_name}" ; then
                /bin/echo search ${new_domain_name} >> ${RESOLV_CONF}~
            fi
            for DOMAIN_NAME_SERVER in ${new_domain_name_servers} ; do
                if /usr/bin/test -n "${DOMAIN_NAME_SERVER}" ; then
                    /bin/echo nameserver ${DOMAIN_NAME_SERVER} >> ${RESOLV_CONF}~
                fi
            done
            /usr/bin/cmp -s "${RESOLV_CONF}~" "${RESOLV_CONF}" 2> /dev/null
            if /usr/bin/test $? -ne 0 ; then
                /bin/mv -f ${RESOLV_CONF}~ ${RESOLV_CONF}
            else
                /bin/rm -f ${RESOLV_CONF}~
            fi
            if /usr/bin/test -e ${DHCP_OVERRIDE_CONF} ; then
                /bin/grep -q -e '^nameserver ' ${RESOLV_CONF} 2> /dev/null
                if /usr/bin/test ! $? -eq 0 ; then
                    /usr/bin/logger -s -t dhclient -p "daemon.err" \
                        "error: 'Domain Name Servers' (domain-name-servers) not configured."
                fi
            fi
        fi

        # Create NTP configuration file.
        if /usr/bin/test   "x${reason}"          = "xBOUND"              || \
           /usr/bin/test   "x${reason}"          = "xREBOOT"             || \
           /usr/bin/test ! "x${new_ntp_servers}" = "x${old_ntp_servers}" || \
           /usr/bin/test ! -e "${NTP_CONF}"                              ; then
            /bin/rm -f ${NTP_CONF}~
            /bin/touch ${NTP_CONF}~
            /bin/chmod 644 ${NTP_CONF}~
            for NTP_SERVER in ${new_ntp_servers}; do
                if /usr/bin/test -n "${NTP_SERVER}" ; then
                    /bin/echo server ${NTP_SERVER} >> ${NTP_CONF}~
                fi
            done
            /usr/bin/cmp -s "${NTP_CONF}~" "${NTP_CONF}" 2> /dev/null
            if /usr/bin/test $? -ne 0 ; then
                /bin/mv -f ${NTP_CONF}~ ${NTP_CONF}
            else
                /bin/rm -f ${NTP_CONF}~
            fi
            if /usr/bin/test -e ${DHCP_OVERRIDE_CONF} ; then
                /bin/grep -q -e '^server ' ${NTP_CONF} 2> /dev/null
                if /usr/bin/test ! $? -eq 0 ; then
                    /usr/bin/logger -s -t dhclient -p "daemon.err" \
                        "error: 'NTP Servers' (ntp-servers) not configured."
                fi
            fi
        fi

        # Create log server configuration file.
        if /usr/bin/test   "x${reason}"          = "xBOUND"              || \
           /usr/bin/test   "x${reason}"          = "xREBOOT"             || \
           /usr/bin/test ! "x${new_log_servers}" = "x${old_log_servers}" || \
           /usr/bin/test ! -e "${LOG_CONF}"                              ; then
            /bin/rm -f ${LOG_CONF}~
            /bin/touch ${LOG_CONF}~
            /bin/chmod 644 ${LOG_CONF}~
            for LOG_SERVER in ${new_log_servers}; do
                if /usr/bin/test -n "${LOG_SERVER}" ; then
                    /bin/echo server ${LOG_SERVER} >> ${LOG_CONF}~
                fi
            done
            /usr/bin/cmp -s "${LOG_CONF}~" "${LOG_CONF}" 2> /dev/null
            if /usr/bin/test $? -ne 0 ; then
                /bin/mv -f ${LOG_CONF}~ ${LOG_CONF}
            else
                /bin/rm -f ${LOG_CONF}~
            fi
        fi

        # Create MiniMyth DHCP configuration file.
        if /usr/bin/test   "x${reason}"                = "xBOUND"                    || \
           /usr/bin/test   "x${reason}"                = "xREBOOT"                   || \
           /usr/bin/test ! "x${new_next_server}"       = "x${old_next_server}"       || \
           /usr/bin/test ! "x${new_filename}"          = "x${old_filename}"          || \
           /usr/bin/test ! "x${new_minimyth_boot_url}" = "x${old_minimyth_boot_url}" ; then
            /bin/rm -f "${DHCP_CONF}~"
            /bin/touch ${DHCP_CONF}~
            /bin/chmod 644 ${DHCP_CONF}~

            NETWORK_INTERFACE=${interface}

	    TFTP_SERVER=
	    TFTP_SERVER=${TFTP_SERVER:-${new_next_server}}

            BOOT_URL=${new_minimyth_boot_url}
            if /usr/bin/test "x${BOOT_URL}" = "x" ; then
	        TFTP_BOOTFILE=
	        TFTP_BOOTFILE=${TFTP_BOOTFILE:-${new_filename}}
                if /usr/bin/test ! "x${TFTP_SERVER}" = "x" &&
                   /usr/bin/test ! "x${TFTP_BOOTFILE}" = "x" ; then
                    TFTP_ROOTDIR=`/bin/echo ${TFTP_BOOTFILE} | /bin/sed 's%[^/]*$%%' | /bin/sed 's%^/%%' | /bin/sed 's%/$%%'`
                    TFTP_ROOTDIR="/${TFTP_ROOTDIR}"
                    BOOT_URL="tftp://${TFTP_SERVER}${TFTP_ROOTDIR}/"
                else
                    BOOT_URL="file:/minimyth/"
                fi
            fi
            BOOT_URL=`/bin/echo ${BOOT_URL} | /bin/sed -e 's%/$%%'`
            BOOT_URL="${BOOT_URL}/"

            conf_variable_write ${DHCP_CONF}~ MM_NETWORK_INTERFACE "${NETWORK_INTERFACE}"
            conf_variable_write ${DHCP_CONF}~ MM_TFTP_SERVER       "${TFTP_SERVER}"
            conf_variable_write ${DHCP_CONF}~ MM_BOOT_URL          "${BOOT_URL}"

            /usr/bin/cmp -s "${DHCP_CONF}~" "${DHCP_CONF}" 2> /dev/null
            if /usr/bin/test $? -ne 0 ; then
                /bin/mv -f ${DHCP_CONF}~ ${DHCP_CONF}
            else
                /bin/rm -f ${DHCP_CONF}~
            fi
        fi

        break
        ;;
esac

exit 0
