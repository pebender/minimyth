#!/bin/sh
################################################################################
# x
################################################################################
. /etc/rc.d.sh/functions
. /lib/minimyth/mm_detect

start() {

    local X_DISPLAYSIZE_X
    local X_DISPLAYSIZE_Y
    local X_VIRTUAL_X
    local X_VIRTUAL_Y
    local DRI_TRUE
    local LIB_PATH
    local LIB_PATHS
    local LIB
    local LIBS
    local NVIDIA_TRUE
    local KBD_TRUE
    local MOUSE_TRUE
    local EVENT_DEVICE_LIST
    local INPUTDEVICE_EVENT
    local SERVERLAYOUT_EVENT
    local identifier
    local device
    local device_blacklist
    local device_item
    local device_list

    mm_message_output info "configuring X ..."

    /bin/rm -fr           /tmp/.ICE-unix/
    /bin/mkdir -m 1777 -p /tmp/.ICE-unix/
    /bin/chown root:root  /tmp/.ICE-unix/

    if   /usr/bin/test "${MM_X_SCREENSAVER_HACK}" = "sleep"       ; then
        mm_file_replace_variable '/home/minimyth/.xscreensaver' '@MODE@'     'blank'
        mm_file_replace_variable '/home/minimyth/.xscreensaver' '@SELECTED@' '0'
    elif /usr/bin/test "${MM_X_SCREENSAVER_HACK}" = "blank"       ; then
        mm_file_replace_variable '/home/minimyth/.xscreensaver' '@MODE@'     'blank'
        mm_file_replace_variable '/home/minimyth/.xscreensaver' '@SELECTED@' '0'
    elif /usr/bin/test "${MM_X_SCREENSAVER_HACK}" = "glslideshow" ; then
        mm_file_replace_variable '/home/minimyth/.xscreensaver' '@MODE@'     'one'
        mm_file_replace_variable '/home/minimyth/.xscreensaver' '@SELECTED@' '1'
    else
        mm_file_replace_variable '/home/minimyth/.xscreensaver' '@MODE@'     'blank'
        mm_file_replace_variable '/home/minimyth/.xscreensaver' '@SELECTED@' '0'
    fi
    mm_file_replace_variable '/home/minimyth/.xscreensaver' '@MM_X_SCREENSAVER_TIMEOUT@'    "${MM_X_SCREENSAVER_TIMEOUT}"
    mm_file_replace_variable '/home/minimyth/.xscreensaver' '@MM_MEDIA_GALLERY_MOUNTPOINT@' "${MM_MEDIA_GALLERY_MOUNTPOINT}"

    X_DISPLAYSIZE_X=`/bin/echo ${MM_X_DISPLAYSIZE} | /bin/sed -e 's%^\([0-9][0-9]*\)x\([0-9][0-9]*\).*%\1%'`
    X_DISPLAYSIZE_Y=`/bin/echo ${MM_X_DISPLAYSIZE} | /bin/sed -e 's%^\([0-9][0-9]*\)x\([0-9][0-9]*\).*%\2%'`

    X_VIRTUAL_X=`/bin/echo ${MM_X_VIRTUAL} | /bin/sed -e 's%^\([0-9][0-9]*\)x\([0-9][0-9]*\).*%\1%'`
    X_VIRTUAL_Y=`/bin/echo ${MM_X_VIRTUAL} | /bin/sed -e 's%^\([0-9][0-9]*\)x\([0-9][0-9]*\).*%\2%'`

    MM_X_DEVICE_NVIDIA=""
    MM_X_DEVICE_VIA=""
    case "${MM_X_DRIVER}" in
        intel_810|intel_915)
            if /bin/echo ${MM_X_OUTPUT_TV}  | /bin/grep -q -e '^[0-9][0-9]*$' > /dev/null 2>&1 ; then
                MM_X_DEVICE_INTEL="TV-${MM_X_OUTPUT_TV}"
            elif /usr/bin/test "${MM_X_OUTPUT_TV}"  = "auto" ; then
                MM_X_DEVICE_INTEL="TV"
            fi
            if /bin/echo ${MM_X_OUTPUT_VGA} | /bin/grep -q -e '^[0-9][0-9]*$' > /dev/null 2>&1 ; then
                MM_X_DEVICE_INTEL="VGA-${MM_X_OUTPUT_VGA}"
            elif /usr/bin/test "${MM_X_OUTPUT_VGA}" = "auto" ; then
                MM_X_DEVICE_INTEL="VGA"
            fi
            if /bin/echo ${MM_X_OUTPUT_DVI} | /bin/grep -q -e '^[0-9][0-9]*$' > /dev/null 2>&1 ; then
                MM_X_DEVICE_INTEL="TMDS-${MM_X_OUTPUT_DVI}"
            elif /usr/bin/test "${MM_X_OUTPUT_DVI}" = "auto" ; then
                MM_X_DEVICE_INTEL="TMDS-1"
            fi
            ;;
        nvidia)
            if /bin/echo ${MM_X_OUTPUT_TV}  | /bin/grep -q -e '^[0-9][0-9]*$' > /dev/null 2>&1 ; then
                MM_X_DEVICE_NVIDIA="TV-${MM_X_OUTPUT_TV}"
            elif /usr/bin/test "${MM_X_OUTPUT_TV}"  = "auto" ; then
                MM_X_DEVICE_NVIDIA="TV"
            fi
            if /bin/echo ${MM_X_OUTPUT_VGA} | /bin/grep -q -e '^[0-9][0-9]*$' > /dev/null 2>&1 ; then
                MM_X_DEVICE_NVIDIA="CRT-${MM_X_OUTPUT_VGA}"
            elif /usr/bin/test "${MM_X_OUTPUT_VGA}" = "auto" ; then
                MM_X_DEVICE_NVIDIA="CRT"
            fi
            if /bin/echo ${MM_X_OUTPUT_DVI} | /bin/grep -q -e '^[0-9][0-9]*$' > /dev/null 2>&1 ; then
                MM_X_DEVICE_NVIDIA="DFP-${MM_X_OUTPUT_DVI}"
            elif /usr/bin/test "${MM_X_OUTPUT_DVI}" = "auto" ; then
                MM_X_DEVICE_NVIDIA="DFP"
            fi
            ;;
        openchrome)
            if /bin/echo ${MM_X_OUTPUT_TV}  | /bin/grep -q -e '^[0-9][0-9]*$' > /dev/null 2>&1 ; then
                /usr/bin/test -n "${MM_X_DEVICE_VIA}" && MM_X_DEVICE_VIA=",${MM_X_DEVICE_VIA}"
                MM_X_DEVICE_VIA="TV${MM_X_DEVICE_VIA}"
            elif /usr/bin/test "${MM_X_OUTPUT_TV}"  = "auto" ; then
                /usr/bin/test -n "${MM_X_DEVICE_VIA}" && MM_X_DEVICE_VIA=",${MM_X_DEVICE_VIA}"
                MM_X_DEVICE_VIA="TV${MM_X_DEVICE_VIA}"
            fi
            if /bin/echo ${MM_X_OUTPUT_VGA} | /bin/grep -q -e '^[0-9][0-9]*$' > /dev/null 2>&1 ; then
                /usr/bin/test -n "${MM_X_DEVICE_VIA}" && MM_X_DEVICE_VIA=",${MM_X_DEVICE_VIA}"
                MM_X_DEVICE_VIA="CRT${MM_X_DEVICE_VIA}"
            elif /usr/bin/test "${MM_X_OUTPUT_VGA}" = "auto" ; then
                /usr/bin/test -n "${MM_X_DEVICE_VIA}" && MM_X_DEVICE_VIA=",${MM_X_DEVICE_VIA}"
                MM_X_DEVICE_VIA="CRT${MM_X_DEVICE_VIA}"
            fi
            if /bin/echo ${MM_X_OUTPUT_DVI} | /bin/grep -q -e '^[0-9][0-9]*$' > /dev/null 2>&1 ; then
                /usr/bin/test -n "${MM_X_DEVICE_VIA}" && MM_X_DEVICE_VIA=",${MM_X_DEVICE_VIA}"
                MM_X_DEVICE_VIA="LCD${MM_X_DEVICE_VIA}"
            elif /usr/bin/test "${MM_X_OUTPUT_DVI}" = "auto" ; then
                /usr/bin/test -n "${MM_X_DEVICE_VIA}" && MM_X_DEVICE_VIA=",${MM_X_DEVICE_VIA}"
                MM_X_DEVICE_VIA="LCD${MM_X_DEVICE_VIA}"
            fi
            ;;
        radeon)
            ;;
        radeonhd)
            ;;
        savage)
            ;;
        sis)
            ;;
        vmware)
            ;;
    esac

    case "${MM_X_DRIVER}" in
        intel_810|intel_915)
            if /usr/bin/test ! -n "${MM_X_DEVICE_INTEL}" ; then
                mm_message_output err "error: no X video output enabled."
                exit 1
            fi
            ;;
        nvidia)
            if /usr/bin/test ! -n "${MM_X_DEVICE_NVIDIA}" ; then
                mm_message_output err "error: no X video output enabled."
                exit 1
            fi
            ;;
        openchrome)
            if /usr/bin/test ! -n "${MM_X_DEVICE_VIA}"    ; then
                mm_message_output err "error: no X video output enabled."
                exit 1
            fi
            ;;
        radeon)
            ;;
        radeonhd)
            ;;
        savage)
            ;;
        sis)
            ;;
        vmware)
            ;;
    esac

    # Hacks to deal with the fact that the names for proprietary drivers and
    # open source drivers conflict.
    #   the proprietary NVIDIA GL libraries conflict with the Open Source Mesa GL libraries.
    DRI_TRUE=""
    NVIDIA_TRUE="#"
    case "${MM_X_DRIVER}" in
        intel_810)
            ;;
        intel_915)
            ;;
        nvidia)
            DRI_TRUE="#"
            NVIDIA_TRUE=""
            # Include path to proprietary libraries.
            LIB_PATHS=`/bin/cat /etc/ld.so.conf`
            LIB_PATHS="/usr/lib/${MM_X_DRIVER} ${LIB_PATHS}"
            /bin/echo -n > /etc/ld.so.conf
            for LIB_PATH in ${LIB_PATHS} ; do
                /bin/echo "${LIB_PATH}" >> /etc/ld.so.conf
            done
            # Remove Open Source libraries that conflict with proprietary libraries.
            LIBS=`/usr/bin/find /usr/lib/${MM_X_DRIVER} -type f | /bin/sed -e "s%^.*/%%"`
            for LIB in ${LIBS} ; do
                LIB_PATH=`/usr/bin/find /usr/lib -name ${LIB} | /bin/sed -e "s%^/usr/lib/${MM_X_DRIVER}/.*\$%%"`
                if /usr/bin/test -n "${LIB_PATH}" ; then
                    /bin/rm -f ${LIB_PATH}
                fi
            done
            # Rebuild library cache.
            /sbin/ldconfig
            ;;
        openchrome)
            ;;
        radeon)
            ;;
        radeonhd)
            ;;
        savage)
            ;;
        sis)
            ;;
        vmware)
            ;;
    esac

    /usr/bin/test "${MM_X_MODE_0}" = "none" && MM_X_MODE_0=''
    /usr/bin/test "${MM_X_MODE_1}" = "none" && MM_X_MODE_1=''
    /usr/bin/test "${MM_X_MODE_2}" = "none" && MM_X_MODE_2=''

    # Add quotes to variables that cannot be quoted directly in xorg.conf
    /usr/bin/test -n "${MM_X_MODE}"   && MM_X_MODE="\"${MM_X_MODE}\""
    /usr/bin/test -n "${MM_X_MODE_0}" && MM_X_MODE_0="\"${MM_X_MODE_0}\""
    /usr/bin/test -n "${MM_X_MODE_1}" && MM_X_MODE_1="\"${MM_X_MODE_1}\""
    /usr/bin/test -n "${MM_X_MODE_2}" && MM_X_MODE_2="\"${MM_X_MODE_2}\""

    device_list=
    for device_item in `mm_detect_state_get 'event' | mm_uniq` ; do
        device=`/bin/echo "${device_item}" | /usr/bin/cut -d ',' -f 1`
        if /usr/bin/test -e "${device}" ; then
            device=`/sbin/udevadm info --query name --root --name="${device}" 2> /dev/null`
        fi
        device_list="${device_list} ${device}"
    done
    EVENT_DEVICE_LIST="${device_list}"

    if /usr/bin/test -n "${MM_LIRC_DEVICE_LIST}" ; then
        device_blacklist=
        for device_item in ${MM_LIRC_DEVICE_LIST} ; do
            device=`/bin/echo "${device_item}" | /usr/bin/cut -d ',' -f 1`
            if /usr/bin/test -e "${device}" ; then
                device=`/sbin/udevadm info --query name --root --name="${device}" 2> /dev/null`
            fi
            device_blacklist="${device_blacklist} ${device}"
        done
        device_list=
        for device in ${EVENT_DEVICE_LIST} ; do
            if ! /bin/echo " ${device_blacklist} " | /bin/grep -q " ${device} " ; then
                device_list="${device_list} ${device}"
            fi
        done
        EVENT_DEVICE_LIST="${device_list}"
    fi

    INPUTDEVICE_EVENT=''
    SERVERLAYOUT_EVENT=''
    if /usr/bin/test -n "${EVENT_DEVICE_LIST}" ; then
        for device in ${EVENT_DEVICE_LIST} ; do
            identifier=`/bin/echo ${device} | /bin/sed -e 's%.*/%%'`
            INPUTDEVICE_EVENT="${INPUTDEVICE_EVENT}\nSection \"InputDevice\""
            INPUTDEVICE_EVENT="${INPUTDEVICE_EVENT}\n    Identifier \"${identifier}\""
            INPUTDEVICE_EVENT="${INPUTDEVICE_EVENT}\n    Driver     \"evdev\""
            INPUTDEVICE_EVENT="${INPUTDEVICE_EVENT}\n    Option     \"Device\" \"${device}\""
            INPUTDEVICE_EVENT="${INPUTDEVICE_EVENT}\nEndSection"

            SERVERLAYOUT_EVENT="${SERVERLAYOUT_EVENT}\n    InputDevice \"${identifier}\" \"SendCoreEvents\""
        done
    fi

    KBD_TRUE='#'
    if /usr/bin/test -n "${MM_X_KBD_DEVICE}" ; then
        KBD_TRUE=''
    fi
    MOUSE_TRUE='#'
    if /usr/bin/test -n "${MM_X_MOUSE_DEVICE}" ; then
        MOUSE_TRUE=''
    fi
    
    mm_file_replace_variable '/etc/X11/xorg.conf' '@INPUTDEVICE_EVENT@'  "${INPUTDEVICE_EVENT}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@SERVERLAYOUT_EVENT@' "${SERVERLAYOUT_EVENT}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@MM_X_DRIVER@'        "${MM_X_DRIVER}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@MM_X_DEVICE_INTEL@'  "${MM_X_DEVICE_INTEL}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@MM_X_DEVICE_NVIDIA@' "${MM_X_DEVICE_NVIDIA}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@MM_X_DEVICE_VIA@'    "${MM_X_DEVICE_VIA}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@MM_X_TV_TYPE@'       "${MM_X_TV_TYPE}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@MM_X_TV_OUTPUT@'     "${MM_X_TV_OUTPUT}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@MM_X_TV_OVERSCAN@'   "${MM_X_TV_OVERSCAN}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@MM_X_SYNC@'          "${MM_X_SYNC}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@MM_X_REFRESH@'       "${MM_X_REFRESH}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@MM_X_MODELINE@'      "${MM_X_MODELINE}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@MM_X_MODELINE_0@'    "${MM_X_MODELINE_0}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@MM_X_MODELINE_1@'    "${MM_X_MODELINE_1}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@MM_X_MODELINE_2@'    "${MM_X_MODELINE_2}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@MM_X_MODE@'          "${MM_X_MODE}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@MM_X_MODE_0@'        "${MM_X_MODE_0}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@MM_X_MODE_1@'        "${MM_X_MODE_1}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@MM_X_MODE_2@'        "${MM_X_MODE_2}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@X_DISPLAYSIZE_X@'    "${X_DISPLAYSIZE_X}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@X_DISPLAYSIZE_Y@'    "${X_DISPLAYSIZE_Y}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@X_VIRTUAL_X@'        "${X_VIRTUAL_X}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@X_VIRTUAL_Y@'        "${X_VIRTUAL_Y}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@DRI_TRUE@'           "${DRI_TRUE}"
    mm_file_replace_variable '/etc/X11/xorg.conf' '@NVIDIA_TRUE@'        "${NVIDIA_TRUE}"

    mm_message_output info "starting X ..."
    mm_x_start

    return 0
}

stop() {

    mm_message_output info "stopping X ..."
    if /usr/bin/test -n "`/bin/pidof mm_sleep_on_ss`" ; then
        /bin/kill `/bin/pidof mm_sleep_on_ss`
    fi
    mm_x_stop

    return 0
}

case $1 in
    start) start ;;
    stop)  stop  ;;
esac

exit 0
