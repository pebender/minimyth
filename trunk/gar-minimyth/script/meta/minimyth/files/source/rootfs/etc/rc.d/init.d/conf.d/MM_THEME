################################################################################
# MM_THEME configuration variables and files.
################################################################################
conf_clean_MM_THEME() {
    /bin/rm -rf /tmp/init.conf.theme

    return 0
}

conf_check_MM_THEME() {
    local RESOLUTION_X
    local RESOLUTION_Y
    local THEMECACHE_NAME

    # Check for obsolete values.
    if /usr/bin/test "${MM_THEMECACHE_URL}" = "default" ; then
        mm_message_output err "error: 'minimyth.conf' is out of date. MM_THEMECACHE_URL='default' is obsolete."
    fi

    if /usr/bin/test ! -n "${MM_THEME_NAME}" ; then
        mm_message_output err "error: 'MM_THEME_NAME' is not set."
    fi
    if /usr/bin/test ! -n "${MM_THEMEOSD_NAME}" ; then
        mm_message_output err "error: 'MM_THEMEOSD_NAME' is not set."
    fi

    if /usr/bin/test ! -z "${MM_THEME_URL}"          && \
       /usr/bin/test !    "${MM_THEME_URL}" = "none" && \
       /usr/bin/test !    "${MM_THEME_URL}" = "auto" ; then
        if /usr/bin/test -e "/usr/share/mythtv/themes/${MM_THEME_NAME}" ; then
            mm_message_output err "error: MythTV theme directory '${MM_THEME_NAME}' already exists."
        fi
    fi
    if /usr/bin/test ! -z "${MM_THEMEOSD_URL}"          && \
       /usr/bin/test !    "${MM_THEMEOSD_URL}" = "none" && \
       /usr/bin/test !    "${MM_THEMEOSD_URL}" = "auto" ; then
        if /usr/bin/test -e "/usr/share/mythtv/themes/${MM_THEMEOSD_NAME}" ; then
            mm_message_output err "error: MythTV theme directory '${MM_THEMEOSD_NAME}' already exists."
        fi
    fi

    if /usr/bin/test "${MM_THEME_URL}" = "none" ; then
        if /usr/bin/test ! -e "/usr/share/mythtv/themes/${MM_THEME_NAME}" ; then
            mm_message_output err "error: MythTV theme directory '${MM_THEME_NAME}' does not exist."
        fi
    fi
    if /usr/bin/test "${MM_THEMEOSD_URL}" = "none" ; then
        if /usr/bin/test ! -e "/usr/share/mythtv/themes/${MM_THEMEOSD_NAME}" ; then
            mm_message_output err "error: MythTV theme directory '${MM_THEMEOSD_NAME}' does not exist."
        fi
    fi

    return 0
}

conf_default_MM_THEME() {
    # The routine relies on MM_VERSION_* variables.
    conf_default_MM_VERSION

    # The routine relies on MM_X_* variables.
    conf_default_MM_X

    # Test for renamed 'G.A.N.T.' theme.
    if /usr/bin/test "${MM_THEME_NAME}" = "G.A.N.T." ; then
        mm_message_output err "error: theme 'G.A.N.T.' has been renamed to 'G.A.N.T'. Please update 'MM_THEME_NAME'."
    fi

    if /usr/bin/test -z "${MM_THEME_URL}" ; then
        MM_THEME_URL='auto'
    fi
    if /usr/bin/test -z "${MM_THEMEOSD_URL}" ; then
        MM_THEMEOSD_URL='auto'
    fi
    if /usr/bin/test -z "${MM_THEMECACHE_URL}" ; then
        MM_THEMECACHE_URL='auto'
    fi

    if /usr/bin/test "${MM_THEME_URL}" = "auto" ; then
        if /usr/bin/test ! -e "/usr/share/mythtv/themes/${MM_THEME_NAME}" ; then
            MM_THEME_URL="hunt:themes/${MM_THEME_NAME}.sfs"
        else
            MM_THEME_URL="none"
        fi
    fi
    if /usr/bin/test "${MM_THEMEOSD_URL}" = "auto" ; then
        if /usr/bin/test ! -e "/usr/share/mythtv/themes/${MM_THEMEOSD_NAME}" ; then
            MM_THEMEOSD_URL="hunt:themes/${MM_THEMEOSD_NAME}.sfs"
        else
            MM_THEMEOSD_URL="none"
        fi
    fi
    if /usr/bin/test "${MM_THEMECACHE_URL}" = "auto" ; then
        RESOLUTION_X=`mm_mythdb_settings_get GuiWidth`
        if /usr/bin/test -z "${RESOLUTION_X}" || /usr/bin/test ${RESOLUTION_X} -eq 0 ; then
            RESOLUTION_X=`/bin/echo ${MM_X_RESOLUTION} | /bin/sed -e 's%^\([0-9][0-9]*\)x\([0-9][0-9]*\)$%\1%'`
        fi
        RESOLUTION_Y=`mm_mythdb_settings_get GuiHeight`
        if /usr/bin/test -z "${RESOLUTION_Y}" || /usr/bin/test ${RESOLUTION_Y} -eq 0 ; then
            RESOLUTION_Y=`/bin/echo ${MM_X_RESOLUTION} | /bin/sed -e 's%^\([0-9][0-9]*\)x\([0-9][0-9]*\)$%\2%'`
        fi
        THEMECACHE_NAME="${MM_THEME_NAME}.${RESOLUTION_X}.${RESOLUTION_Y}"
        if /usr/bin/test ! -e "/home/minimyth/.mythtv/themecache/${THEMECACHE_NAME}" ; then
            MM_THEMECACHE_URL="confrw:themecaches/${THEMECACHE_NAME}.sfs"
        else
            MM_THEMECACHE_URL="none"
        fi
    fi

    # Convert 'none' to empty.
    if /usr/bin/test "${MM_THEME_URL}" = "none" ; then
        MM_THEME_URL=
    fi
    if /usr/bin/test "${MM_THEMEOSD_URL}" = "none" ; then
        MM_THEMEOSD_URL=
    fi
    if /usr/bin/test "${MM_THEMECACHE_URL}" = "none" ; then
        MM_THEMECACHE_URL=
    fi

    if /usr/bin/test -z "${MM_THEME_NAME}" ; then
        mm_message_output err "error: 'MM_THEME_NAME' is not set."
    fi
    if /usr/bin/test -z "${MM_THEMEOSD_NAME}" ; then
        mm_message_output err "error: 'MM_THEMEOSD_NAME' is not set."
    fi

    MM_THEME_FILE_MENU_ADD=`/bin/echo " ${MM_THEME_FILE_MENU_ADD} " | /bin/sed \
	-e 's%[ \t][ \t]*% %g' \
        -e 's% \([^ /]\)% /\1%g' \
        -e 's%//*%/%g' \
        -e 's%^ %%' \
        -e 's% $%%'`

    return 0
}

conf_write_MM_THEME() {
    local conf_file=$1

    conf_variable_write "${conf_file}" MM_THEME_NAME          "${MM_THEME_NAME}"
    conf_variable_write "${conf_file}" MM_THEMEOSD_NAME       "${MM_THEMEOSD_NAME}"
    conf_variable_write "${conf_file}" MM_THEME_URL           "${MM_THEME_URL}"
    conf_variable_write "${conf_file}" MM_THEMEOSD_URL        "${MM_THEMEOSD_URL}"
    conf_variable_write "${conf_file}" MM_THEMECACHE_URL      "${MM_THEMECACHE_URL}"
    conf_variable_write "${conf_file}" MM_THEME_FILE_MENU_ADD "${MM_THEME_FILE_MENU_ADD}"

    return 0
}

conf_fetch_MM_THEME() {
    local name_remote
    local name_local

    if /usr/bin/test -n "${MM_THEME_FILE_MENU_ADD}" ; then
        /bin/mkdir -p /home/minimyth/.mythtv
        for name_remote in ${MM_THEME_FILE_MENU_ADD} ; do
            name_local=`/usr/bin/basename ${name_remote}`
            name_local="/home/minimyth/.mythtv/${name_local}"
            /bin/rm -f ${name_local}
            mm_confro_get ${name_remote} ${name_local}
            if /usr/bin/test ! -e ${name_local} ; then
                mm_message_output err "error: failed to fetch '${name_remote}' file."
            fi
        done
    fi

    return 0
}
