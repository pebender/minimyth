#!/usr/bin/perl

use strict;
use warnings;

use File::Basename ();
use File::Path ();
use File::Spec ();
use MiniMyth ();

my $minimyth = new MiniMyth;

my $devnull = File::Spec->devnull;

# Only allow one running instance of mm_sleep.
my @pids = $minimyth->application_pids(File::Basename::basename(__FILE__));
if ($#pids > 0)
{
    die;
}

# Create the state directory for mm_sleep.
File::Path::rmtree("/var/lib/mm_sleep.$$");
File::Path::mkpath("/var/lib/mm_sleep.$$", { mode => 0755 });

# Turn off any external equipment.
if (-e q(/usr/bin/mm_external_power_off))
{
    system(q(/usr/bin/mm_external_power_off));
}

# Stop all X applications, except mythfrontend and applications started by xinit.
$minimyth->x_applications_exit(':everything');
$minimyth->x_applications_kill(':everything');
$minimyth->x_applications_dead(':everything');

# Return mythfrontend to its main menu.
$minimyth->x_applications_exit('mythfrontend');

# Stop LCDd because it can stop working as a result of suspend.
if ($minimyth->application_running('LCDd'))
{
    if (open(FILE, '>', "/var/lib/mm_sleep.$$/LCDd"))
    {
        foreach (@{$minimyth->application_cmds('LCDd')})
        {
            print FILE "$_\n";
        }
        close(FILE);
    }
    while ($minimyth->application_running('LCDd'))
    {
        $minimyth->application_stop('LCDd');
    }
}

# Stop irexec so that the remote button press used to wake up the system
# does not suspend the system.
if ($minimyth->application_running('irexec'))
{
    if (open(FILE, '>', "/var/lib/mm_sleep.$$/irexec"))
    {
        foreach (@{$minimyth->application_cmds('irexec')})
        {
            print FILE "$_\n";
        }
        close(FILE);
    }
    while ($minimyth->application_running('irexec'))
    {
        $minimyth->application_stop('irexec');
    }
}

# Stop mm_sleep_on_ss so that it does not immediately send the system back to sleep.
if ($minimyth->application_running('mm_sleep_on_ss'))
{
    if (open(FILE, '>', "/var/lib/mm_sleep.$$/mm_sleep_on_ss"))
    {
        foreach (@{$minimyth->application_cmds('mm_sleep_on_ss')})
        {
            print FILE "$_\n";
        }
        close(FILE);
    }
    while ($minimyth->application_running('mm_sleep_on_ss'))
    {
        $minimyth->application_stop('mm_sleep_on_ss');
    }
}

# Stop X
if ($minimyth->var_get('MM_X_RESTART_ON_SLEEP_ENABLED') eq 'yes')
{
    $minimyth->x_stop();
}

# Save system time to the hardware clock.
system(qq(/sbin/hwclock -w -u));

if (open(FILE, '>', '/sys/power/state'))
{
    print FILE "mem\n";
    close(FILE);
}

# Restore system time from the hardware clock.
system(qq(/sbin/hwclock -r -u $devnull 2>&1));

# Hack to 'clear' NVidia HDMI audio device output.
# Without this, it may output a continuous screeching sound upon resume.
if (-x '/usr/bin/aplay')
{
    # Find all NVidia HDMI sound devices.
    my @device_list = ();
    if (open(FILE, '-|', "/usr/bin/aplay -L"))
    {
        while (<FILE>)
        {
            chomp;
            if (/^(hdmi:CARD=NVidia,.*)$/i)
            {
                push(@device_list, $1);
            }
        }
        close(FILE);
    }
    # Send each NVidia HDMI sound device one silent sample of 48kHz, 2 channel, 16-bit audio.
    # The packed string is the one silent sample in WAVE file format.
    foreach my $device (@device_list)
    {
        if (open(FILE, '|-', "/usr/bin/aplay -q -D '$device' > $devnull 2>&1"))
        {
            print FILE pack('a*Va*a*VvvVVvva*Vvv', 'RIFF',40,'WAVE','fmt ',16,1,2,48000,48000*2*16/8,2*16/8,16,'data',4,0,0);
            close(FILE);
        }
    }
}

# Start X
if ($minimyth->var_get('MM_X_RESTART_ON_SLEEP_ENABLED') eq 'yes')
{
    $minimyth->x_start();
}

# Deactivate any screensavers.
$minimyth->x_screensaver_deactivate();

# If mm_sleep_on_ss was running before suspend, then restart it.
if (-e "/var/lib/mm_sleep.$$/mm_sleep_on_ss")
{
    if (! $minimyth->application_running('mm_sleep_on_ss'))
    {
        if (open(FILE, '<', "/var/lib/mm_sleep.$$/mm_sleep_on_ss"))
        {
            while(<FILE>)
            {
                chomp;
                system($_);
            }
            close(FILE);
        }
    }
    unlink("/var/lib/mm_sleep.$$/mm_sleep_on_ss");
}

# If irexec was running before suspend, then restart it.
if (-e "/var/lib/mm_sleep.$$/irexec")
{
    if (! $minimyth->application_running('irexec'))
    {
        if (open(FILE, '<', "/var/lib/mm_sleep.$$/irexec"))
        {
            while(<FILE>)
            {
                chomp;
                system($_);
            }
            close(FILE);
        }
    }
    unlink("/var/lib/mm_sleep.$$/irexec");
}

# If LCDd was running before suspend, then restart it.
if (-e "/var/lib/mm_sleep.$$/LCDd")
{
    if (! $minimyth->application_running('LDCd'))
    {
        if (open(FILE, '<', "/var/lib/mm_sleep.$$/LCDd"))
        {
            while(<FILE>)
            {
                chomp;
                system($_);
            }
            close(FILE);
        }
    }
    unlink("/var/lib/mm_sleep.$$/LCDd");
}

# Turn on any external equipment.
if (-e q(/usr/bin/mm_external_power_on))
{
    system(qq(/usr/bin/mm_external_power_on));
}

# Remove the state directory for mm_sleep.
File::Path::rmtree("/var/lib/mm_sleep.$$");

1;
