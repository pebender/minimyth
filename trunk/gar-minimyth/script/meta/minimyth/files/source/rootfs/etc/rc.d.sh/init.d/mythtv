#!/bin/sh
################################################################################
# mythtv
#
# This script configures MythTV.
################################################################################
. /etc/rc.d.sh/functions

start() {

    local dir
    local file
    local found
    local jumppoints
    local jumppoints_destination
    local jumppoints_keylist
    local keybindings
    local keybindings_actions
    local keybindings_context
    local keybindings_keylist
    local MTD
    local name_local
    local name_remote
    local settings
    local settings_data
    local settings_value
    local TRANSCODE

    mm_message_output info "configuring MythTV ..."

    # Set OSD fonts.
    mm_mythdb_settings_set "OSDFont"   "FreeSans.ttf"
    mm_mythdb_settings_set "OSDCCFont" "FreeSans.ttf"

    case "${MM_X_DRIVER}" in
        # Disable MythTV's use of OpenGL vertical sync when the intel Xorg driver
        # is used because it does not work.
        intel_810)
            mm_mythdb_settings_set "UseOpenGLVSync" "0"
            ;;
        intel_915)
            mm_mythdb_settings_set "UseOpenGLVSync" "0"
            ;;
        # Disable MythTV's use of OpenGL when the openchrome Xorg driver is used
        # because the unichrome_dri.so is unstable.
        openchrome)
            mm_mythdb_settings_set "SlideshowUseOpenGL" "0"
            mm_mythdb_settings_set "ThemePainter" "qt"
            mm_mythdb_settings_set "UseOpenGLVSync" "0"
            ;;
    esac

    # Set the MythTV theme.
    if /usr/bin/test -n "${MM_THEME_NAME}" ; then
        mm_mythdb_settings_set "Theme" "${MM_THEME_NAME}"
    fi
    # Mount MythTV theme directory.
    if /usr/bin/test -n "${MM_THEME_URL}" ; then
        if ! mm_url_mount "${MM_THEME_URL}" "/usr/share/mythtv/themes/${MM_THEME_NAME}" ; then
            mm_message_output err "error: mount of 'MM_THEME_URL=${MM_THEME_URL}' failed."
            exit 1
        fi
    fi

    # Set the MythTV OSD theme.
    if /usr/bin/test -n "${MM_THEMEOSD_NAME}" ; then
        mm_mythdb_settings_set "OSDTheme" "${MM_THEMEOSD_NAME}"
    fi
    # Mount MythTV OSD theme directory.
    if /usr/bin/test -n "${MM_THEMEOSD_URL}" ; then
        if ! mm_url_mount "${MM_THEMEOSD_URL}" "/usr/share/mythtv/themes/${MM_THEMEOSD_NAME}" ; then
            mm_message_output err "error: mount of 'MM_THEMEOSD_URL=${MM_THEMEOSD_URL}' failed."
            exit 1
        fi
    fi

    # Mount themecache directory.
    if /usr/bin/test -n "${MM_THEMECACHE_URL}" ; then
        mm_url_mount "${MM_THEMECACHE_URL}" "/home/minimyth/.mythtv/themecache"
    fi

    # Configure MythVideo DVD ripping.
    # Since mythfrontend is run as user 'minimyth', mtd is run as user 'minimyth'.
    # As a result, it is user 'minimyth' that must have the required read-write access.
    if /usr/bin/test -n "${MM_MEDIA_DVD_RIP_MOUNTPOINT}" && /usr/bin/test -n "${MM_MEDIA_DVD_RIP_URL}" ; then
        MTD=`/usr/bin/which mtd`
        TRANSCODE=`/usr/bin/which transcode`
        if /usr/bin/test -z "${MTD}" ; then
            mm_message_output err "error: 'mtd' not found."
            exit 1
        fi
        if /bin/su -c "/usr/bin/test ! -e ${MM_MEDIA_DVD_RIP_MOUNTPOINT}" - minimyth ; then
            mm_message_output err "error: mount of 'MM_THEME_URL=${MM_THEME_URL}' failed."
            mm_message_output err "error: '${MM_MEDIA_DVD_RIP_MOUNTPOINT}' does not exist."
            exit 1
        fi
        if /bin/su -c "/usr/bin/test ! -d ${MM_MEDIA_DVD_RIP_MOUNTPOINT}" - minimyth ; then
            mm_message_output err "error: '${MM_MEDIA_DVD_RIP_MOUNTPOINT}' is not a directory."
            exit 1
        fi
        if /bin/su -c "/usr/bin/test ! -w ${MM_MEDIA_DVD_RIP_MOUNTPOINT}" - minimyth ; then
            mm_message_output err "error: '${MM_MEDIA_DVD_RIP_MOUNTPOINT}' is not writable by user 'minimyth'."
            exit 1
        fi
        /bin/su -c "/bin/mkdir -p ${MM_MEDIA_DVD_RIP_MOUNTPOINT}/.mtd" - minimyth
        if /bin/su -c "/usr/bin/test ! -e ${MM_MEDIA_DVD_RIP_MOUNTPOINT}/.mtd" - minimyth ; then
            mm_message_output err "error: '${MM_MEDIA_DVD_RIP_MOUNTPOINT}/.mtd' does not exist."
            exit 1
        fi
        if /bin/su -c "/usr/bin/test ! -d ${MM_MEDIA_DVD_RIP_MOUNTPOINT}/.mtd" - minimyth ; then
            mm_message_output err "error: '${MM_MEDIA_DVD_RIP_MOUNTPOINT}/.mtd' is not a directory."
            exit 1
        fi
        if /bin/su -c "/usr/bin/test ! -w ${MM_MEDIA_DVD_RIP_MOUNTPOINT}/.mtd" - minimyth ; then
            mm_message_output err "error: '${MM_MEDIA_DVD_RIP_MOUNTPOINT}/.mtd' is not writable by user 'minimyth'."
            exit 1
        fi
        mm_mythdb_settings_set "DVDRipLocation" "${MM_MEDIA_DVD_RIP_MOUNTPOINT}/.mtd"
        mm_mythdb_settings_set "TranscodeCommand" "${TRANSCODE}"
        /bin/su -c "${MTD} --daemon" - minimyth
    fi

    # Configure Myth database jumppoints to match MiniMyth.
    set | /bin/grep -e '^MM_MYTHDB_JUMPPOINTS_[^=]*=' | /bin/sed -e 's%^MM_MYTHDB_JUMPPOINTS_[^=]*=%%' -e "s%^'%%" -e "s%'$%%" | \
    while read jumppoints ; do
        jumppoints_destination=`/bin/echo ${jumppoints} | /usr/bin/cut -d '~' -f 1`
        jumppoints_keylist=`/bin/echo ${jumppoints} | /usr/bin/cut -d '~' -f 2`
        mm_mythdb_jumppoints_update "${jumppoints_destination}" "${jumppoints_keylist}"
    done

    # Configure Myth database keybindings to match MiniMyth.
    set | /bin/grep -e '^MM_MYTHDB_KEYBINDINGS_[^=]*=' | /bin/sed -e 's%^MM_MYTHDB_KEYBINDINGS_[^=]*=%%' -e "s%^'%%" -e "s%'$%%" | \
    while read keybindings ; do
        keybindings_context=`/bin/echo ${keybindings} | /usr/bin/cut -d '~' -f 1`
        keybindings_action=`/bin/echo ${keybindings} | /usr/bin/cut -d '~' -f 2`
        keybindings_keylist=`/bin/echo ${keybindings} | /usr/bin/cut -d '~' -f 3`
        mm_mythdb_keybindings_update "${keybindings_context}" "${keybindings_action}" "${keybindings_keylist}"
    done

    # Configure Myth database settings to match MiniMyth.
    set | /bin/grep -e '^MM_MYTHDB_SETTINGS_[^=]*=' | /bin/sed -e 's%^MM_MYTHDB_SETTINGS_[^=]*=%%' -e "s%^'%%" -e "s%'$%%" | \
    while read settings ; do
        settings_value=`/bin/echo ${settings} | /usr/bin/cut -d '~' -f 1`
        settings_data=`/bin/echo ${settings} | /usr/bin/cut -d '~' -f 2`
        mm_mythdb_settings_set "${settings_value}" "${settings_data}"
    done

    # Delete disabled plugins.
    if /usr/bin/test "${MM_PLUGIN_INFORMATION_CENTER_ENABLED}" = "no" ; then
        /bin/sed -i -e 's%<type>MENU_INFO_CENTER</type>%<type>MENU_INFO_CENTER</type><depends></depends>%' \
            /usr/share/mythtv/mainmenu.xml
    fi
    if /usr/bin/test "${MM_PLUGIN_OPTICAL_DISK_ENABLED}" = "no" ; then
        /bin/sed -i -e 's%<depends>mythmusic mythvideo mytharchive mythburn</depends>%<depends>disabled</depends>%' \
            /usr/share/mythtv/mainmenu.xml
    fi
    if /usr/bin/test "${MM_PLUGIN_BROWSER_ENABLED}"     = "no" ; then
        /bin/rm -rf /usr/lib/mythtv/plugins/libmythbookmarkmanager.so
        /bin/rm -rf /usr/share/mythtv/bookmark*
        /bin/rm -rf /usr/share/mythtv/mythbookmarkmanager*
        /bin/rm -rf /usr/share/mythtv/browser*
        /bin/rm -rf /usr/share/mythtv/mythbrowser*
    fi
    if /usr/bin/test "${MM_PLUGIN_DVD_ENABLED}"         = "no" ; then
        /bin/rm -rf /usr/lib/mythtv/plugins/libmythdvd.so
        /bin/rm -rf /usr/share/mythtv/dvd*
        /bin/rm -rf /usr/share/mythtv/mythdvd*
    fi
    if /usr/bin/test "${MM_PLUGIN_GALLERY_ENABLED}"     = "no" ; then
        /bin/rm -rf /usr/lib/mythtv/plugins/libmythgallery.so
        /bin/rm -rf /usr/share/mythtv/gallery*
        /bin/rm -rf /usr/share/mythtv/mythgallery*
    fi
    if /usr/bin/test "${MM_PLUGIN_GAME_ENABLED}"        = "no" ; then
        /bin/rm -rf /usr/lib/mythtv/plugins/libmythgame.so
        /bin/rm -rf /usr/share/mythtv/game*
        /bin/rm -rf /usr/share/mythtv/mythgame*
    fi
    if /usr/bin/test "${MM_PLUGIN_MUSIC_ENABLED}"       = "no" ; then
        /bin/rm -rf /usr/lib/mythtv/plugins/libmythmusic.so
        /bin/rm -rf /usr/share/mythtv/music*
        /bin/rm -rf /usr/share/mythtv/mythmusic*
    fi
    if /usr/bin/test "${MM_PLUGIN_NEWS_ENABLED}"        = "no" ; then
        /bin/rm -rf /usr/lib/mythtv/plugins/libmythnews.so
        /bin/rm -rf /usr/share/mythtv/news*
        /bin/rm -rf /usr/share/mythtv/mythnews*
    fi
    if /usr/bin/test "${MM_PLUGIN_PHONE_ENABLED}"       = "no" ; then
        /bin/rm -rf /usr/lib/mythtv/plugins/libmythphone.so
        /bin/rm -rf /usr/share/mythtv/phone*
        /bin/rm -rf /usr/share/mythtv/mythphone*
    fi
    if /usr/bin/test "${MM_PLUGIN_STREAM_ENABLED}"      = "no" ; then
        /bin/rm -rf /usr/lib/mythtv/plugins/libmythstream.so
        /bin/rm -rf /usr/share/mythtv/stream*
        /bin/rm -rf /usr/share/mythtv/mythstream*
    fi
    if /usr/bin/test "${MM_PLUGIN_VIDEO_ENABLED}"       = "no" ; then
        /bin/rm -rf /usr/lib/mythtv/plugins/libmythvideo.so
        /bin/rm -rf /usr/share/mythtv/video*
        /bin/rm -rf /usr/share/mythtv/mythvideo*
    fi
    if /usr/bin/test "${MM_PLUGIN_WEATHER_ENABLED}"     = "no" ; then
        /bin/rm -rf /usr/lib/mythtv/plugins/libmythweather.so
        /bin/rm -rf /usr/share/mythtv/weather*
        /bin/rm -rf /usr/share/mythtv/mythweather*
    fi
    if /usr/bin/test "${MM_PLUGIN_ZONEMINDER_ENABLED}"  = "no" ; then
        /bin/rm -rf /usr/lib/mythtv/plugins/libmythzoneminder.so
        /bin/rm -rf /usr/share/mythtv/zoneminder*
        /bin/rm -rf /usr/share/mythtv/mythzoneminder*
    fi

    # Check for libdvdcss.so.2
    if /usr/bin/test "${MM_PLUGIN_DVD_ENABLED}"   = "yes" || \
       /usr/bin/test "${MM_PLUGIN_VIDEO_ENABLED}" = "yes" ; then
        found=0
        if /usr/bin/test -e "/etc/ld.so.conf" ; then
            for dir in `/bin/cat /etc/ld.so.conf` ; do
                if /usr/bin/test -e "${dir}/libdvdcss.so.2" ; then
                    found=1
                fi
            done
        fi
        if /usr/bin/test ${found} -eq 0 ; then
            /usr/bin/logger -t minimyth -p "local0.warn" \
                "warning: certain DVDs may not play. see <http://`mm_hostname`/minimyth/document-faq.html#dvd>"
        fi
    fi

    return 0
}

stop() {

    /usr/bin/test -n "`/bin/pidof mtd`" && /usr/bin/killall mtd

    return 0
}

case $1 in
    start) start ;;
    stop)  stop  ;;
esac

exit 0
