diff -Naur splashutils-1.5.2.1-old/configure splashutils-1.5.2.1-new/configure
--- splashutils-1.5.2.1-old/configure	2007-09-23 10:55:59.000000000 -0700
+++ splashutils-1.5.2.1-new/configure	1969-12-31 16:00:00.000000000 -0800
@@ -1,157 +0,0 @@
-#!/bin/bash
-#
-# ./configure -- A very simple configure script for splashutils.
-#
-# (c) 2006-2007, Michal Januszewski <spock@gentoo.org>
-#
-# In time, it will be replaced by a fully-fledged version.
-#
-
-copt_ttf=CONFIG_TTF
-copt_ttf_desc="Enable support for truetype fonts"
-copt_ttf_type="bool"
-copt_ttf_def=y
-
-copt_ttfkern=CONFIG_TTF_KERNEL
-copt_ttfkern_desc="Enable support for truetype fonts in the kernel helper"
-copt_ttfkern_type="bool"
-copt_ttfkern_def=y
-
-copt_png=CONFIG_PNG
-copt_png_desc="Enable support for PNG images"
-copt_png_type="bool"
-copt_png_def=y
-
-copt_mng=CONFIG_MNG
-copt_mng_desc="Enable support for MNG animations"
-copt_mng_type="bool"
-copt_mng_def=n
-
-copt_fbcondecor=CONFIG_FBCON_DECOR
-copt_fbcondecor_desc="Enable support for fbcondecor (previously called fbsplash)"
-copt_fbcondecor_type="bool"
-copt_fbcondecor_def=y
-
-copt_gpm=CONFIG_GPM
-copt_gpm_desc="Enable support for GPM"
-copt_gpm_type="bool"
-copt_gpm_def=y
-
-copt_deprecated=CONFIG_DEPRECATED
-copt_deprecated_desc="Enable support for deprecated features."
-copt_deprecated_type="bool"
-copt_deprecated_def=n
-
-copt_helper=CONFIG_HELPER
-copt_helper_desc="Build the kernel helper."
-copt_helper_type="bool"
-copt_helper_def=y
-
-copt_libdir=CONFIG_LIBDIR
-copt_libdir_desc="Set the location of splash libraries."
-copt_libdir_type="string"
-copt_libdir_def="/lib"
-
-options=`set | grep '^copt_' | sed -re 's/copt_([^_=]+)[_=].*/\1/' | uniq`
-
-write_conf()
-{
-	echo -n > config.h
-
-	for i in ${options} ; do
-		eval vval=\$copt_$i\_val
-		eval vtype=\$copt_$i\_type
-		eval vname=\$copt_$i
-
-		if [[ "$vtype" == "bool" ]]; then
-			if [[ "$vval" == "y" ]]; then
-				echo "#define $vname" >> config.h
-			else
-				echo "#undef $vname" >> config.h
-			fi
-		else
-			echo "#define $vname \"$vval\"" >> config.h
-		fi
-	done
-
-	echo "config.h successfully created."
-	echo "You can run \`make\` now."
-}
-
-usage()
-{
-	cat <<EOTB
-splashutils configuration script
-
-Please use the following options to configure splashutils.
-EOTB
-    printf "  %-20s %-s\n\n" --default "Use a default splashutils configuration"
-
-	for i in ${options} ; do
-		eval vtype=\$copt_$i\_type
-		eval vdesc=\$copt_$i\_desc
-		eval vdef=\$copt_$i\_def
-
-		if [[ ${vtype} == "string" ]]; then
-			with="--with-${i}=VAL"
-		else
-			with="--with-${i}"
-		fi
-
-		vdesc="${vdesc} (default: $vdef)"
-
-		printf "  %-20s %-s\n" ${with} "${vdesc}"
-	done
-}
-
-if [[ $# == 0 ]]; then
-	usage
-	exit
-fi
-
-for i in ${options} ; do
-	eval copt_${i}_val="\$copt_${i}_def"
-done
-
-for i in $* ; do
-	if [[ "$i" == "--help" ]]; then
-		usage
-		exit
-	elif [[ "$i" == "--default" ]]; then
-		write_conf
-		exit
-	fi
-
-	j=${i//--with-}
-	if [[ "$j" != "$i" ]]; then
-		with=y
-	else
-		j=${i//--without-}
-		if [[ "$j" != "$i" ]]; then
-			with=n
-		else
-			usage
-			exit
-		fi
-	fi
-
-	optval=${j#*=}
-	optname=${j%=*}
-
-	eval t=\$copt_${optname}_val
-	if [[ "x$t" == "x" ]]; then
-		echo "Unrecognized setting ${optname}." 1>&2
-		exit
-	fi
-
-	eval vtype=\$copt_${optname}_type
-	if [[ "$vtype" == "bool" ]]; then
-		eval copt_${optname}_val=${with}
-	else
-		eval copt_${optname}_val=${optval}
-	fi
-done
-
-write_conf
-exit
-
diff -Naur splashutils-1.5.2.1-old/fbsplash.h splashutils-1.5.2.1-new/fbsplash.h
--- splashutils-1.5.2.1-old/fbsplash.h	2007-09-23 10:55:59.000000000 -0700
+++ splashutils-1.5.2.1-new/fbsplash.h	1969-12-31 16:00:00.000000000 -0800
@@ -1,100 +0,0 @@
-#ifndef __FBFBSPLASH_H
-#define __FBFBSPLASH_H
-
-#include <stdbool.h>
-#include <stdio.h>
-#include <linux/kd.h>
-#include <linux/input.h>
-
-#define LIBDIR "/lib"
-#define FBSPLASH_CACHEDIR	LIBDIR"/splash/cache"
-#define FBSPLASH_PIDFILE	FBSPLASH_CACHEDIR"/daemon.pid"
-#define FBSPLASH_PROFILE	FBSPLASH_CACHEDIR"/profile"
-#define FBSPLASH_DAEMON		"/sbin/fbsplashd.static"
-#define FBSPLASH_FIFO		FBSPLASH_CACHEDIR"/.splash"
-
-#define FBSPL_THEME_DIR		"/etc/splash"
-#define FBSPL_DEFAULT_THEME	"default"
-#define FBSPL_PROGRESS_MAX	0xffff
-
-/* Effects */
-#define FBSPL_EFF_NONE		0
-#define FBSPL_EFF_FADEIN	1
-#define FBSPL_EFF_FADEOUT	2
-
-/* Verbosity levels */
-#define FBSPL_VERB_QUIET	0
-#define FBSPL_VERB_NORMAL	1
-#define FBSPL_VERB_HIGH	    2
-
-/* Splash mode flags */
-#define FBSPL_MODE_OFF		0x00
-#define FBSPL_MODE_VERBOSE	0x01
-#define FBSPL_MODE_SILENT	0x02
-
-struct fbspl_theme;
-
-typedef enum { fbspl_undef, fbspl_bootup, fbspl_reboot, fbspl_shutdown } fbspl_type_t;
-
-typedef struct
-{
-	char reqmode;	/* a combination of SPL_MODE_ flags */
-	char *theme;	/* theme */
-	char *message;	/* system message */
-	int kdmode;		/* KD_TEXT or KD_GRAPHICS */
-	char effects;	/* fadein, etc */
-	int tty_s;		/* silent tty */
-	int tty_v;		/* verbose tty */
-	char *pidfile;	/* pidfile */
-	fbspl_type_t type;	/* bootup/reboot/shutdown? */
-
-	/* rc system data */
-	bool profile;	/* enable profiling? */
-	bool insane;	/* skip sanity checks? */
-	bool vonerr;	/* switch to verbose on errors? */
-
-	/* daemon data */
-	bool minstances;	/* allow multiple instances of the splash daemon? */
-	int progress;		/* current value of progress */
-	char verbosity;		/* verbosity level */
-} fbspl_cfg_t;
-
-fbspl_cfg_t* fbsplash_lib_init(fbspl_type_t type);
-int fbsplash_lib_cleanup(void);
-int fbsplash_parse_kcmdline(bool sysmsg);
-void fbsplash_get_res(const char *theme, int *xres, int *yres);
-int fbsplash_profile(const char *fmt, ...);
-bool fbsplash_is_silent(void);
-int fbsplash_set_verbose(int old_tty);
-int fbsplash_set_silent(void);
-void fbsplash_acc_theme_set(const char *theme);
-void fbsplash_acc_message_set(const char *msg);
-int fbsplash_set_evdev(void);
-int fbsplash_check_daemon(int *pid_daemon);
-int fbsplash_check_sanity(void);
-int fbsplash_cache_prep(void);
-int fbsplash_cache_cleanup(char **profile_save);
-int fbsplash_send(const char *fmt, ...);
-
-/*
- * Link with libfbsplashrender if you want to use the functions
- * below.
- */
-int fbsplashr_init(bool create);
-void fbsplashr_cleanup(void);
-int fbsplashr_render_buf(struct fbspl_theme *theme, void *buffer, bool repaint);
-int fbsplashr_render_screen(struct fbspl_theme *theme, bool repaint, bool bgnd, char effects);
-struct fbspl_theme *fbsplashr_theme_load();
-void fbsplashr_theme_free(struct fbspl_theme *theme);
-int fbsplashr_tty_silent_init(bool clean);
-int fbsplashr_tty_silent_cleanup(void);
-int fbsplashr_tty_silent_set(int tty);
-int fbsplashr_tty_silent_update(void);
-void fbsplashr_message_set(struct fbspl_theme *theme, const char *msg);
-void fbsplashr_progress_set(struct fbspl_theme *theme, int progress);
-
-int fbsplashr_input_init();
-void fbsplashr_input_cleanup();
-unsigned short fbsplashr_input_getkey(bool block);
-
-#endif /* __FBFBSPLASH_H */
diff -Naur splashutils-1.5.2.1-old/fbsplash.h.in splashutils-1.5.2.1-new/fbsplash.h.in
--- splashutils-1.5.2.1-old/fbsplash.h.in	1969-12-31 16:00:00.000000000 -0800
+++ splashutils-1.5.2.1-new/fbsplash.h.in	2007-09-23 10:59:28.000000000 -0700
@@ -0,0 +1,100 @@
+#ifndef __FBFBSPLASH_H
+#define __FBFBSPLASH_H
+
+#include <stdbool.h>
+#include <stdio.h>
+#include <linux/kd.h>
+#include <linux/input.h>
+
+#define LIBDIR "/lib"
+#define FBSPLASH_CACHEDIR	LIBDIR"/splash/cache"
+#define FBSPLASH_PIDFILE	FBSPLASH_CACHEDIR"/daemon.pid"
+#define FBSPLASH_PROFILE	FBSPLASH_CACHEDIR"/profile"
+#define FBSPLASH_DAEMON		"/sbin/fbsplashd.static"
+#define FBSPLASH_FIFO		FBSPLASH_CACHEDIR"/.splash"
+
+#define FBSPL_THEME_DIR		"/etc/splash"
+#define FBSPL_DEFAULT_THEME	"default"
+#define FBSPL_PROGRESS_MAX	0xffff
+
+/* Effects */
+#define FBSPL_EFF_NONE		0
+#define FBSPL_EFF_FADEIN	1
+#define FBSPL_EFF_FADEOUT	2
+
+/* Verbosity levels */
+#define FBSPL_VERB_QUIET	0
+#define FBSPL_VERB_NORMAL	1
+#define FBSPL_VERB_HIGH	    2
+
+/* Splash mode flags */
+#define FBSPL_MODE_OFF		0x00
+#define FBSPL_MODE_VERBOSE	0x01
+#define FBSPL_MODE_SILENT	0x02
+
+struct fbspl_theme;
+
+typedef enum { fbspl_undef, fbspl_bootup, fbspl_reboot, fbspl_shutdown } fbspl_type_t;
+
+typedef struct
+{
+	char reqmode;	/* a combination of SPL_MODE_ flags */
+	char *theme;	/* theme */
+	char *message;	/* system message */
+	int kdmode;		/* KD_TEXT or KD_GRAPHICS */
+	char effects;	/* fadein, etc */
+	int tty_s;		/* silent tty */
+	int tty_v;		/* verbose tty */
+	char *pidfile;	/* pidfile */
+	fbspl_type_t type;	/* bootup/reboot/shutdown? */
+
+	/* rc system data */
+	bool profile;	/* enable profiling? */
+	bool insane;	/* skip sanity checks? */
+	bool vonerr;	/* switch to verbose on errors? */
+
+	/* daemon data */
+	bool minstances;	/* allow multiple instances of the splash daemon? */
+	int progress;		/* current value of progress */
+	char verbosity;		/* verbosity level */
+} fbspl_cfg_t;
+
+fbspl_cfg_t* fbsplash_lib_init(fbspl_type_t type);
+int fbsplash_lib_cleanup(void);
+int fbsplash_parse_kcmdline(bool sysmsg);
+void fbsplash_get_res(const char *theme, int *xres, int *yres);
+int fbsplash_profile(const char *fmt, ...);
+bool fbsplash_is_silent(void);
+int fbsplash_set_verbose(int old_tty);
+int fbsplash_set_silent(void);
+void fbsplash_acc_theme_set(const char *theme);
+void fbsplash_acc_message_set(const char *msg);
+int fbsplash_set_evdev(void);
+int fbsplash_check_daemon(int *pid_daemon);
+int fbsplash_check_sanity(void);
+int fbsplash_cache_prep(void);
+int fbsplash_cache_cleanup(char **profile_save);
+int fbsplash_send(const char *fmt, ...);
+
+/*
+ * Link with libfbsplashrender if you want to use the functions
+ * below.
+ */
+int fbsplashr_init(bool create);
+void fbsplashr_cleanup(void);
+int fbsplashr_render_buf(struct fbspl_theme *theme, void *buffer, bool repaint);
+int fbsplashr_render_screen(struct fbspl_theme *theme, bool repaint, bool bgnd, char effects);
+struct fbspl_theme *fbsplashr_theme_load();
+void fbsplashr_theme_free(struct fbspl_theme *theme);
+int fbsplashr_tty_silent_init(bool clean);
+int fbsplashr_tty_silent_cleanup(void);
+int fbsplashr_tty_silent_set(int tty);
+int fbsplashr_tty_silent_update(void);
+void fbsplashr_message_set(struct fbspl_theme *theme, const char *msg);
+void fbsplashr_progress_set(struct fbspl_theme *theme, int progress);
+
+int fbsplashr_input_init();
+void fbsplashr_input_cleanup();
+unsigned short fbsplashr_input_getkey(bool block);
+
+#endif /* __FBFBSPLASH_H */
diff -Naur splashutils-1.5.2.1-old/libfbsplash.pc splashutils-1.5.2.1-new/libfbsplash.pc
--- splashutils-1.5.2.1-old/libfbsplash.pc	2007-09-23 10:55:59.000000000 -0700
+++ splashutils-1.5.2.1-new/libfbsplash.pc	1969-12-31 16:00:00.000000000 -0800
@@ -1,10 +0,0 @@
-prefix=/usr
-exec_prefix=/usr
-libdir=/
-includedir=${prefix}/include
-
-Name: libfbsplash
-Description: Provide support for integration of fbsplash with the initscript system. 
-Version: 0.1
-Libs: -L${libdir} -lfbsplash 
-Cflags: -I${includedir}
diff -Naur splashutils-1.5.2.1-old/libfbsplash.pc.in splashutils-1.5.2.1-new/libfbsplash.pc.in
--- splashutils-1.5.2.1-old/libfbsplash.pc.in	1969-12-31 16:00:00.000000000 -0800
+++ splashutils-1.5.2.1-new/libfbsplash.pc.in	2007-09-23 10:59:28.000000000 -0700
@@ -0,0 +1,10 @@
+prefix=/usr
+exec_prefix=/usr
+libdir=/
+includedir=${prefix}/include
+
+Name: libfbsplash
+Description: Provide support for integration of fbsplash with the initscript system. 
+Version: 0.1
+Libs: -L${libdir} -lfbsplash 
+Cflags: -I${includedir}
diff -Naur splashutils-1.5.2.1-old/libfbsplashrender.pc splashutils-1.5.2.1-new/libfbsplashrender.pc
--- splashutils-1.5.2.1-old/libfbsplashrender.pc	2007-09-23 10:55:59.000000000 -0700
+++ splashutils-1.5.2.1-new/libfbsplashrender.pc	1969-12-31 16:00:00.000000000 -0800
@@ -1,11 +0,0 @@
-prefix=/usr
-exec_prefix=/usr
-libdir=${prefix}/lib
-includedir=${prefix}/include
-
-Name: libfbsplashrender
-Description: Provide support for rendering themes used by fbsplash. 
-Version: 0.1
-Libs: -L${libdir} -lfbsplashrender
-Libs.private: -lfbsplash
-Cflags: -I${includedir}
diff -Naur splashutils-1.5.2.1-old/libfbsplashrender.pc.in splashutils-1.5.2.1-new/libfbsplashrender.pc.in
--- splashutils-1.5.2.1-old/libfbsplashrender.pc.in	1969-12-31 16:00:00.000000000 -0800
+++ splashutils-1.5.2.1-new/libfbsplashrender.pc.in	2007-09-23 10:59:28.000000000 -0700
@@ -0,0 +1,11 @@
+prefix=/usr
+exec_prefix=/usr
+libdir=${prefix}/lib
+includedir=${prefix}/include
+
+Name: libfbsplashrender
+Description: Provide support for rendering themes used by fbsplash. 
+Version: 0.1
+Libs: -L${libdir} -lfbsplashrender
+Libs.private: -lfbsplash
+Cflags: -I${includedir}
diff -Naur splashutils-1.5.2.1-old/Makefile splashutils-1.5.2.1-new/Makefile
--- splashutils-1.5.2.1-old/Makefile	2007-09-23 10:55:59.000000000 -0700
+++ splashutils-1.5.2.1-new/Makefile	1969-12-31 16:00:00.000000000 -0800
@@ -1,434 +0,0 @@
-# Makefile for splashutils
-#
-# Copyright (C) 2004-2007, Michal Januszewski <spock@gentoo.org>
-#
-# This file is subject to the terms and conditions of the GNU General Public
-# License.  See the file COPYING in the main directory of this archive for
-# more details.
-#
-
-PKG_VERSION	= 1.5.2.1
-DEBUG		= false		# set to true to prevent stripping
-K_SHARED	= false		# set to true if you want to link to a shared klibc
-QUIET		= true
-
-CC			= gcc
-KLCC		= klcc
-
-# These variables can be defined on the command-line when the user
-# builds splashutils against his own versions of the libraries.
-
-JPEGSRC	?= libs/jpeg-6b
-LPNGSRC ?= libs/libpng-1.2.18
-ZLIBSRC ?= libs/zlib-1.2.3
-FT2SRC  ?= libs/freetype-2.3.5
-
-fbsplash_ver = 1:0:0
-fbsplashr_ver = 1:0:0
-
-LIB = $(shell grep 'define CONFIG_LIBDIR' config.h | sed -e 's/.*"\([^"]*\)".*/\1/g' -e 's!^/!!')
-
-prefix 	  ?= /usr
-prefix2	  ?= /
-bindir     = ${prefix2}/bin
-sbindir    = ${prefix2}/sbin
-libdir     = ${prefix2}/${LIB}
-usrbindir  = ${prefix}/bin
-usrlibdir  = ${prefix}/${LIB}
-mandir 	   = ${prefix}/share/man
-incdir     = ${prefix}/include
-
-INSTALL 		= /usr/bin/install -c
-INSTALL_PROG 	= ${INSTALL}
-INSTALL_DATA 	= ${INSTALL} -m 644
-INSTALL_SCRIPT 	= ${INSTALL_PROG}
-
-ifeq ($(strip $(K_SHARED)),true)
-	K_LDFLAGS = -shared
-else
-	K_LDFLAGS = -static
-endif
-
-ifeq ($(strip $(QUIET)),true)
-	Q = @
-	LQ = --quiet
-	OUTPUT = /dev/null
-else
-	Q =
-	LQ = 
-	OUTPUT = /dev/stdout
-endif
-
-ROOT = $(shell pwd)
-
-# Flags for the kernel utilities
-K_CFLAGS = -Os -w -ffunction-sections -fdata-sections $(MISCINCS) \
-		-I$(ROOT)/$(ZLIBSRC) -I$(ROOT)/$(FT2SRC)/include -I$(ROOT)/$(OBJDIR)/jpeglib \
-		-DWITH_ERRLIST -DTARGET_KERNEL -DTT_CONFIG_OPTION_BYTECODE_INTERPRETER \
-		-I$(ROOT)/$(LPNGSRC) -I$(ROOT)/$(JPEGSRC)
-
-PNGDEFS = -DPNG_NO_WRITE_TIME -DPNG_NO_FLOATING_POINT_SUPPORTED -DPNG_NO_WRITE_SUPPORTED -DPNG_NO_READ_iTXt \
-		-DPNG_LEGACY_SUPPORTED -DPNG_NO_PROGRESSIVE_READ -DPNG_NO_MNG_FEATURES -DPNG_NO_CONSOLE_IO \
-		-DPNG_NO_ERROR_NUMBERS -DPNG_READ_GRAY_TO_RGB_SUPPORTED -DPNG_READ_16_TO_8_SUPPORTED \
-		-DPNG_READ_STRIP_ALPHA_SUPPORTED -DPNG_NO_INFO_IMAGE -DPNG_NO_READ_TRANSFORMS -DPNG_NO_READ_ANCILLARY_CHUNKS \
-		-DPNG_NO_MMX_CODE
-
-K_LDLIBS = $(OBJDIR)/jpeglib/libjpeg.a
-K_OBJS 	 = $(KOUT)/kernel.o $(KOUT)/parse.o $(KOUT)/render.o $(KOUT)/image.o \
-		   $(KOUT)/fbcon_decor.o $(KOUT)/common.o $(KOUT)/list.o $(KOUT)/effects.o $(KOUT)/libfbsplash.o \
-		   $(KOUT)/libfbsplashrender.o
-K_DEPS   =
-
-# Flags for the user utilities
-LDLLIBS  = -ljpeg -lm
-LDLIBS   = -lm -pthread -lrt
-LDFLAGS  ?=
-
-ifeq ($(strip $(DEBUG)),true)
-	STRIP = true
-	CFLAGS ?= -Wall -g
-else
-	STRIP = strip --strip-all -R .comment -R .note
-	CFLAGS ?= -O2
-endif
-
-# Include the klibc header files so that we can compile against fb.h
-# from a kernel thee patched with fbcondecor.
-INCLUDES = -I/usr/include/freetype2 -idirafter /usr/$(LIB)/klibc/include/linux
-LIBOBJS  = $(OBJLDIR)/parse.lo $(OBJLDIR)/image.lo \
-		   $(OBJLDIR)/render.lo $(OBJLDIR)/common.lo $(OBJLDIR)/list.lo \
-		   $(OBJLDIR)/fbcon_decor.lo $(OBJLDIR)/effects.lo
-
-# Checks whether an option is set in config.h
-config_opt = $(shell if [ -e config.h -a -n "`egrep '^\#define[[:space:]]+$(1)([[:space:]]+|$$)' config.h 2>/dev/null`" ]; then echo true ; fi)
-
-ifeq ($(call config_opt,CONFIG_TTF),true)
-	LIBOBJS += $(OBJLDIR)/ttf.lo
-	LDLLIBS += -lfreetype -lz
-endif
-
-ifeq ($(call config_opt,CONFIG_MNG),true)
-	LIBOBJS += $(OBJLDIR)/mng_render.lo $(OBJLDIR)/mng_callbacks.lo
-	LDLLIBS += -lmng -llcms -ljpeg -lz -lrt
-endif
-
-ifeq ($(call config_opt,CONFIG_TTF_KERNEL),true)
-	K_LDLIBS += $(OBJDIR)/freetype2/.libs/libfreetype.a
-	K_OBJS 	 += $(KOUT)/ttf.o
-	K_DEPS	 += ft2
-endif
-
-ifeq ($(call config_opt,CONFIG_PNG),true)
-	K_LDLIBS += $(LPNGSRC)/libpng.a $(ZLIBSRC)/libz.a
-	K_DEPS	 += libpng
-	LDLLIBS	 += -lpng -lz -lm
-endif
-
-ifeq ($(call config_opt,CONFIG_GPM),true)
-	LDLIBS	 += -lgpm
-endif
-
-OBJDIR	= objs
-OBJLDIR = $(OBJDIR)/lib
-OBJTDIR = $(OBJDIR)/test
-KOUT	= $(OBJDIR)/kernel
-dotg    = \e[32;01m*\e[0m
-infmsg	= if [ "${QUIET}" = "true" ] ; then printf "  %-7s %s\n" $(1) $(2) ; fi
-install_script = $(call infmsg,INSTALL,$(1)) ; $(INSTALL_PROG) -D scripts/$(1) $(DESTDIR)$(usrbindir)/$(1) ; \
-		 sed -e 's/%PKG_VERSION%/$(PKG_VERSION)/g' -i $(DESTDIR)$(usrbindir)/$(1)
-
-SP_HELPER = fbcondecor_helper
-SP_UTIL   = splash_util
-SP_GIRAM  = splash_geninitramfs
-SP_RESIZE = splash_resize
-SP_CONV	  = bootsplash2fbsplash
-SP_MNGR	  = splash_manager
-
-# Don't pass command line variables when calling make. This saves
-# us trouble when building against klibc.
-MAKEOVERRIDES=
-
-TARGETS   = objdir $(OBJDIR)/libfbsplash.la $(OBJDIR)/libfbsplashrender.la splash_user
-ifeq ($(call config_opt,CONFIG_HELPER),true)
-	TARGETS += splash_kern
-endif
-ifeq ($(call config_opt,CONFIG_FBCON_DECOR),true)
-	TARGETS += $(OBJDIR)/fbcondecor_ctl
-endif
-
-#### make rules below #####
-
-all:	$(TARGETS)
-
-$(OBJDIR)/libfbsplash.la: $(OBJLDIR)/libfbsplash.lo
-	@$(call infmsg,LD,$@)
-	$(Q)libtool $(LQ) --tag=CC --mode=link $(CC) -version-info $(fbsplash_ver) $(LDFLAGS) -o $(OBJDIR)/libfbsplash.la $+ -rpath $(usrlibdir)
-
-$(OBJDIR)/libfbsplashrender.la: $(OBJLDIR)/libfbsplashrender.lo $(LIBOBJS)
-	@$(call infmsg,LD,$@)
-	$(Q)libtool $(LQ) --tag=CC --mode=link $(CC) -version-info $(fbsplashr_ver) $(LDFLAGS) -o $(OBJDIR)/libfbsplashrender.la $+ $(LDLLIBS) $(OBJDIR)/libfbsplash.la -rpath $(usrlibdir)
-
-splash_user: $(OBJDIR)/$(SP_UTIL) $(OBJDIR)/$(SP_UTIL).static $(OBJDIR)/fbsplashd $(OBJDIR)/fbsplashd.static
-
-$(OBJDIR)/fbcondecor_ctl: $(OBJDIR)/libfbsplashrender.la $(OBJDIR)/fbcon_decor_ctl.o
-	@$(call infmsg,LD,$@)
-	$(Q)libtool $(LQ) --tag=CC --mode=link $(CC) $(LDFLAGS) $+ -o $(OBJDIR)/libfbsplashrender.la $(OBJDIR)/libfbsplash.la -o $@
-
-config.h:
-	@echo "Using default configuration."
-	@if [ ! -e config.h ]; then \
-		./configure --default ; \
-		$(warning "Restart make") \
-		exit 1 ; \
-	fi
-
-$(OBJDIR)/fbsplash.h: fbsplash.h config.h
-	$(Q)cat fbsplash.h | sed -e "s!#define LIBDIR.*!#define LIBDIR \"/$(LIB)\"!" > objs/fbsplash.h
-
-$(OBJDIR)/$(SP_UTIL): $(OBJDIR)/util.o $(OBJDIR)/libfbsplash.la $(OBJDIR)/libfbsplashrender.la
-	@$(call infmsg,LD,$@)
-	$(Q)libtool $(LQ) --tag=CC --mode=link $(CC) $(LDFLAGS) $+ $(OBJDIR)/libfbsplashrender.la $(OBJDIR)/libfbsplash.la -o $@
-
-$(OBJDIR)/$(SP_UTIL).static: $(OBJDIR)/util.o $(OBJDIR)/libfbsplash.la $(OBJDIR)/libfbsplashrender.la
-	@$(call infmsg,LD,$@)
-	$(Q)libtool $(LQ) --tag=CC --mode=link $(CC) -all-static $+ $(OBJDIR)/libfbsplashrender.la $(OBJDIR)/libfbsplash.la $(LDLIBS) -L/usr/lib/nptl -o $@
-
-$(OBJDIR)/fbsplashd: $(OBJDIR)/daemon.o $(OBJDIR)/daemon_cmd.o $(OBJDIR)/libfbsplash.la $(OBJDIR)/libfbsplashrender.la
-	@$(call infmsg,LD,$@)
-	$(Q)libtool $(LQ) --tag=CC --mode=link $(CC) $(LDFLAGS) $(LDLIBS) $+ $(OBJDIR)/libfbsplashrender.la $(OBJDIR)/libfbsplash.la -o $@
-
-$(OBJDIR)/fbsplashd.static: $(OBJDIR)/daemon.o $(OBJDIR)/daemon_cmd.o $(OBJDIR)/libfbsplash.la $(OBJDIR)/libfbsplashrender.la
-	@$(call infmsg,LD,$@)
-	$(Q)libtool $(LQ) --tag=CC --mode=link $(CC) -all-static $(LDFLAGS) $(LDLIBS) $+ $(OBJDIR)/libfbsplashrender.la $(OBJDIR)/libfbsplash.la -o $@
-
-objdir:
-	@if [ ! -d "$(OBJDIR)" ]; then \
-		mkdir "$(OBJDIR)" ; \
-	fi
-	@if [ ! -d "$(KOUT)" ]; then \
-		mkdir "$(KOUT)" ; \
-	fi
-	@if [ ! -d "$(OBJLDIR)" ]; then \
-		mkdir "${OBJLDIR}" ; \
-	fi
-	@if [ ! -d "$(OBJTDIR)" ]; then \
-		mkdir "$(OBJTDIR)" ; \
-	fi
-zlib:	config.h
-	@cd $(ZLIBSRC) ; \
-	if [ ! -e ./Makefile ]; then \
-		$(call infmsg,CONF,zlib) ; \
-		CC=$(KLCC) CFLAGS="$(K_CFLAGS)" \
-		./configure > $(OUTPUT); \
-		sed -i 's#^CFLAGS=\(.*\)#CFLAGS=\1 $(K_CFLAGS)#' Makefile ; \
-	fi ; \
-	if ! make -q CC=$(KLCC) libz.a; then $(call infmsg,MAKE,zlib) ; fi ; \
-	make CC=$(KLCC) libz.a > $(OUTPUT)
-
-libpng:	zlib config.h
-	@cd $(LPNGSRC) ; \
-	if [ ! -e ./Makefile ]; then \
-		$(call infmsg,CONF,libpng) ; \
-		cp scripts/makefile.linux Makefile > $(OUTPUT); \
-		sed -i -e '/^CFLAGS/ { N ; s#^CFLAGS=.*#CFLAGS=$(K_CFLAGS) $(PNGDEFS)# ; P ; D }' \
-		       -e 's#^ZLIBINC=.*#ZLIBINC=$(ZLIBSRC)#' \
-		       -e 's#^ZLIBLIB=.*#ZLIBLIB=$(ZLIBSRC)#' Makefile ; \
-	fi ; \
-	if ! make -q CC=$(KLCC) libpng.a; then $(call infmsg,MAKE,libpng) ; fi ; \
-	make CC=$(KLCC) libpng.a > $(OUTPUT)
-
-jpeglib:
-	@cd $(OBJDIR) ; \
-	if [ ! -d jpeglib ] ; then \
-		mkdir jpeglib ; \
-	fi ; \
-	cd jpeglib ; \
-	if [ ! -e ./Makefile ]; then \
-		$(call infmsg,CONF,libjpeg) ; \
-		CC=$(KLCC) CFLAGS="$(K_CFLAGS) -I$(ROOT)/$(OBJDIR)/jpeglib" \
-		$(ROOT)/$(JPEGSRC)/configure > $(OUTPUT) ; \
-		echo "#define NO_GETENV 1" >> jconfig.h ; \
-		sed -i "s#CFLAGS=.*#CFLAGS=$(K_CFLAGS) -I$(ROOT)/$(OBJDIR)/jpeglib#" Makefile ; \
-		sed -i "s:#define JMESSAGE.*::" $(ROOT)/$(JPEGSRC)/jerror.c ; \
-	fi ; \
-	if ! make -q CC=$(KLCC) libjpeg.a; then $(call infmsg,MAKE,libjpeg) ; fi ; \
-	make CC=$(KLCC) libjpeg.a > $(OUTPUT)
-
-ft2:	config.h
-	@cd $(OBJDIR) ; \
-	if [ ! -d freetype2 ] ; then \
-		mkdir freetype2 ; \
-	fi ; \
-	cd freetype2 ; \
-	if [ ! -e ./config.mk ]; then \
-		$(call infmsg,CONF,freetype2) ; \
-		CFLAGS="$(K_CFLAGS) -include $(ROOT)/klibc_compat.h" \
-		CC=$(KLCC) CPPFLAGS="-I$(ROOT)/$(ZLIBSRC)" \
-		$(ROOT)/$(FT2SRC)/configure --disable-shared > $(OUTPUT) ; \
-	fi ; \
-	if ! make -q CFLAGS="$(K_CFLAGS)" library; then $(call infmsg,MAKE,freetype2) ; fi ; \
-	make CFLAGS="-c $(K_CFLAGS)" CCexe="$(CC)" library > $(OUTPUT)
-
-splash_kern: jpeglib $(K_DEPS) $(OBJDIR)/$(SP_HELPER) config.h $(K_LDLIBS)
-
-$(OBJDIR)/$(SP_HELPER): $(K_OBJS)
-	@$(call infmsg,LD,$@)
-	$(Q)$(KLCC) $(K_LDFLAGS) -o $@ $+ $(K_LDLIBS)
-	$(Q)$(STRIP) $@
-
-$(KOUT)/%.o: %.c config.h $(OBJDIR)/fbsplash.h
-	@$(call infmsg,CC,$@)
-	$(Q)$(KLCC) $(K_CFLAGS) -c -o $@ $<
-
-$(OBJDIR)/%.o: %.c config.h $(OBJDIR)/fbsplash.h daemon.h util.h
-	@$(call infmsg,CC,$@)
-	$(Q)$(CC) $(CFLAGS) -DTARGET_UTIL $(INCLUDES) -DPKG_VERSION=\"$(PKG_VERSION)\" -c -o $@ $<
-
-$(OBJLDIR)/%.lo: %.c config.h $(OBJDIR)/fbsplash.h
-	@$(call infmsg,CC,$@)
-	$(Q)libtool $(LQ) --mode=compile $(CC) $(CFLAGS) $(INCLUDES) -DPKG_VERSION=\"$(PKG_VERSION)\" -c -o $@ $<
-
-doc:
-	doxygen
-
-tests:	objdir $(OBJDIR)/test_parser
-
-$(OBJDIR)/test_parser: $(OBJDIR)/test/test_parser.o $(OBJDIR)/libfbsplash.la $(OBJDIR)/libfbsplashrender.la
-	@$(call infmsg,LD,$@)
-	$(Q)libtool $(LQ) --tag=CC --mode=link $(CC) $(LDFLAGS) $(LDLIBS) $+ -o $@
-
-clean:	clean_all
-
-clean_all:	clean_zlib clean_png clean_test clean_splash
-	@$(call infmsg,CLEAN,all)
-	$(Q)rm -rf $(OBJDIR)/*
-
-clean_test:
-	@$(call infmsg,CLEAN,test)
-	$(Q)rm -rf $(OBJDIR)/test
-
-clean_splash:
-	@$(call infmsg,CLEAN,splash)
-	$(Q)rm -f $(OBJDIR)/{*.o,splash_util,*.so,*.lo,splash_util.static,fbcondecor_helper}
-	$(Q)rm -rf $(OBJDIR)/lib
-	$(Q)rm -rf $(OBJDIR)/kernel
-	$(Q)rm -r config.h
-
-clean_jpg:
-	$(Q)cd $(OBJDIR) ; \
-	if [ -e jpeglib ]; then \
-		cd jpeglib ; \
-	fi ; \
-	if [ -e Makefile ]; then \
-		$(call infmsg,CLEAN,libjpeg) ; \
-		make clean > $(OUTPUT) ; \
-		rm -f Makefile ; \
-	fi
-
-clean_png:
-	$(Q)cd $(LPNGSRC) ; \
-	if [ -e Makefile ]; then \
-		$(call infmsg,CLEAN,libpng) ; \
-		make clean > $(OUTPUT) ; \
-		rm -f Makefile ; \
-	fi
-
-clean_zlib:
-	$(Q)cd $(ZLIBSRC) ; \
-	if [ -e Makefile ]; then \
-		$(call infmsg,CLEAN,zlib) ; \
-		make clean > $(OUTPUT) ; \
-		rm -f Makefile ; \
-	fi
-
-clean_ft2:
-	$(Q)cd $(OBJDIR) ; \
-	if [ -e freetype2 ]; then \
-		cd freetype2 ; \
-	fi ; \
-	if [ -e ./config.mk ]; then \
-		$(call infmsg,CLEAN,freetype2) ; \
-		make clean > $(OUTPUT) ; \
-		rm -f config.mk ; \
-	fi
-
-install: all
-ifeq ($(call config_opt,CONFIG_HELPER),true)
-	@$(call infmsg,INSTALL,$(SP_HELPER))
-	$(Q)$(INSTALL_PROG) -D $(OBJDIR)/$(SP_HELPER) $(DESTDIR)$(sbindir)/$(SP_HELPER)
-	$(Q)ln -sf $(SP_HELPER) $(DESTDIR)$(sbindir)/splash_helper
-	$(Q)$(call install_script,$(SP_GIRAM))
-endif
-	@$(call infmsg,INSTALL,libfbsplash.so)
-	$(Q)libtool $(LQ) --mode=install $(INSTALL_PROG) -D $(OBJDIR)/libfbsplash.la $(DESTDIR)$(usrlibdir)/libfbsplash.la
-	@$(call infmsg,INSTALL,libfbsplashrender.so)
-	$(Q)libtool $(LQ) --mode=install $(INSTALL_PROG) -D $(OBJDIR)/libfbsplashrender.la $(DESTDIR)$(usrlibdir)/libfbsplashrender.la
-	@$(call infmsg,INSTALL,fbsplashd)
-	$(Q)libtool $(LQ) --mode=install $(INSTALL_PROG) -D $(OBJDIR)/fbsplashd $(DESTDIR)$(sbindir)/fbsplashd
-	@$(call infmsg,INSTALL,fbsplashd.static)
-	$(Q)libtool $(LQ) --mode=install $(INSTALL_PROG) -D $(OBJDIR)/fbsplashd.static $(DESTDIR)$(sbindir)/fbsplashd.static
-	@$(call infmsg,INSTALL,$(SP_UTIL))
-	$(Q)libtool $(LQ) --mode=install $(INSTALL_PROG) -D $(OBJDIR)/$(SP_UTIL) $(DESTDIR)$(usrbindir)/$(SP_UTIL)
-	@$(call infmsg,INSTALL,$(SP_UTIL).static)
-	$(Q)libtool $(LQ) --mode=install $(INSTALL_PROG) -D $(OBJDIR)/$(SP_UTIL).static $(DESTDIR)$(bindir)/$(SP_UTIL).static
-ifeq ($(call config_opt,CONFIG_FBCON_DECOR),true)
-	@$(call infmsg,INSTALL,fbcondecor_ctl)
-	$(Q)libtool $(LQ) --mode=install $(INSTALL_PROG) -D $(OBJDIR)/fbcondecor_ctl $(DESTDIR)$(sbindir)/fbcondecor_ctl
-endif
-	@$(call infmsg,INSTALL,fbsplash.h)
-	$(Q)$(INSTALL_PROG) -D objs/fbsplash.h $(DESTDIR)$(incdir)/fbsplash.h
-	@$(call infmsg,INSTALL,splash-functions.sh)
-	$(Q)$(INSTALL_PROG) -D scripts/splash-functions.sh $(DESTDIR)$(sbindir)/splash-functions.sh
-	$(Q)$(call install_script,$(SP_CONV))
-	$(Q)$(call install_script,$(SP_RESIZE))
-	$(Q)$(call install_script,$(SP_MNGR))
-	$(Q)cp -f libfbsplash.pc libfbsplashrender.pc $(OBJDIR)/
-	$(Q)sed -i -e 's#prefix=.*#prefix=$(prefix)#' $(OBJDIR)/libfbsplash.pc
-	$(Q)sed -i -e 's#prefix=.*#prefix=$(prefix)#' $(OBJDIR)/libfbsplashrender.pc
-	$(Q)sed -i -e 's#libdir=.*#libdir=$(usrlibdir)#' $(OBJDIR)/libfbsplash.pc
-	$(Q)sed -i -e 's#libdir=.*#libdir=$(usrlibdir)#' $(OBJDIR)/libfbsplashrender.pc
-	$(Q)sed -i -e 's#Libs.private: .*#Libs.private: -lfbsplash $(LDLLIBS)#' $(OBJDIR)/libfbsplashrender.pc
-	@$(call infmsg,INSTALL,libfbsplash.pc)
-	$(Q)$(INSTALL_PROG) -D -m 0664 $(OBJDIR)/libfbsplash.pc $(DESTDIR)$(usrlibdir)/pkgconfig/libfbsplash.pc
-	@$(call infmsg,INSTALL,libfbsplashrender.pc)
-	$(Q)$(INSTALL_PROG) -D -m 0664 $(OBJDIR)/libfbsplashrender.pc $(DESTDIR)$(usrlibdir)/pkgconfig/libfbsplashrender.pc
-
-uninstall:
-ifeq ($(call config_opt,CONFIG_HELPER),true)
-	@$(call infmsg,UNINSTALL,$(SP_HELPER))
-	$(Q)rm -f $(sbindir)/$(SP_HELPER)
-	$(Q)rm -f $(sbindir)/splash_helper
-	@$(call infmsg,UNINSTALL,$(SP_GIRAM))
-	$(Q)rm -f $(usrbindir)/$(SP_GIRAM)
-endif
-ifeq ($(call config_opt,CONFIG_FBCON_DECOR),true)
-	@$(call infmsg,UNINSTALL,fbcondecor_ctl)
-	$(Q)rm -f $(sbindir)/fbcondecor_ctl
-endif
-	@$(call infmsg,UNINSTALL,fbsplashd)
-	$(Q)rm -f $(sbindir)/fbsplashd
-	@$(call infmsg,UNINSTALL,fbsplashd.static)
-	$(Q)rm -f $(sbindir)/fbsplashd.static
-	@$(call infmsg,UNINSTALL,$(SP_UTIL))
-	$(Q)rm -f $(usrbindir)/$(SP_UTIL)
-	@$(call infmsg,UNINSTALL,$(SP_UTIL).static)
-	$(Q)rm -f $(bindir)/$(SP_UTIL).static
-	@$(call infmsg,UNINSTALL,libfbsplash.so)
-	$(Q)libtool $(LQ) --mode=uninstall rm -f $(usrlibdir)/libfbsplash.so
-	@$(call infmsg,UNINSTALL,libfbsplashrender.so)
-	$(Q)libtool $(LQ) --mode=uninstall rm -f $(usrlibdir)/libfbsplashrender.so
-	@$(call insmsg,UNINSTALL,fbsplash.h)
-	$(Q)rm -f $(incdir)/fbsplash.h
-	@$(call infmsg,UNINSTALL,splash-functions.sh)
-	$(Q)rm -f $(sbindir)/splash-functions.sh
-	@$(call infmsg,UNINSTALL,$(SP_CONV))
-	$(Q)rm -f $(usrbindir)/$(SP_CONV)
-	@$(call infmsg,UNINSTALL,$(SP_RESIZE))
-	$(Q)rm -f $(usrbindir)/$(SP_RESIZE)
-	@$(call infmsg,UNINSTALL,$(SP_MNGR))
-	$(Q)rm -f $(usrbindir)/$(SP_MNGR)
-	@$(call infmsg,UNINSTALL,libfbsplash.pc)
-	$(Q)rm -f $(usrlibdir)/pkgconfig/libfbsplash.pc
-	@$(call infmsg,UNINSTALL,libfbsplashrender.pc)
-	$(Q)rm -f $(usrlibdir)/pkgconfig/libfbsplashrender.pc
-
diff -Naur splashutils-1.5.2.1-old/misc/Makefile splashutils-1.5.2.1-new/misc/Makefile
--- splashutils-1.5.2.1-old/misc/Makefile	2007-09-23 10:55:59.000000000 -0700
+++ splashutils-1.5.2.1-new/misc/Makefile	1969-12-31 16:00:00.000000000 -0800
@@ -1,7 +0,0 @@
-LDLIBS = -lfbsplashrender
-CFLAGS = -g -Wall -I../objs
-
-all: splashtest benchmark blittest inputtest
-
-clean:
-	rm -rf splashtest benchmark inputtest
diff -Naur splashutils-1.5.2.1-old/scripts/bootsplash2fbsplash splashutils-1.5.2.1-new/scripts/bootsplash2fbsplash
--- splashutils-1.5.2.1-old/scripts/bootsplash2fbsplash	2007-09-23 10:55:59.000000000 -0700
+++ splashutils-1.5.2.1-new/scripts/bootsplash2fbsplash	1969-12-31 16:00:00.000000000 -0800
@@ -1,127 +0,0 @@
-#!/usr/bin/perl
-#
-# bootsplash2fbsplash -- theme conversion utility 
-# (c) 2004-2005 Michal Januszewski <spock@gentoo.org>
-#
-# Usage: bootsplash2fbsplash [--remove-comments] <theme_name>
-#
-
-$path_bp = "/etc/bootsplash/";
-$path_fbspl = "/etc/splash";
-$comments = 1;
-$theme = "";
-
-sub usage
-{
-	print "bootsplash2fbsplash theme converter / splashutils-%PKG_VERSION%\n";
-	print '(c) 2004-2005 Michal Januszewski <spock@gentoo.org>'."\n\n";
-	print "Usage: bootsplash2fbsplash [--remove-comments] <theme_name>\n";
-}
-
-my @args = @ARGV;
-
-while ($arg = shift @args) {
-	if ($arg eq "--remove-comments") {
-		$comments = 0;
-	} elsif ($arg eq "--bootsplash-path") {
-		$path_bp = shift @args;
-	} elsif ($arg eq "--fbsplash-path") {
-		$path_fbspl = shift @args;
-	} else {
-		$theme = $arg;
-	}
-}
-
-if ($#ARGV < 0 || $theme eq "") {
-	usage();
-	exit 0;
-}
-
-$path_bp =~ s#//#/#g;
-$path_fbspl =~ s#//#/#g;
-
-$cfgroot = "$path_bp/$theme/config";
-$fbspl_images = "$path_fbspl/$theme/images";
-
-opendir(DIR, "$cfgroot") || die "Can't open $cfgroot: $!"; 
-@configs = grep { /\.cfg$/ && /bootsplash/ && -f "$cfgroot/$_" } readdir(DIR);
-closedir(DIR);
-
-foreach $cfg (@configs) {
-	$cfg =~ /(\d+)x(\d+)/;
-	$xres = $1;
-	$yres = $2;
-
-	`mkdir -p $fbspl_images`;
-	
-	open(IN, "<$cfgroot/$cfg");
-	open(OUT, ">$path_fbspl/$theme/${xres}x${yres}.cfg");
-
-	@known_keyw = ("bgcolor", "tx", "ty", "tw", "th", "text_x", "text_y",
-		       "text_size", "text_color");
-	$empty = 0;
-	       
-	while ($line = <IN>) {
-
-		if ($line =~ /^\s*#/ || $line =~ /^\s*$/ || $line =~ /^\s*box /) {
-			goto ok;
-		} elsif ($line =~ /(silent)?jpeg=(.*)$/) {
-		
-			$empty = 0;
-			
-			if ($1 eq "silent") {
-				$t = "silent";
-			} else {
-				$t = "verbose";
-			}
-			
-			$t = "$fbspl_images/$t-${xres}x${yres}.jpg";
-			$line = "$1pic=$t\n";
-		
-			if (-e "$2") { 
-				`cp -fp -H "$2" "$t"`;
-			} else {
-				print "Error: $2 not found!\n"
-			}
-		} else {
-			foreach $key (@known_keyw) {
-				if ($line =~ /^\s*$key=/) {
-					$empty = 0;
-					goto ok; 
-				}
-			}
-			next;
-		}
-
-ok:		if (!$comments) {
-			if ($line =~ /^\s*#/) {
-				next;
-			} elsif ($line =~ /^\s*$/) {
-				if (!$empty) {
-					$empty = 1;
-				} else {
-					next;
-				}
-			}
-		}
-		
-		print OUT $line;
-	}
-
-	$a = `md5sum "$fbspl_images/silent-${xres}x${yres}.jpg" 2>/dev/null | cut -f1 -d' '`;
-	$b = `md5sum "$fbspl_images/verbose-${xres}x${yres}.jpg" 2>/dev/null | cut -f1 -d' '`;
-
-	chomp $a;
-	chomp $b;
-	
-	if ($a eq $b) {
-		`rm -f "$fbspl_images/silent-${xres}x${yres}.jpg"`;
-		`ln -s "$fbspl_images/verbose-${xres}x${yres}.jpg" "$fbspl_images/silent-${xres}x${yres}.jpg"`;
-	}
-
-	close(OUT);
-	close(IN);
-	
-	print "o Parsed $cfg (${xres}x${yres})\n";
-}
-
diff -Naur splashutils-1.5.2.1-old/scripts/bootsplash2fbsplash.in splashutils-1.5.2.1-new/scripts/bootsplash2fbsplash.in
--- splashutils-1.5.2.1-old/scripts/bootsplash2fbsplash.in	1969-12-31 16:00:00.000000000 -0800
+++ splashutils-1.5.2.1-new/scripts/bootsplash2fbsplash.in	2007-09-23 10:57:15.000000000 -0700
@@ -0,0 +1,127 @@
+#!/usr/bin/perl
+#
+# bootsplash2fbsplash -- theme conversion utility 
+# (c) 2004-2005 Michal Januszewski <spock@gentoo.org>
+#
+# Usage: bootsplash2fbsplash [--remove-comments] <theme_name>
+#
+
+$path_bp = "/etc/bootsplash/";
+$path_fbspl = "/etc/splash";
+$comments = 1;
+$theme = "";
+
+sub usage
+{
+	print "bootsplash2fbsplash theme converter / splashutils-%PKG_VERSION%\n";
+	print '(c) 2004-2005 Michal Januszewski <spock@gentoo.org>'."\n\n";
+	print "Usage: bootsplash2fbsplash [--remove-comments] <theme_name>\n";
+}
+
+my @args = @ARGV;
+
+while ($arg = shift @args) {
+	if ($arg eq "--remove-comments") {
+		$comments = 0;
+	} elsif ($arg eq "--bootsplash-path") {
+		$path_bp = shift @args;
+	} elsif ($arg eq "--fbsplash-path") {
+		$path_fbspl = shift @args;
+	} else {
+		$theme = $arg;
+	}
+}
+
+if ($#ARGV < 0 || $theme eq "") {
+	usage();
+	exit 0;
+}
+
+$path_bp =~ s#//#/#g;
+$path_fbspl =~ s#//#/#g;
+
+$cfgroot = "$path_bp/$theme/config";
+$fbspl_images = "$path_fbspl/$theme/images";
+
+opendir(DIR, "$cfgroot") || die "Can't open $cfgroot: $!"; 
+@configs = grep { /\.cfg$/ && /bootsplash/ && -f "$cfgroot/$_" } readdir(DIR);
+closedir(DIR);
+
+foreach $cfg (@configs) {
+	$cfg =~ /(\d+)x(\d+)/;
+	$xres = $1;
+	$yres = $2;
+
+	`mkdir -p $fbspl_images`;
+	
+	open(IN, "<$cfgroot/$cfg");
+	open(OUT, ">$path_fbspl/$theme/${xres}x${yres}.cfg");
+
+	@known_keyw = ("bgcolor", "tx", "ty", "tw", "th", "text_x", "text_y",
+		       "text_size", "text_color");
+	$empty = 0;
+	       
+	while ($line = <IN>) {
+
+		if ($line =~ /^\s*#/ || $line =~ /^\s*$/ || $line =~ /^\s*box /) {
+			goto ok;
+		} elsif ($line =~ /(silent)?jpeg=(.*)$/) {
+		
+			$empty = 0;
+			
+			if ($1 eq "silent") {
+				$t = "silent";
+			} else {
+				$t = "verbose";
+			}
+			
+			$t = "$fbspl_images/$t-${xres}x${yres}.jpg";
+			$line = "$1pic=$t\n";
+		
+			if (-e "$2") { 
+				`cp -fp -H "$2" "$t"`;
+			} else {
+				print "Error: $2 not found!\n"
+			}
+		} else {
+			foreach $key (@known_keyw) {
+				if ($line =~ /^\s*$key=/) {
+					$empty = 0;
+					goto ok; 
+				}
+			}
+			next;
+		}
+
+ok:		if (!$comments) {
+			if ($line =~ /^\s*#/) {
+				next;
+			} elsif ($line =~ /^\s*$/) {
+				if (!$empty) {
+					$empty = 1;
+				} else {
+					next;
+				}
+			}
+		}
+		
+		print OUT $line;
+	}
+
+	$a = `md5sum "$fbspl_images/silent-${xres}x${yres}.jpg" 2>/dev/null | cut -f1 -d' '`;
+	$b = `md5sum "$fbspl_images/verbose-${xres}x${yres}.jpg" 2>/dev/null | cut -f1 -d' '`;
+
+	chomp $a;
+	chomp $b;
+	
+	if ($a eq $b) {
+		`rm -f "$fbspl_images/silent-${xres}x${yres}.jpg"`;
+		`ln -s "$fbspl_images/verbose-${xres}x${yres}.jpg" "$fbspl_images/silent-${xres}x${yres}.jpg"`;
+	}
+
+	close(OUT);
+	close(IN);
+	
+	print "o Parsed $cfg (${xres}x${yres})\n";
+}
+
diff -Naur splashutils-1.5.2.1-old/scripts/splash-functions.sh splashutils-1.5.2.1-new/scripts/splash-functions.sh
--- splashutils-1.5.2.1-old/scripts/splash-functions.sh	2007-09-23 10:55:59.000000000 -0700
+++ splashutils-1.5.2.1-new/scripts/splash-functions.sh	1969-12-31 16:00:00.000000000 -0800
@@ -1,171 +0,0 @@
-# Copyright 1999-2007 Gentoo Foundation
-# Distributed under the terms of the GNU General Public License v2
-
-# Author:     Michal Januszewski <spock@gentoo.org>
-# Maintainer: Michal Januszewski <spock@gentoo.org>
-
-# This file is a part of splashutils. The functions contained in this
-# file are meant to be used by hook scripts in splash themes. The code
-# will be kept distro-agnostic to facilitate portability.
-
-# ####################################################################
-#    Change any settings ONLY if you are sure what you're doing.
-#    Don't cry if it breaks afterwards.
-# ####################################################################
-
-# The splash scripts need a cache which can be guaranteed to be
-# both readable and writable at all times, even when the root fs
-# is mounted read-only. This writable space is provided by a tmpfs
-# mounted at ${spl_cachedir}.
-export spl_util="/bin/splash_util.static"
-export spl_decor="/sbin/fbcondecor_ctl.static"
-export spl_bindir="/lib/splash/bin"
-export spl_cachedir="/lib/splash/cache"
-export spl_fifo="${spl_cachedir}/.splash"
-export spl_pidfile="${spl_cachedir}/daemon.pid"
-
-[ -r /etc/init.d/functions.sh ] && . /etc/init.d/functions.sh
-
-splash_setup() {
-	# If it's already set up, let's not waste time on parsing the config
-	# files again
-	if [ "${SPLASH_THEME}" != "" -a "${SPLASH_TTY}" != "" -a "$1" != "force" ]; then
-		return 0
-	fi
-
-	export SPLASH_MODE_REQ="off"
-	export SPLASH_PROFILE="off"
-	export SPLASH_THEME="default"
-	export SPLASH_TTY="16"
-	export SPLASH_KDMODE="TEXT"
-	export SPLASH_BOOT_MESSAGE="Booting the system (\$progress%)... Press F2 for verbose mode."
-	export SPLASH_SHUTDOWN_MESSAGE="Shutting down the system (\$progress%)... Press F2 for verbose mode."
-	export SPLASH_REBOOT_MESSAGE="Rebooting the system (\$progress%)... Press F2 for verbose mode."
-
-	[ -f /etc/conf.d/splash ] && . /etc/conf.d/splash
-	[ -f /etc/conf.d/fbcondecor ] && . /etc/conf.d/fbcondecor
-
-	if [ -f /proc/cmdline ]; then
-		options=$(grep -o 'splash=[^ ]*' /proc/cmdline)
-
-		# Execute this loop over $options so that we can process multiple
-		# splash= arguments on the kernel command line. Useful for adjusting
-		# splash parameters from ISOLINUX.
-		for opt in ${options} ; do
-			options=${opt#*=}
-
-			for i in $(echo "${options}" | sed -e 's/,/ /g') ; do
-				case ${i%:*} in
-					theme)		SPLASH_THEME=${i#*:} ;;
-					tty)		SPLASH_TTY=${i#*:} ;;
-					verbose) 	SPLASH_MODE_REQ="verbose" ;;
-					silent)		SPLASH_MODE_REQ="silent" ;;
-					kdgraphics)	SPLASH_KDMODE="GRAPHICS" ;;
-					profile)	SPLASH_PROFILE="on" ;;
-				esac
-			done
-		done
-	fi
-}
-
-splash_get_boot_message() {
-	if [ "${RUNLEVEL}" = "6" ]; then
-		echo "${SPLASH_REBOOT_MESSAGE}"
-	elif [ "${RUNLEVEL}" = "0" ]; then
-		echo "${SPLASH_SHUTDOWN_MESSAGE}"
-	else
-		echo "${SPLASH_BOOT_MESSAGE}"
-	fi
-}
-
-###########################################################################
-# Common functions
-###########################################################################
-
-# Sends data to the splash FIFO after making sure there's someone
-# alive on the other end to receive it.
-splash_comm_send() {
-	if [ ! -e "${spl_pidfile}" ]; then
-		return 1
-	fi
-
-	if [ -r /proc/$(<"${spl_pidfile}")/status -a \
-		  "$( (read t;echo ${t} | sed -e 's/Name: //') </proc/$(<${spl_pidfile})/status)" = "splash_util.sta" ]; then
-		echo "$*" > "${spl_fifo}" &
-	else
-		echo "Splash daemon not running!"
-		rm -f "${spl_pidfile}"
-	fi
-}
-
-# Returns the current splash mode.
-splash_get_mode() {
-	local ctty="${spl_bindir}/fgconsole"
-	local mode="$(${spl_util})"
-
-	if [ "${mode}" = "silent" ]; then
-		echo "silent"
-	else
-		if [ -z "$(${spl_decor} -c getstate --tty=${ctty} 2>/dev/null | grep off)" ]; then
-			echo "verbose"
-		else
-			echo "off"
-		fi
-	fi
-}
-
-# chvt <n>
-# --------
-# Switches to the n-th tty.
-chvt() {
-	local ntty=$1
-
-	if [ -x /usr/bin/chvt ] ; then
-		/usr/bin/chvt ${ntty}
-	else
-		printf "\e[12;${ntty}]"
-	fi
-}
-
-# Switches to verbose mode.
-splash_verbose() {
-	chvt 1
-}
-
-# Switches to silent mode.
-splash_silent() {
-	splash_comm_send "set mode silent"
-}
-
-###########################################################################
-# Service list
-###########################################################################
-
-# splash_svclist_get <type>
-# -------------------------
-# type:
-#  - start - to get a list of services to be started during bootup
-#  - stop  - to get a list of services to be stopped during shutdown/reboot
-splash_svclist_get() {
-	if [ "$1" = "start" -a -r "${spl_cachedir}/svcs_start" ]; then
-		cat "${spl_cachedir}/svcs_start"
-	elif [ "$1" = "stop" -a -r "${spl_cachedir}/svcs_stop"]; then
-		cat "${spl_cachedir}/svcs_stop"
-	fi
-}
-
-# Export functions if we're running bash.
-if [ -n "${BASH}" ]; then
-	export -f splash_setup
-	export -f splash_get_boot_message
-	export -f splash_comm_send
-	export -f splash_get_mode
-	export -f chvt
-	export -f splash_verbose
-	export -f splash_silent
-	export -f splash_svclist_get
-fi
-
-splash_setup
-
-# vim:ts=4
diff -Naur splashutils-1.5.2.1-old/scripts/splash-functions.sh.in splashutils-1.5.2.1-new/scripts/splash-functions.sh.in
--- splashutils-1.5.2.1-old/scripts/splash-functions.sh.in	1969-12-31 16:00:00.000000000 -0800
+++ splashutils-1.5.2.1-new/scripts/splash-functions.sh.in	2007-09-23 10:57:15.000000000 -0700
@@ -0,0 +1,171 @@
+# Copyright 1999-2007 Gentoo Foundation
+# Distributed under the terms of the GNU General Public License v2
+
+# Author:     Michal Januszewski <spock@gentoo.org>
+# Maintainer: Michal Januszewski <spock@gentoo.org>
+
+# This file is a part of splashutils. The functions contained in this
+# file are meant to be used by hook scripts in splash themes. The code
+# will be kept distro-agnostic to facilitate portability.
+
+# ####################################################################
+#    Change any settings ONLY if you are sure what you're doing.
+#    Don't cry if it breaks afterwards.
+# ####################################################################
+
+# The splash scripts need a cache which can be guaranteed to be
+# both readable and writable at all times, even when the root fs
+# is mounted read-only. This writable space is provided by a tmpfs
+# mounted at ${spl_cachedir}.
+export spl_util="/bin/splash_util.static"
+export spl_decor="/sbin/fbcondecor_ctl.static"
+export spl_bindir="/lib/splash/bin"
+export spl_cachedir="/lib/splash/cache"
+export spl_fifo="${spl_cachedir}/.splash"
+export spl_pidfile="${spl_cachedir}/daemon.pid"
+
+[ -r /etc/init.d/functions.sh ] && . /etc/init.d/functions.sh
+
+splash_setup() {
+	# If it's already set up, let's not waste time on parsing the config
+	# files again
+	if [ "${SPLASH_THEME}" != "" -a "${SPLASH_TTY}" != "" -a "$1" != "force" ]; then
+		return 0
+	fi
+
+	export SPLASH_MODE_REQ="off"
+	export SPLASH_PROFILE="off"
+	export SPLASH_THEME="default"
+	export SPLASH_TTY="16"
+	export SPLASH_KDMODE="TEXT"
+	export SPLASH_BOOT_MESSAGE="Booting the system (\$progress%)... Press F2 for verbose mode."
+	export SPLASH_SHUTDOWN_MESSAGE="Shutting down the system (\$progress%)... Press F2 for verbose mode."
+	export SPLASH_REBOOT_MESSAGE="Rebooting the system (\$progress%)... Press F2 for verbose mode."
+
+	[ -f /etc/conf.d/splash ] && . /etc/conf.d/splash
+	[ -f /etc/conf.d/fbcondecor ] && . /etc/conf.d/fbcondecor
+
+	if [ -f /proc/cmdline ]; then
+		options=$(grep -o 'splash=[^ ]*' /proc/cmdline)
+
+		# Execute this loop over $options so that we can process multiple
+		# splash= arguments on the kernel command line. Useful for adjusting
+		# splash parameters from ISOLINUX.
+		for opt in ${options} ; do
+			options=${opt#*=}
+
+			for i in $(echo "${options}" | sed -e 's/,/ /g') ; do
+				case ${i%:*} in
+					theme)		SPLASH_THEME=${i#*:} ;;
+					tty)		SPLASH_TTY=${i#*:} ;;
+					verbose) 	SPLASH_MODE_REQ="verbose" ;;
+					silent)		SPLASH_MODE_REQ="silent" ;;
+					kdgraphics)	SPLASH_KDMODE="GRAPHICS" ;;
+					profile)	SPLASH_PROFILE="on" ;;
+				esac
+			done
+		done
+	fi
+}
+
+splash_get_boot_message() {
+	if [ "${RUNLEVEL}" = "6" ]; then
+		echo "${SPLASH_REBOOT_MESSAGE}"
+	elif [ "${RUNLEVEL}" = "0" ]; then
+		echo "${SPLASH_SHUTDOWN_MESSAGE}"
+	else
+		echo "${SPLASH_BOOT_MESSAGE}"
+	fi
+}
+
+###########################################################################
+# Common functions
+###########################################################################
+
+# Sends data to the splash FIFO after making sure there's someone
+# alive on the other end to receive it.
+splash_comm_send() {
+	if [ ! -e "${spl_pidfile}" ]; then
+		return 1
+	fi
+
+	if [ -r /proc/$(<"${spl_pidfile}")/status -a \
+		  "$( (read t;echo ${t} | sed -e 's/Name: //') </proc/$(<${spl_pidfile})/status)" = "splash_util.sta" ]; then
+		echo "$*" > "${spl_fifo}" &
+	else
+		echo "Splash daemon not running!"
+		rm -f "${spl_pidfile}"
+	fi
+}
+
+# Returns the current splash mode.
+splash_get_mode() {
+	local ctty="${spl_bindir}/fgconsole"
+	local mode="$(${spl_util})"
+
+	if [ "${mode}" = "silent" ]; then
+		echo "silent"
+	else
+		if [ -z "$(${spl_decor} -c getstate --tty=${ctty} 2>/dev/null | grep off)" ]; then
+			echo "verbose"
+		else
+			echo "off"
+		fi
+	fi
+}
+
+# chvt <n>
+# --------
+# Switches to the n-th tty.
+chvt() {
+	local ntty=$1
+
+	if [ -x /usr/bin/chvt ] ; then
+		/usr/bin/chvt ${ntty}
+	else
+		printf "\e[12;${ntty}]"
+	fi
+}
+
+# Switches to verbose mode.
+splash_verbose() {
+	chvt 1
+}
+
+# Switches to silent mode.
+splash_silent() {
+	splash_comm_send "set mode silent"
+}
+
+###########################################################################
+# Service list
+###########################################################################
+
+# splash_svclist_get <type>
+# -------------------------
+# type:
+#  - start - to get a list of services to be started during bootup
+#  - stop  - to get a list of services to be stopped during shutdown/reboot
+splash_svclist_get() {
+	if [ "$1" = "start" -a -r "${spl_cachedir}/svcs_start" ]; then
+		cat "${spl_cachedir}/svcs_start"
+	elif [ "$1" = "stop" -a -r "${spl_cachedir}/svcs_stop"]; then
+		cat "${spl_cachedir}/svcs_stop"
+	fi
+}
+
+# Export functions if we're running bash.
+if [ -n "${BASH}" ]; then
+	export -f splash_setup
+	export -f splash_get_boot_message
+	export -f splash_comm_send
+	export -f splash_get_mode
+	export -f chvt
+	export -f splash_verbose
+	export -f splash_silent
+	export -f splash_svclist_get
+fi
+
+splash_setup
+
+# vim:ts=4
diff -Naur splashutils-1.5.2.1-old/scripts/splash_geninitramfs splashutils-1.5.2.1-new/scripts/splash_geninitramfs
--- splashutils-1.5.2.1-old/scripts/splash_geninitramfs	2007-09-23 10:55:59.000000000 -0700
+++ splashutils-1.5.2.1-new/scripts/splash_geninitramfs	1969-12-31 16:00:00.000000000 -0800
@@ -1,238 +0,0 @@
-#!/bin/bash
-#
-# splash_geninitramfs -- an utility to create initramfs images for use with fbsplash
-#
-# Copyright (C) 2004-2007, Michal Januszewski <spock@gentoo.org>
-#
-# This file is a part of the splashutils package.
-#
-# This file is subject to the terms and conditions of the GNU General Public
-# License v2.  See the file COPYING in the main directory of this archive for
-# more details.
-#
-
-cleanup()
-{
-	rm -rf ${workdir}
-}
-
-usage()
-{
-	cat <<EOTB
-splash_geninitramfs/splashutils-%PKG_VERSION%
-Usage: splash_geninitramfs [options] [--all|theme ...]
-
-Main operation modes:
-  -g, --generate=IMG  generate an initramfs image with all necessary files
-  -a, --append=IMG    append a theme and helper files (if necessary)
-                      to an initramfs image
-  -c, --copy=DIR      copy all necessary files into the specified directory;
-                      DIR should point to the root directory of an initramfs
-  -o, --overlay=DIR   include the contents of DIR in the initramfs image
-  -h, --help          show this help message
-
-Options:
-  -r, --res=RES   copy data for specific resolutions only; RES is a
-                  comma-separated list of the resolutions for which the images
-		  are to be copied
-  -v, --verbose   verbose output
-      --no8bpp    ignore 8bpp images (can save a lot of space)
-EOTB
-
-#   -d              use dynamically linked splash helper
-}
-
-printv()
-{
-	if [ $verbose -gt 0 ]; then
-		echo "$*"
-	fi
-}
-
-put_item()
-{
-	item="$1"
-
-	if [ "${item:0:1}" == "/" ]; then
-		cp -pRH --parents "${item}" "${imgdir}"
-	else
-		cp -pRH --parents "${themedir}/${theme}/${item}" "${imgdir}"
-	fi
-}
-
-themedir="/etc/splash"
-declare -a themes
-mode="h"
-splash_hlp="/sbin/fbcondecor_helper"
-res=""
-overlay=""
-verbose=0
-index=0
-no8bpp=0
-
-args="$@"
-temp=`getopt -l no8bpp,all,generate:,append:,copy:,overlay:,help,verbose,res: a:g:c:r:o:hv "$@"`
-
-if [ $? != 0 ]; then
-	usage; exit 2
-fi
-
-eval set -- "$temp"
-
-for i ; do
-	case "$i" in
-		-a|--append) 	mode='a'; img="$2"; shift; shift;;
-		-g|--generate)	mode='g'; img="$2"; shift; shift;;
-		-c|--copy)		mode='c'; destdir="$2"; shift; shift;;
-		-h|--help)		usage; exit 2;;
-		-r|--res)		res=${2/,/ }; shift; shift;;
-		-v|--verbose)	verbose=$(($verbose + 1)); shift;;
-		-o|--overlay)	overlay="$2"; shift; shift;;
-		--no8bpp)		no8bpp=1; shift;;
-		--)				shift; break;;
-		--all)
-				shift;
-				for i in ${themedir}/* ; do
-					if [ ! -d "$i" ] ; then
-						continue
-					fi
-					themes[$index]="`basename "$i"`"
-					let "index++"
-				done;;
-	esac
-done
-
-if [ "$mode" == "h" ]; then
-	usage ; exit 2
-fi
-
-if [ $index -eq 0 ]; then
-	for i ; do
-		themes[$index]="$i"
-		let "index++"
-	done
-fi
-
-if [ $index -eq 0 ]; then
-	echo "No themes specified." 1>&2 ; exit 5
-fi
-
-if [ "$mode" == "c" ]; then
-	if [ ! -d $destdir ]; then
-		echo "Destination directory does not exist." 1>&2 ; exit 3
-	fi
-	imgdir=$destdir
-else
-	if [ "$mode" == "a" ] && [ ! -e $img ]; then
-		echo "Specified image file does not exist." 1>&2 ; exit 4
-	fi
-
-	workdir=${TMPDIR-/tmp}/splash.$$.$RANDOM
-
-	if (umask 077 && mkdir $workdir); then
-		trap "cleanup" EXIT
-	else
-		echo "Could not create temporary directory! Exiting." 1>&2 ; exit 1
-	fi
-fi
-
-if [ "$mode" != "c" ]; then
-	imgdir="${workdir}/img"
-	mkdir "${imgdir}"
-fi
-
-if [ "$mode" == "a" ]; then
-	printv "o Unpacking $img.."
-	cp "$img" "${imgdir}"
-	(cd "${imgdir}" ; gunzip -c $(basename $img) | cpio -idm --quiet -H newc)
-	rm -f "${imgdir}/$(basename $img)"
-fi
-
-printv "o Creating directory structure.."
-mkdir -p ${imgdir}/{dev,dev/fb,dev/misc,dev/vc,$themedir,lib/splash/proc,root,sbin,lib/splash/sys}
-
-if [ $EUID == 0 ]; then
-	[[ ! -e "${imgdir}/dev/null" ]] 	&& mknod "${imgdir}/dev/null" c 1 3
-	[[ ! -e "${imgdir}/dev/console" ]] 	&& mknod "${imgdir}/dev/console" c 5 1
-fi
-
-if [ ! -e ${splash_hlp} ]; then
-	echo "${splash_hlp} does not exist." 1>&2 ; exit 4
-fi
-
-printv "o Copying ${splash_hlp}.."
-cp "${splash_hlp}" "${imgdir}/sbin"
-ln -sf "${splash_hlp}" "${imgdir}/sbin/splash_helper"
-
-res=${res//,/ }
-
-printv "o Copying themes.."
-for (( i=0 ; i < index ; i++ )) ; do
-	theme=${themes[$i]}
-
-	printv "  - ${theme}"
-
-	# check if the user specified which resolutions are accepted
-	# (default: all res)
-	if [ -z "$res" ]; then
-		res=$(cd ${themedir}/${theme} ; ls *cfg | sed -e 's/.cfg//g')
-	fi
-
-	for j in $res ; do
-		if [ ! -e "${themedir}/${theme}/${j}.cfg" ]; then
-			echo "Warning: config file for theme '${theme}', resolution ${j} does not exist!" 1>&2
-			continue
-		fi
-
-		cp -pRH --parents "${themedir}/${theme}/${j}.cfg" "${imgdir}"
-
-		if [[ ${no8bpp} == 0 ]]; then
-			t="[0-9*]"
-		else
-			t=""
-		fi
-
-		# config file parsing
-		pics=`cat "${themedir}/${theme}/${j}.cfg" | \
-		      sed -r -e "/(^(silent)?jpeg=)|(^(silent)?pic${t}*=)/! d" \
-			     -e 's/[a-z0-9]+=(.*)/\1/'`
-		for pic in $pics ; do
-			put_item "${pic}"
-		done
-
-		icons=`cat "${themedir}/${theme}/${j}.cfg" | \
-		       egrep -v '^#' | grep 'icon ' | awk '{print $2}'`
-		for icon in ${icons} ; do
-			put_item "${icon}"
-		done
-
-		fonts=`cat "${themedir}/${theme}/${j}.cfg" | \
-		       egrep -v '^#' | grep 'text ' | grep -o '[^ ]\+\.ttf'`
-		for font in ${fonts} ; do
-			put_item "${font}"
-		done
-
-		font=`cat "${themedir}/${theme}/${j}.cfg" | egrep -v '^#' | grep 'text_font='`
-		font=${font#*=}
-		if [[ -n "${font}" ]]; then
-			put_item "${font}"
-		else
-			put_item "/etc/splash/luxisri.ttf"
-		fi
-	done
-done
-
-if [ -n "${overlay}" ]; then
-	printv "o Adding files from overlay: $overlay"
-	cp -pRH ${overlay}/* "${imgdir}"
-fi
-
-printv "o Creating initramfs image.."
-if [ "$mode" == "g" ] || [ "$mode" == "a" ]; then
-	(cd "${imgdir}" ; find . | cpio --quiet -o -H newc | gzip -9 >../img.cpio.gz)
-	mv "${workdir}/img.cpio.gz" "${img}"
-fi
-
-exit 0
-
-# vim: set ts=4 sts=4 :
diff -Naur splashutils-1.5.2.1-old/scripts/splash_geninitramfs.in splashutils-1.5.2.1-new/scripts/splash_geninitramfs.in
--- splashutils-1.5.2.1-old/scripts/splash_geninitramfs.in	1969-12-31 16:00:00.000000000 -0800
+++ splashutils-1.5.2.1-new/scripts/splash_geninitramfs.in	2007-09-23 10:57:15.000000000 -0700
@@ -0,0 +1,238 @@
+#!/bin/bash
+#
+# splash_geninitramfs -- an utility to create initramfs images for use with fbsplash
+#
+# Copyright (C) 2004-2007, Michal Januszewski <spock@gentoo.org>
+#
+# This file is a part of the splashutils package.
+#
+# This file is subject to the terms and conditions of the GNU General Public
+# License v2.  See the file COPYING in the main directory of this archive for
+# more details.
+#
+
+cleanup()
+{
+	rm -rf ${workdir}
+}
+
+usage()
+{
+	cat <<EOTB
+splash_geninitramfs/splashutils-%PKG_VERSION%
+Usage: splash_geninitramfs [options] [--all|theme ...]
+
+Main operation modes:
+  -g, --generate=IMG  generate an initramfs image with all necessary files
+  -a, --append=IMG    append a theme and helper files (if necessary)
+                      to an initramfs image
+  -c, --copy=DIR      copy all necessary files into the specified directory;
+                      DIR should point to the root directory of an initramfs
+  -o, --overlay=DIR   include the contents of DIR in the initramfs image
+  -h, --help          show this help message
+
+Options:
+  -r, --res=RES   copy data for specific resolutions only; RES is a
+                  comma-separated list of the resolutions for which the images
+		  are to be copied
+  -v, --verbose   verbose output
+      --no8bpp    ignore 8bpp images (can save a lot of space)
+EOTB
+
+#   -d              use dynamically linked splash helper
+}
+
+printv()
+{
+	if [ $verbose -gt 0 ]; then
+		echo "$*"
+	fi
+}
+
+put_item()
+{
+	item="$1"
+
+	if [ "${item:0:1}" == "/" ]; then
+		cp -pRH --parents "${item}" "${imgdir}"
+	else
+		cp -pRH --parents "${themedir}/${theme}/${item}" "${imgdir}"
+	fi
+}
+
+themedir="/etc/splash"
+declare -a themes
+mode="h"
+splash_hlp="/sbin/fbcondecor_helper"
+res=""
+overlay=""
+verbose=0
+index=0
+no8bpp=0
+
+args="$@"
+temp=`getopt -l no8bpp,all,generate:,append:,copy:,overlay:,help,verbose,res: a:g:c:r:o:hv "$@"`
+
+if [ $? != 0 ]; then
+	usage; exit 2
+fi
+
+eval set -- "$temp"
+
+for i ; do
+	case "$i" in
+		-a|--append) 	mode='a'; img="$2"; shift; shift;;
+		-g|--generate)	mode='g'; img="$2"; shift; shift;;
+		-c|--copy)		mode='c'; destdir="$2"; shift; shift;;
+		-h|--help)		usage; exit 2;;
+		-r|--res)		res=${2/,/ }; shift; shift;;
+		-v|--verbose)	verbose=$(($verbose + 1)); shift;;
+		-o|--overlay)	overlay="$2"; shift; shift;;
+		--no8bpp)		no8bpp=1; shift;;
+		--)				shift; break;;
+		--all)
+				shift;
+				for i in ${themedir}/* ; do
+					if [ ! -d "$i" ] ; then
+						continue
+					fi
+					themes[$index]="`basename "$i"`"
+					let "index++"
+				done;;
+	esac
+done
+
+if [ "$mode" == "h" ]; then
+	usage ; exit 2
+fi
+
+if [ $index -eq 0 ]; then
+	for i ; do
+		themes[$index]="$i"
+		let "index++"
+	done
+fi
+
+if [ $index -eq 0 ]; then
+	echo "No themes specified." 1>&2 ; exit 5
+fi
+
+if [ "$mode" == "c" ]; then
+	if [ ! -d $destdir ]; then
+		echo "Destination directory does not exist." 1>&2 ; exit 3
+	fi
+	imgdir=$destdir
+else
+	if [ "$mode" == "a" ] && [ ! -e $img ]; then
+		echo "Specified image file does not exist." 1>&2 ; exit 4
+	fi
+
+	workdir=${TMPDIR-/tmp}/splash.$$.$RANDOM
+
+	if (umask 077 && mkdir $workdir); then
+		trap "cleanup" EXIT
+	else
+		echo "Could not create temporary directory! Exiting." 1>&2 ; exit 1
+	fi
+fi
+
+if [ "$mode" != "c" ]; then
+	imgdir="${workdir}/img"
+	mkdir "${imgdir}"
+fi
+
+if [ "$mode" == "a" ]; then
+	printv "o Unpacking $img.."
+	cp "$img" "${imgdir}"
+	(cd "${imgdir}" ; gunzip -c $(basename $img) | cpio -idm --quiet -H newc)
+	rm -f "${imgdir}/$(basename $img)"
+fi
+
+printv "o Creating directory structure.."
+mkdir -p ${imgdir}/{dev,dev/fb,dev/misc,dev/vc,$themedir,lib/splash/proc,root,sbin,lib/splash/sys}
+
+if [ $EUID == 0 ]; then
+	[[ ! -e "${imgdir}/dev/null" ]] 	&& mknod "${imgdir}/dev/null" c 1 3
+	[[ ! -e "${imgdir}/dev/console" ]] 	&& mknod "${imgdir}/dev/console" c 5 1
+fi
+
+if [ ! -e ${splash_hlp} ]; then
+	echo "${splash_hlp} does not exist." 1>&2 ; exit 4
+fi
+
+printv "o Copying ${splash_hlp}.."
+cp "${splash_hlp}" "${imgdir}/sbin"
+ln -sf "${splash_hlp}" "${imgdir}/sbin/splash_helper"
+
+res=${res//,/ }
+
+printv "o Copying themes.."
+for (( i=0 ; i < index ; i++ )) ; do
+	theme=${themes[$i]}
+
+	printv "  - ${theme}"
+
+	# check if the user specified which resolutions are accepted
+	# (default: all res)
+	if [ -z "$res" ]; then
+		res=$(cd ${themedir}/${theme} ; ls *cfg | sed -e 's/.cfg//g')
+	fi
+
+	for j in $res ; do
+		if [ ! -e "${themedir}/${theme}/${j}.cfg" ]; then
+			echo "Warning: config file for theme '${theme}', resolution ${j} does not exist!" 1>&2
+			continue
+		fi
+
+		cp -pRH --parents "${themedir}/${theme}/${j}.cfg" "${imgdir}"
+
+		if [[ ${no8bpp} == 0 ]]; then
+			t="[0-9*]"
+		else
+			t=""
+		fi
+
+		# config file parsing
+		pics=`cat "${themedir}/${theme}/${j}.cfg" | \
+		      sed -r -e "/(^(silent)?jpeg=)|(^(silent)?pic${t}*=)/! d" \
+			     -e 's/[a-z0-9]+=(.*)/\1/'`
+		for pic in $pics ; do
+			put_item "${pic}"
+		done
+
+		icons=`cat "${themedir}/${theme}/${j}.cfg" | \
+		       egrep -v '^#' | grep 'icon ' | awk '{print $2}'`
+		for icon in ${icons} ; do
+			put_item "${icon}"
+		done
+
+		fonts=`cat "${themedir}/${theme}/${j}.cfg" | \
+		       egrep -v '^#' | grep 'text ' | grep -o '[^ ]\+\.ttf'`
+		for font in ${fonts} ; do
+			put_item "${font}"
+		done
+
+		font=`cat "${themedir}/${theme}/${j}.cfg" | egrep -v '^#' | grep 'text_font='`
+		font=${font#*=}
+		if [[ -n "${font}" ]]; then
+			put_item "${font}"
+		else
+			put_item "/etc/splash/luxisri.ttf"
+		fi
+	done
+done
+
+if [ -n "${overlay}" ]; then
+	printv "o Adding files from overlay: $overlay"
+	cp -pRH ${overlay}/* "${imgdir}"
+fi
+
+printv "o Creating initramfs image.."
+if [ "$mode" == "g" ] || [ "$mode" == "a" ]; then
+	(cd "${imgdir}" ; find . | cpio --quiet -o -H newc | gzip -9 >../img.cpio.gz)
+	mv "${workdir}/img.cpio.gz" "${img}"
+fi
+
+exit 0
+
+# vim: set ts=4 sts=4 :
diff -Naur splashutils-1.5.2.1-old/scripts/splash_manager splashutils-1.5.2.1-new/scripts/splash_manager
--- splashutils-1.5.2.1-old/scripts/splash_manager	2007-09-23 10:55:59.000000000 -0700
+++ splashutils-1.5.2.1-new/scripts/splash_manager	1969-12-31 16:00:00.000000000 -0800
@@ -1,1008 +0,0 @@
-#!/bin/bash
-#
-# splash_manager -- a convenience utility to perform various splash-related
-#                   tasks in an easy and user-friendly way
-#
-# Copyright (C) 2005-2007, Michal Januszewski <spock@gentoo.org>
-#
-# This file is a part of the splashutils package.
-#
-# This file is subject to the terms and conditions of the GNU General Public
-# License v2.  See the file COPYING in the main directory of this archive for
-# more details.
-#
-
-# TODO:
-# - support for icons and scripts in themes
-# - support for '-v'
-# - support for 8bpp modes
-
-# BUGS:
-# - replay won't work correctly when started from a tty with a video mode
-#   different from the one used for the silent tty
-
-# System configuration variables
-spl_util=splash_util.static
-spl_daemon=fbsplashd.static
-spl_decor=fbcondecor_ctl
-spl_dir=/lib/splash
-spl_fifo=${spl_dir}/cache/.splash
-spl_pidfile=${spl_dir}/cache/daemon.pid
-themedir=/etc/splash
-
-spl_daemon_exename="$(basename ${spl_daemon})"
-spl_daemon_short="${spl_daemon:0:9}"
-
-cleanup() {
-	killall ${spl_daemon_exename} 2>/dev/null
-	chvt ${ctty}
-}
-
-usage() {
-	cat <<EOTB
-splash_geninitramfs/splashutils-%PKG_VERSION%
-Usage: splash_manager [options] -c <command>
-
-Commands:
- benchmark
- demo    test a splash theme
- list    list available splash themes
- set     set a splash theme on a specific tty
- shot    take a screenshot of a selected splash theme
- switch  switch a splash theme by changing GRUB/LILO config files
- replay  replay a complete boot sequence using splash profile data
-
-Options:
- -c, --cmd=CMD      execute CMD
- -h, --help         display this message
- -t, --theme=THEME  [bdehsr] theme name
-     --steps=N      [ d    ] use N steps when testing the silent splash
-     --delay=N      [ d    ] delay each step by N seconds
- -m, --mode=(v|s)   [ d h  ] specify which mode to use (verbose/silent)
-     --tty=N        [bdeh  ] set the theme on the Nth tty
- -e, --exec=CMD     [   h  ] run CMD on the tty where splash is being tested
-     --progress=N   [   h  ] set progress to N (0-65535)
-     --msg=MSG      [bd h  ] set the main system message to MSG
-     --profile=FILE [     r] read splash profile data from FILE
-
-The letters in the square brackets indicate the commands with which
-specific options can be used: b (bechmark) d (demo), e (set), h (shot),
-s (switch), r (replay).
-
-Examples:
- splash_manager -c switch -t livecd-2005.0
-   (switch to the 'livecd-2005.0' theme; the new theme will be used
-    after reboot)
-
- splash_manager -c set -t linux --tty=8
-   (set the 'linux' theme on the 8th tty)
-
- splash_manager -c demo -t livecd-2005.0 -m s --steps=100
-   (run a demonstration of the 'livecd-2005.0' theme, silent mode;
-    use 100 steps for the progress bar)
-
- splash_manager -c shot -t foobar -m s --progress=32767 --msg='Smile!'
-   (take a screenshot of the 'foobar' theme, silent mode; set progress
-    to 50% and use 'Smile!' as the main system message)
-EOTB
-}
-
-CGOOD=$'\e[32;01m'
-CWARN=$'\e[33;01m'
-CBAD=$'\e[31;01m'
-CNORM=$'\e[0m'
-CHILITE=$'\e[36;01m'
-CBRACKET=$'\e[34;01m'
-
-# void err(char *msg)
-#   Displays an error message.
-err() {
-	echo -e "${CBAD}Error:${CNORM} $*" >&2
-}
-
-# void einfo(char *msg)
-#   Displays an informational message.
-einfo() {
-	echo -e "${CGOOD}*${CNORM} $*"
-}
-
-# void ewarn(char *msg0
-#   Display a warning message.
-ewarn() {
-	echo -e "${CWARN}*${CNORM} $*"
-}
-
-# void spl_comm(char *msg)
-#   Sends 'msg' to the splash fifo.
-spl_comm() {
-	if [ ! -e ${spl_pidfile} ]; then
-		return 1
-	fi
-
-	if [ "$(pgrep ${spl_daemon_short})" == "$(<${spl_pidfile})" ]; then
-		echo "$*" > ${spl_fifo} &
-	else
-		err "Splash daemon not running!"
-		rm -f "${spl_pidfile}"
-	fi
-}
-
-# void chvt(int n)
-#   Switches to the n-th tty.
-chvt() {
-	local ntty=$1
-
-	if [ -x /usr/bin/chvt ] ; then
-		/usr/bin/chvt ${ntty}
-	else
-		echo -en "\e[12;${ntty}]"
-	fi
-}
-
-
-# void theme_sanity_check(char *theme)
-#   Performs a theme sanity check -- checks whether a theme exists.
-theme_sanity_check() {
-	local theme=$1
-	local t=${res}
-
-	# For verbose mode, we care about the real resolution, not the one
-	# fbsplash would be using for the silent mode.
-	if [ "${mode}" == "v" ]; then
-		t=${rres}
-	fi
-
-	if [ -z "${theme}" ]; then
-		err "You have to specify a theme name."
-		exit 1
-	fi
-
-	if [ ! -e "${themedir}/${theme}/${t}.cfg" ]; then
-		err "Theme '${theme}' doesn't seem to provide a config file for the current resolution (${t})."
-		exit 1
-	fi
-}
-
-# void set_theme(char *theme, int tty)
-#   Sets a theme on a specific tty.
-set_theme() {
-	local theme=$1
-	local tty=$2
-
-	theme_sanity_check "${theme}"
-	[ -z "${tty}" ] && tty="${ctty}"
-	${spl_decor} -c setcfg -t "${theme}" --tty="${tty}"
-	[ "${tty}" == "${ctty}" ] && ${spl_decor} -c setpic -t "${theme}" --tty="${tty}"
-	${spl_decor} -c on --tty=${tty}
-}
-
-# void get_theme(int tty)
-#   Prints the name of the theme that is used on a tty.
-get_theme() {
-	local ctty=$1
-	echo $(${spl_decor} --tty=${ctty} -c getcfg | grep theme | awk '{ print $2 }')
-}
-
-# void get_state(int tty)
-#   Prints 'on' or 'off', indicating fbsplash state on a tty.
-get_state() {
-	local ctty=$1
-	echo $(${spl_decor} --tty=${ctty} -c getstate | cut -f2 -d: | tr -d ' ')
-}
-
-# void check_silent(char *theme, char *res, char *action)
-#   Checks whether a theme supports the silent splash mode.
-check_silent() {
-	local ctheme=$1
-	local cres=$2
-	local action=$3
-
-	if [ -z $(cat "${themedir}/${ctheme}/${cres}.cfg" 2>/dev/null | egrep "^silent(pic|jpeg)=") ]; then
-		[ "${action}" == "test" ] && return 1
-		err "Theme '${ctheme}' doesn't support the silent splash mode."
-		exit 1
-	fi
-}
-
-# void check_verbose(char *theme, char *res, char *action)
-#   Checks whether a theme supports the verbose splash mode.
-check_verbose() {
-	local ctheme=$1
-	local cres=$2
-	local action=$3
-
-	if [ -z $(cat "${themedir}/${ctheme}/${cres}.cfg" 2>/dev/null | egrep "^(pic|jpeg)=") ]; then
-		[ "${action}" == "test" ] && return 1
-		err "Theme '${ctheme}' doesn't support the silent splash mode."
-		exit 1
-	fi
-
-	return 0
-}
-
-set_silent() {
-	trap "cleanup" EXIT
-
-	# Make sure the splash daemon is not running
-	killall -9 ${spl_daemon_exename} 2>/dev/null
-	${spl_daemon} -t "${theme}" --pidfile ${spl_pidfile} ${util_params}
-	pid=$(cat ${spl_pidfile})
-
-	[ -z "${msg}" ] && msg="Testing the '${theme}' theme (\$progress%)..."
-	spl_comm "set message ${msg}"
-	[ -n "${tty}" ] && spl_comm "set tty silent ${tty}"
-	spl_comm "set mode silent"
-	spl_comm "repaint"
-}
-
-exit_silent() {
-	spl_comm "exit"
-
-	while [[ "$(head -n 1 /proc/${pid}/status 2>/dev/null | cut -f2)" == "${spl_daemon_short}" ]]; do
-		sleep 0.5
-	done
-
-	while [ "`fgconsole`" != ${ctty} ] ; do
-		chvt ${ctty}
-	done
-}
-
-benchmark() {
-	check_silent "${theme}" "${res}"
-	set_silent
-
-	step=16
-	timestart=$(date +"%s.%N")
-	for ((i=0;i<65536;i=$i+$step)) ; do
-		echo "progress $i" > ${spl_fifo}
-		echo "paint" > ${spl_fifo}
-	done
-	timeend=$(date +"%s.%N")
-	exit_silent
-	
-	echo "Test took $(echo "$timeend - $timestart" | bc) seconds."
-}
-
-demo_theme_silent() {
-	check_silent "${theme}" "${res}"
-	if [ -z "$(echo ${util_params} | grep -- '--type=')" ]; then
-		export util_params="${util_params} --type=bootup"
-	fi
-	set_silent
-
-	# Set the input device if it exists. This will make it possible to use F2 to
-	# switch from verbose to silent.
-	local t=$(grep -Hsi keyboard /sys/class/input/input*/name | sed -e 's#.*input\([0-9]*\)/name.*#event\1#')
-	if [[ -z "${t}" ]]; then
-		t=$(grep -Hsi keyboard /sys/class/input/event*/device/driver/description | grep -o 'event[0-9]\+')
-		if [[ -z "${t}" ]]; then
-			# Try an alternative method of finding the event device. The idea comes
-			# from Bombadil <bombadil(at)h3c.de>. We're couting on the keyboard controller
-			# being the first device handled by kbd listed in input/devices.
-			t=$(/bin/grep -s -m 1 '^H: Handlers=kbd' /proc/bus/input/devices | grep -o 'event[0-9]*')
-		fi
-	fi
-
-	if [[ -n "${t}" ]]; then
-		spl_comm "set event dev /dev/input/${t}"
-	fi
-
-	if [[ -n "$(pgrep gpm)" ]]; then
-		spl_comm "set gpm"
-	fi
-
-	[ -z "${delay}" ] && delay=0.05
-	step=$((65535/$steps))
-
-	for ((i=0;i<65536;i=$i+$step)) ; do
-		spl_comm "progress $i"
-		spl_comm "paint"
-		sleep ${delay}
-	done
-	spl_comm "progress 65535"
-	spl_comm "paint"
-	exit_silent
-}
-
-replay() {
-	check_silent "${theme}" "${res}"
-
-	if [[ -z "${profile}" ]]; then
-		err "You have to specify a splash profile file."
-		exit 1
-	fi
-
-	if [[ ! -r "${profile}" ]]; then
-		err "Profile file '${profile}' not found."
-		exit 1
-	fi
-
-	trap "cleanup" EXIT
-
-	ctime=0
-
-	if [[ -e /etc/gentoo-release ]]; then
-		export RUNLEVEL="S"
-		export SOFTLEVEL=""
-	fi
-
-	source /sbin/splash-functions.sh
-	splash_setup
-
-	export SPLASH_XRES="$xres"
-	export SPLASH_YRES="$yres"
-	export SPLASH_THEME=${theme}
-
-	while read line ; do
-		arr=($line)
-		t=${arr[0]:0:$((${#arr[0]}-1))}
-		tdec=${t##*.}
-		utime=$((${t%.*}*1000 + ${tdec#0*}*10))
-
-		[[ "$ctime" == "0" ]] && ctime=${utime}
-
-		delay=$((${utime} - ${ctime}))
-		${usleep} "${delay}000"
-		ctime=${utime}
-
-		# Start the splash daemon after rc_init/pre.
-		if [[ -z "${pid}" ]]; then
-			if [[ "${arr[1]}" != "pre" || "${arr[2]}" != "rc_init" ]]; then
-				BOOT_MSG="$(splash_get_boot_message)" ${spl_daemon} -t ${theme} --pidfile ${spl_pidfile} --type=bootup
-				pid=$(cat ${spl_pidfile})
-			fi
-		fi
-
-		case ${arr[1]} in
-			pre)
-				if [[ -x ${themedir}/${theme}/scripts/${arr[2]}-pre ]]; then
-					${themedir}/${theme}/scripts/${arr[2]}-pre ${arr[*]:3}
-				fi
-				;;
-
-			post)
-				if [[ -x ${themedir}/${theme}/scripts/${arr[2]}-post ]]; then
-					${themedir}/${theme}/scripts/${arr[2]}-post ${arr[*]:3}
-				fi
-
-				if [[ -e /etc/gentoo-release && ${arr[3]} == 'boot' ]]; then
-					export RUNLEVEL="3"
-				fi
-				;;
-
-			comm)
-				spl_comm "${arr[*]:2}"
-				;;
-		esac
-	done < ${profile}
-}
-
-set_verbose() {
-	[ -z "${tty}" ]		&& tty=${ctty}
-
-	export cstate=$(get_state ${tty})
-	[ "${cstate}" == "on" ] && export ctheme=$(get_theme ${tty})
-
-	set_theme "${theme}" "${tty}"
-	chvt "${tty}"
-}
-
-exit_verbose() {
-	chvt "${ctty}"
-	if [ "${cstate}" == "on" ]; then
-		set_theme "${ctheme}" "${tty}"
-	else
-		${spl_decor} --tty=${tty} -c off
-	fi
-}
-
-demo_theme_verbose() {
-	[ -z "${delay}" ]	&& delay=5
-
-	check_verbose "${theme}" "${res}"
-	set_verbose
-
-	einfo "Testing the '${theme}' theme..." >/dev/tty${tty}
-	for (( i = 0 ; i < ${delay} ; i = i+1 )) ; do
-		echo -n "$i " >/dev/tty${tty}
-		sleep 1
-	done
-	echo ""
-
-	exit_verbose
-}
-
-take_shot_silent() {
-	check_silent "${theme}" "${res}"
-	set_silent
-
-	[ -z "${progress}" ] && progress=16384
-	spl_comm "progress ${progress}"
-	spl_comm "repaint"
-
-	sleep 1
-	fbgrab ${theme}-${res}-silent.png
-
-	exit_silent
-}
-
-take_shot_verbose() {
-	check_verbose "${theme}" "${res}"
-	set_verbose
-
-	if [ -n "${cexec}" ]; then
-		ps -A -o pid,comm,tty > /tmp/spl-shot-$$.pre
-		openvt -f -c ${tty} -- ${cexec}
-		sleep 2
-		ps -A -o pid,comm,tty > /tmp/spl-shot-$$.post
-		local ce=$(basename "${cexec}")
-		pid=$(diff /tmp/spl-shot-$$.pre /tmp/spl-shot-$$.post | grep "${ce:0:15}" | grep "tty${tty}" | grep '^>' | awk '{ print $2 }')
-		rm -f /tmp/spl-shot-$$.pre /tmp/spl-shot-$$.post
-	fi
-
-	fbgrab ${theme}-${res}-verbose.png
-
-	if [[ -n "${ce}" && -n "${pid}" &&
-	  	  "$(cat /proc/${pid}/status 2>/dev/null | grep 'Name:' | cut -f2)" == "${ce:0:15}" ]]; then
-		kill "${pid}"
-	fi
-	exit_verbose
-}
-
-list_themes() {
-	for i in "${themedir}"/* ; do
-		[ ! -d "${i}" ] && continue
-		[ -z "$(ls "${i}"/*.cfg 2>/dev/null)" ] && continue
-
-		tn="${i/$themedir/}"
-		tn="${tn//\//}"
-
-		echo -n "$tn:"
-		local first=true
-
-		for res in "${i}"/*.cfg ; do
-			res=${res##*/}
-			res=${res/.cfg/}
-
-			[ "$first" != "true" ] && echo -n ","
-			first=false
-			echo -n " ${res}"
-
-			local sil ver
-
-			if check_silent "$tn" "$res" "test"; then
-				sil=true
-			else
-				sil=false
-			fi
-
-			if check_verbose "$tn" "$res" "test"; then
-				ver=true
-			else
-				ver=false
-			fi
-
-			if [[ "$ver" == "true" && "$sil" == "true" ]]; then
-				echo -n " (sv)"
-			elif [[ "$sil" == "true" ]]; then
-				echo -n " (s)"
-			else
-				echo -n " (v)"
-			fi
-		done
-		echo ""
-	done
-}
-
-bootloader=""
-
-detect_bootloader() {
-	if [[ -e /boot/grub/grub.conf && -e /etc/lilo.conf ]]; then
-		ewarn "Both GRUB and LILO seem to be installed and configured. Please"
-		ewarn "select which one should be configured by this script:"
-		ewarn "  1) GRUB"
-		ewarn "  2) LILO"
-		while true; do
-			echo -n "Your choice [1]: "
-			read choice
-			if [ -z "${choice}" ]; then
-				bootloader="grub"
-				return
-			elif [ "${choice}" == 1 ]; then
-				bootloader="grub"
-				return
-			elif [ "${choice}" == 2 ]; then
-				bootloader="lilo"
-				return
-			else
-				err "You have chosen an invalid number."
-			fi
-		done
-	elif [[ -e /boot/grub/grub.conf ]]; then
-		bootloader="grub"
-	elif [[ -e /etc/lilo.conf ]]; then
-		bootloader="lilo"
-	else
-		err "It appears that none of the supported bootloaders (GRUB, LILO) is installed"
-		err "on your system. Please install one of these or configure fbsplash/splashutils"
-		err "manually."
-		exit 1
-	fi
-}
-
-# The code of mount_boot_partition() is stolen from Gentoo's mount-boot.eclass.
-mount_boot_partition() {
-	# note that /dev/BOOT is in the Gentoo default /etc/fstab file
-	local fstabstate="$(cat /etc/fstab | awk '!/^#|^[[:blank:]]+#|^\/dev\/BOOT/ {print $2}' | egrep "^/boot$" )"
-	local procstate="$(cat /proc/mounts | awk '{print $2}' | egrep "^/boot$" )"
-	local proc_ro="$(cat /proc/mounts | awk '{ print $2, $4 }' | sed -n '/\/boot/{ /[ ,]\?ro[ ,]\?/p }' )"
-
-	if [ -n "${fstabstate}" ] && [ -n "${procstate}" ]; then
-		if [ -n "${proc_ro}" ]; then
-			einfo "Your boot partition, detected as being mounted as /boot, is read-only."
-			einfo "Remounting it in read-write mode ..."
-			mount -o remount,rw /boot &>/dev/null
-			if [ "$?" -ne 0 ]; then
-				err "Unable to remount in rw mode. Please do it manually!"
-				exit 1
-			fi
-		else
-			einfo "Your boot partition was detected as being mounted as /boot."
-		fi
-	elif [ -n "${fstabstate}" ] && [ -z "${procstate}" ]; then
-		mount /boot -o rw &>/dev/null
-		if [ "$?" -eq 0 ]; then
-			einfo "Your boot partition was not mounted as /boot, but this"
-			einfo "script was able to mount it without additional intervention."
-		else
-			err "Cannot automatically mount your /boot partition."
-			err "Your boot partition has to be mounted rw before the splash configuration"
-			err "can be continued."
-			exit 1
-		fi
-	else
-		einfo "Assuming you do not have a separate /boot partition."
-	fi
-}
-
-# int input_number(int min, int max, int default)
-#   Asks the user to enter a number in the range [min;max].
-input_number() {
-	local min=$1
-	local max=$2
-	local default=$3
-	local done=false
-
-	echo -n "Your choice: "
-
-	while [[ ${done} != "true" ]]; do
-		read n
-		n=${n%% *}
-
-		if [[ -z "${n}" || "${n}" -lt ${min} || "${n}" -gt ${max} ]]; then
-			err "Invalid number. Try again. Enter a number in the range: ${min}-${max}}."
-			echo -n "Your choice: "
-		else
-			done="true"
-		fi
-	done
-
-	return ${n}
-}
-
-# bool input_bool(bool default)
-#   Asks the user to enter 'y' or 'n'.
-input_bool() {
-	local default=$1
-	local choice
-
-	echo -n "Your choice "
-
-	if [[ "${default}" == "y" ]]; then
-		echo -n "[Y/n]: "
-	else
-		echo -n "[y/N]: "
-	fi
-
-	read choice
-
-	if [[ "${default}" == "y" ]]; then
-		if [[ "${choice}" != "n" && "${choice}" != "N" ]]; then
-			return 0
-		else
-			return 1
-		fi
-	else
-		if [[ "${choice}" != "y" && "${choice}" != "Y" ]]; then
-			return 1
-		else
-			return 0
-		fi
-	fi
-}
-
-# void theme_switch_initrd(char *initrd)
-#   Asks the user whether (s)he wants to generate and use a new initrd.
-theme_switch_initrd() {
-	local initrd=$1
-	newinitrd=""
-	want_initrd=false
-
-	if [ -z "${initrd}" ]; then
-		einfo "It appears that you are not using an initrd. Do you want this script"
-		einfo "to automatically generate one for use with the '${theme}' theme?"
-		if input_bool 'y'; then
-			want_initrd=true
-		fi
-	elif [ "${initrd:0:13}" == "/boot/splash/" ]; then
-		want_initrd=true
-	else
-		echo ""
-		einfo "It appears that you are already using an initrd:"
-		einfo "  '${initrd}'"
-		einfo "Do you want this script to automatically generate another initrd for"
-		einfo "use with the '${theme}' theme?"
-		einfo "The new initrd will be used instead of the current one."
-		if input_bool 'n'; then
-			want_initrd=true
-		fi
-	fi
-
-	if [ ${want_initrd} == "true" ]; then
-		[ ! -d /boot/splash ] && mkdir /boot/splash
-		newinitrd="/boot/splash/initrd-spl-${theme}-all"
-		splash_geninitramfs -g "${newinitrd}" -v "${theme}"
-	fi
-}
-
-theme_switch_lilo() {
-	local cnt=0
-	local entries
-	local lines
-	local want_name=false
-	local linecnt=1
-
-	# Display a list of entries from lilo.conf and ask the user to select one of them.
-	einfo "Please select which kernel should be configured for use with splashutils:"
-	while read i ; do
-		line=$(echo ${i})
-		if [[ ${i:0:5} == "image" ]]; then
-			want_name=true
-			lines[$cnt]="$linecnt"
-		fi
-
-		if [[ ${want_name} == "true" && ${i:0:5} == "label" ]]; then
-			i=$(echo ${i} | cut -d= -f2)
-			i=$(echo ${i})
-			entries[$cnt]="$i"
-			cnt=$(($cnt+1))
-			printf "%3d) %s\n" "$cnt" "$i"
-			want_name=false
-		fi
-		linecnt=$(($linecnt+1))
-	done < /etc/lilo.conf
-
-	input_number 1 ${cnt} 1
-	n=$(($?-1))
-	einfo "Configuring '${entries[$n]}'.."
-
-	line=${lines[$n]}
-	cp /etc/lilo.conf /etc/lilo.conf.work.$$
-
-	initrd="$(awk "FNR == $line {
-				print ;
-				while(getline > 0 && \$1 != \"image\") {
-						print \$0
-				}
-			}" /etc/lilo.conf.work.$$ | grep "^[[:space:]]*initrd")"
-	initrd=$(echo "$initrd" | cut -f2 -d'=')
-
-	theme_switch_initrd "${initrd}"
-	cp /etc/lilo.conf /etc/lilo.conf.backup
-
-	awk "FNR == $(($line+1)) {
-		initrd=0
-		if (\"${newinitrd}\" != \"\") {
-			initrd=1
-		}
-
-		do {
-			if (\$1 ~ /^append/) {
-				break;
-			} else if (\$1 ~ /^image/ || \$1 ~ /^other/) {
-				print \"\\tappend = \\\"splash=silent,fadein,theme:${theme} console=tty1\\\"\"
-				if (initrd == 1) {
-					print \"\\\tinitrd = ${newinitrd}\"
-				}
-				print \$0
-				next
-			} else {
-				if (initrd == 1 && \$1 ~ /^initrd/) {
-					sub(/initrd.*/, \"initrd = ${newinitrd}\", \$0)
-					initrd=0
-				}
-				print \$0
-			}
-		} while (getline > 0)
-
-		splash=0
-		cons=0
-		quiet=0
-		full=\$0
-		\$0=gensub(/.*\"([^\"]+)\"/,\"\\\\1\",\"g\",\$0)
-		sub(/\".*/,\"\",\$0)
-		for(i=1; i<=NF+1; i++) {
-			if (substr(\$i,0,6) == \"splash\") {
-				splash=1
-			} else if (\$i == \"console=tty1\") {
-				cons=1
-			}
-		}
-		if (splash == 1) {
-			sub(/splash=[^ ]+/, \"splash=silent,fadein,theme:${theme}\", \$0)
-		} else {
-			\$0=\$0 \" splash=silent,fadein,theme:${theme}\"
-		}
-		if (cons == 0) {  \$0 = \$0 \" console=tty1\"	}
-
-		sub(/\".*\"/, \"\\\"\" \$0 \"\\\"\", full)
-		print full
-
-		if (initrd) {
-			getline
-			while (!(\$1 ~ /^image/) && !(\$1 ~ /^other/)) {
-				if (\$1 ~ /^initrd/) {
-					sub(/initrd.*/, \"initrd = ${newinitrd}\", \$0)
-					initrd=0
-				}
-				print \$0
-				getline
-			}
-			if (initrd) {
-				print \"\\tinitrd = ${newinitrd}\"
-			}
-			print \$0
-		}
-		next
-	}
-
-	FNR != $(($line+1)) { print \$0 }" /etc/lilo.conf.work.$$ > /etc/lilo.conf.tmp.$$
-
-	rm /etc/lilo.conf.work.$$
-	mv /etc/lilo.conf.tmp.$$ /etc/lilo.conf
-
-	einfo "LILO config file has been updated."
-}
-
-theme_switch_grub() {
-	local cnt="0"
-	local entries
-	local lines
-	local done=false
-
-	# Display a list of entries from grub.conf and ask the user to select one of them.
-	einfo "Please select which kernel should be configured for use with splashutils:"
-	grep -n '^[[:space:]]*title' /boot/grub/grub.conf > /tmp/splash_mngr.$$
-	while read i ; do
-		line=$(echo "${i}" | cut -d: -f1)
-		i=$(echo "${i}" | cut -d: -f2)
-		i=${i:6}
-		entries[$cnt]="$i"
-		lines[$cnt]="$line"
-		cnt=$(($cnt+1))
-		printf "%3d) %s\n" "$cnt" "$i"
-	done < /tmp/splash_mngr.$$
-	rm /tmp/splash_mngr.$$
-
-	input_number 1 ${cnt} 1
-	n=$(($?-1))
-	einfo "Configuring '${entries[$n]}'.."
-
-	line=${lines[$n]}
-	t="$(sed -e "${line}p" -e 'd' /boot/grub/grub.conf)"
-
-	if [[ "$(echo ${t})" != "title ${entries[$n]}" ]]; then
-		err "The GRUB config file appears to have been modified while this script was"
-		err "working. Please run it again after making sure no one is modifying"
-		err "/boot/grub/grub.conf."
-		exit 1
-	fi
-
-	cp /boot/grub/grub.conf /boot/grub/grub.conf.work.$$
-
-	initrd="$(awk "FNR == $line {
-				print ;
-				while(getline > 0 && \$1 != \"title\") {
-						print \$0
-				}
-			}" /boot/grub/grub.conf.work.$$ | grep "^[[:space:]]*initrd")"
-	initrd=$(echo "$initrd" | cut -f2 -d' ')
-
-	theme_switch_initrd "${initrd}"
-	cp /boot/grub/grub.conf /boot/grub/grub.conf.backup
-
-	awk "FNR == $line {
-		initrd=0
-		if (\"${newinitrd}\" != \"\") {
-			initrd=1
-		}
-
-		while(\$1 != \"kernel\") {
-			if (initrd == 1 && \$1 == \"initrd\") {
-				sub(/initrd .*/, \"initrd ${newinitrd}\", \$0)
-				initrd=0
-			}
-			print \$0
-			if (getline <= 0) {
-				exit 0
-			}
-		}
-		splash=0
-		cons=0
-		quiet=0
-		for(i=1; i<=NF+1; i++) {
-			if (substr(\$i,0,6) == \"splash\") {
-				splash=1
-			} else if (\$i == \"console=tty1\") {
-				cons=1
-			}
-		}
-		if (splash == 1) {
-			sub(/splash=[^ ]+/, \"splash=silent,fadein,theme:${theme}\", \$0)
-			printf \"%s\",\$0
-		} else {
-			printf \"%s splash=silent,fadein,theme:${theme}\", \$0
-		}
-		if (cons == 0) {  printf \" %s\", \"console=tty1\"	}
-		printf \"\n\"
-
-		if (initrd) {
-			getline
-			while (\$1 != \"title\") {
-				if (\$1 == \"initrd\") {
-					sub(/initrd .*/, \"initrd ${newinitrd}\", \$0)
-					initrd=0
-				}
-				print \$0
-				if (getline <= 0) {
-					break
-				}
-			}
-			if (initrd) {
-				print \"\\tinitrd ${newinitrd}\"
-			}
-			print \$0
-		}
-		next
-	}
-
-	FNR != $line { print \$0 }" /boot/grub/grub.conf.work.$$
-	#> /boot/grub/grub.conf.tmp.$$
-
-	rm /boot/grub/grub.conf.work.$$
-#	mv /boot/grub/grub.conf.tmp.$$ /boot/grub/grub.conf
-
-	einfo "GRUB config file has been updated."
-}
-
-theme_switch() {
-	mount_boot_partition
-	detect_bootloader
-
-	if [[ ${bootloader} == "grub" ]]; then
-		theme_switch_grub
-	else
-		theme_switch_lilo
-	fi
-}
-
-# Set some useful variables that we'll be using in various places
-ctty=$(${spl_dir}/bin/fgconsole)
-usleep="${spl_dir}/bin/usleep"
-
-# Default settings
-steps=100
-mode='s'
-cexec=''
-progress=''
-msg=''
-pid=''
-profile="${spl_dir}/cache/profile"
-
-args="$@"
-temp=`getopt -l help,cmd:,theme:,steps:,delay:,mode:,msg:,tty:,exec:,progress:,profile: c:m:t:he: "$@"`
-
-if [ $? != 0 ]; then
-	usage; exit 2
-fi
-
-eval set -- "$temp"
-
-for i ; do
-	case "$i" in
-		-c|--cmd)	op="$2"; shift; shift;;
-		-h|--help)	usage; exit 0;;
-		-m|--mode)	mode="$2"; shift; shift;;
-		-t|--theme)	theme="$2"; shift; shift;;
-		-e|--exec)	cexec="$2"; shift; shift;;
-		--progress)	progress="$2"; shift; shift;;
-		--profile)  profile="$2"; shift; shift;;
-		--steps)	steps="$2"; shift; shift;;
-		--delay)	delay="$2"; shift; shift;;
-		--tty)		tty="$2"; shift; shift;;
-		--msg)		msg="$2"; shift; shift;;
-		--)			shift; break;;
-	esac
-done
-
-util_params="$@"
-
-if [ -z "${op}" ]; then
-	usage
-	exit 0
-fi
-
-rres=$(${spl_dir}/bin/fbres)
-res=$(${spl_util} -c getres -t ${theme})
-yres=${res#*x}
-xres=${res%x*}
-
-case "${op}" in
-	'set')
-		mode='v'
-		set_theme "${theme}" "${tty}" ;;
-	'demo')
-		theme_sanity_check "${theme}"
-		if [ ${mode} == 's' ]; then
-			demo_theme_silent
-		else
-			demo_theme_verbose
-		fi
-		;;
-
-	'benchmark')
-		mode='s'
-		if [ -z "$(which bc)" ]; then
-			err "Benchmarking requires the 'bc' command-line calculator."
-			exit 1
-		fi
-		theme_sanity_check "${theme}"
-		benchmark
-		;;
-
-	'shot')
-		theme_sanity_check "${theme}"
-		if [ ! -x /usr/bin/fbgrab ]; then
-			err "Cannot find /usr/bin/fbgrab"
-			exit 1
-		fi
-
-		if [ ${mode} == 's' ]; then
-			take_shot_silent
-		else
-			take_shot_verbose
-		fi
-		;;
-
-	'switch')
-		theme_sanity_check "${theme}"
-		theme_switch
-		;;
-
-	'list')
-		list_themes
-		;;
-
-	'replay')
-		theme_sanity_check "${theme}"
-		replay "${theme}"
-		;;
-
-	*)	err "Unrecognized command"
-		usage
-		;;
-esac
-
-exit 0
-
-# vim: set ts=4 sts=4:
diff -Naur splashutils-1.5.2.1-old/scripts/splash_manager.in splashutils-1.5.2.1-new/scripts/splash_manager.in
--- splashutils-1.5.2.1-old/scripts/splash_manager.in	1969-12-31 16:00:00.000000000 -0800
+++ splashutils-1.5.2.1-new/scripts/splash_manager.in	2007-09-23 10:57:15.000000000 -0700
@@ -0,0 +1,1008 @@
+#!/bin/bash
+#
+# splash_manager -- a convenience utility to perform various splash-related
+#                   tasks in an easy and user-friendly way
+#
+# Copyright (C) 2005-2007, Michal Januszewski <spock@gentoo.org>
+#
+# This file is a part of the splashutils package.
+#
+# This file is subject to the terms and conditions of the GNU General Public
+# License v2.  See the file COPYING in the main directory of this archive for
+# more details.
+#
+
+# TODO:
+# - support for icons and scripts in themes
+# - support for '-v'
+# - support for 8bpp modes
+
+# BUGS:
+# - replay won't work correctly when started from a tty with a video mode
+#   different from the one used for the silent tty
+
+# System configuration variables
+spl_util=splash_util.static
+spl_daemon=fbsplashd.static
+spl_decor=fbcondecor_ctl
+spl_dir=/lib/splash
+spl_fifo=${spl_dir}/cache/.splash
+spl_pidfile=${spl_dir}/cache/daemon.pid
+themedir=/etc/splash
+
+spl_daemon_exename="$(basename ${spl_daemon})"
+spl_daemon_short="${spl_daemon:0:9}"
+
+cleanup() {
+	killall ${spl_daemon_exename} 2>/dev/null
+	chvt ${ctty}
+}
+
+usage() {
+	cat <<EOTB
+splash_geninitramfs/splashutils-%PKG_VERSION%
+Usage: splash_manager [options] -c <command>
+
+Commands:
+ benchmark
+ demo    test a splash theme
+ list    list available splash themes
+ set     set a splash theme on a specific tty
+ shot    take a screenshot of a selected splash theme
+ switch  switch a splash theme by changing GRUB/LILO config files
+ replay  replay a complete boot sequence using splash profile data
+
+Options:
+ -c, --cmd=CMD      execute CMD
+ -h, --help         display this message
+ -t, --theme=THEME  [bdehsr] theme name
+     --steps=N      [ d    ] use N steps when testing the silent splash
+     --delay=N      [ d    ] delay each step by N seconds
+ -m, --mode=(v|s)   [ d h  ] specify which mode to use (verbose/silent)
+     --tty=N        [bdeh  ] set the theme on the Nth tty
+ -e, --exec=CMD     [   h  ] run CMD on the tty where splash is being tested
+     --progress=N   [   h  ] set progress to N (0-65535)
+     --msg=MSG      [bd h  ] set the main system message to MSG
+     --profile=FILE [     r] read splash profile data from FILE
+
+The letters in the square brackets indicate the commands with which
+specific options can be used: b (bechmark) d (demo), e (set), h (shot),
+s (switch), r (replay).
+
+Examples:
+ splash_manager -c switch -t livecd-2005.0
+   (switch to the 'livecd-2005.0' theme; the new theme will be used
+    after reboot)
+
+ splash_manager -c set -t linux --tty=8
+   (set the 'linux' theme on the 8th tty)
+
+ splash_manager -c demo -t livecd-2005.0 -m s --steps=100
+   (run a demonstration of the 'livecd-2005.0' theme, silent mode;
+    use 100 steps for the progress bar)
+
+ splash_manager -c shot -t foobar -m s --progress=32767 --msg='Smile!'
+   (take a screenshot of the 'foobar' theme, silent mode; set progress
+    to 50% and use 'Smile!' as the main system message)
+EOTB
+}
+
+CGOOD=$'\e[32;01m'
+CWARN=$'\e[33;01m'
+CBAD=$'\e[31;01m'
+CNORM=$'\e[0m'
+CHILITE=$'\e[36;01m'
+CBRACKET=$'\e[34;01m'
+
+# void err(char *msg)
+#   Displays an error message.
+err() {
+	echo -e "${CBAD}Error:${CNORM} $*" >&2
+}
+
+# void einfo(char *msg)
+#   Displays an informational message.
+einfo() {
+	echo -e "${CGOOD}*${CNORM} $*"
+}
+
+# void ewarn(char *msg0
+#   Display a warning message.
+ewarn() {
+	echo -e "${CWARN}*${CNORM} $*"
+}
+
+# void spl_comm(char *msg)
+#   Sends 'msg' to the splash fifo.
+spl_comm() {
+	if [ ! -e ${spl_pidfile} ]; then
+		return 1
+	fi
+
+	if [ "$(pgrep ${spl_daemon_short})" == "$(<${spl_pidfile})" ]; then
+		echo "$*" > ${spl_fifo} &
+	else
+		err "Splash daemon not running!"
+		rm -f "${spl_pidfile}"
+	fi
+}
+
+# void chvt(int n)
+#   Switches to the n-th tty.
+chvt() {
+	local ntty=$1
+
+	if [ -x /usr/bin/chvt ] ; then
+		/usr/bin/chvt ${ntty}
+	else
+		echo -en "\e[12;${ntty}]"
+	fi
+}
+
+
+# void theme_sanity_check(char *theme)
+#   Performs a theme sanity check -- checks whether a theme exists.
+theme_sanity_check() {
+	local theme=$1
+	local t=${res}
+
+	# For verbose mode, we care about the real resolution, not the one
+	# fbsplash would be using for the silent mode.
+	if [ "${mode}" == "v" ]; then
+		t=${rres}
+	fi
+
+	if [ -z "${theme}" ]; then
+		err "You have to specify a theme name."
+		exit 1
+	fi
+
+	if [ ! -e "${themedir}/${theme}/${t}.cfg" ]; then
+		err "Theme '${theme}' doesn't seem to provide a config file for the current resolution (${t})."
+		exit 1
+	fi
+}
+
+# void set_theme(char *theme, int tty)
+#   Sets a theme on a specific tty.
+set_theme() {
+	local theme=$1
+	local tty=$2
+
+	theme_sanity_check "${theme}"
+	[ -z "${tty}" ] && tty="${ctty}"
+	${spl_decor} -c setcfg -t "${theme}" --tty="${tty}"
+	[ "${tty}" == "${ctty}" ] && ${spl_decor} -c setpic -t "${theme}" --tty="${tty}"
+	${spl_decor} -c on --tty=${tty}
+}
+
+# void get_theme(int tty)
+#   Prints the name of the theme that is used on a tty.
+get_theme() {
+	local ctty=$1
+	echo $(${spl_decor} --tty=${ctty} -c getcfg | grep theme | awk '{ print $2 }')
+}
+
+# void get_state(int tty)
+#   Prints 'on' or 'off', indicating fbsplash state on a tty.
+get_state() {
+	local ctty=$1
+	echo $(${spl_decor} --tty=${ctty} -c getstate | cut -f2 -d: | tr -d ' ')
+}
+
+# void check_silent(char *theme, char *res, char *action)
+#   Checks whether a theme supports the silent splash mode.
+check_silent() {
+	local ctheme=$1
+	local cres=$2
+	local action=$3
+
+	if [ -z $(cat "${themedir}/${ctheme}/${cres}.cfg" 2>/dev/null | egrep "^silent(pic|jpeg)=") ]; then
+		[ "${action}" == "test" ] && return 1
+		err "Theme '${ctheme}' doesn't support the silent splash mode."
+		exit 1
+	fi
+}
+
+# void check_verbose(char *theme, char *res, char *action)
+#   Checks whether a theme supports the verbose splash mode.
+check_verbose() {
+	local ctheme=$1
+	local cres=$2
+	local action=$3
+
+	if [ -z $(cat "${themedir}/${ctheme}/${cres}.cfg" 2>/dev/null | egrep "^(pic|jpeg)=") ]; then
+		[ "${action}" == "test" ] && return 1
+		err "Theme '${ctheme}' doesn't support the silent splash mode."
+		exit 1
+	fi
+
+	return 0
+}
+
+set_silent() {
+	trap "cleanup" EXIT
+
+	# Make sure the splash daemon is not running
+	killall -9 ${spl_daemon_exename} 2>/dev/null
+	${spl_daemon} -t "${theme}" --pidfile ${spl_pidfile} ${util_params}
+	pid=$(cat ${spl_pidfile})
+
+	[ -z "${msg}" ] && msg="Testing the '${theme}' theme (\$progress%)..."
+	spl_comm "set message ${msg}"
+	[ -n "${tty}" ] && spl_comm "set tty silent ${tty}"
+	spl_comm "set mode silent"
+	spl_comm "repaint"
+}
+
+exit_silent() {
+	spl_comm "exit"
+
+	while [[ "$(head -n 1 /proc/${pid}/status 2>/dev/null | cut -f2)" == "${spl_daemon_short}" ]]; do
+		sleep 0.5
+	done
+
+	while [ "`fgconsole`" != ${ctty} ] ; do
+		chvt ${ctty}
+	done
+}
+
+benchmark() {
+	check_silent "${theme}" "${res}"
+	set_silent
+
+	step=16
+	timestart=$(date +"%s.%N")
+	for ((i=0;i<65536;i=$i+$step)) ; do
+		echo "progress $i" > ${spl_fifo}
+		echo "paint" > ${spl_fifo}
+	done
+	timeend=$(date +"%s.%N")
+	exit_silent
+	
+	echo "Test took $(echo "$timeend - $timestart" | bc) seconds."
+}
+
+demo_theme_silent() {
+	check_silent "${theme}" "${res}"
+	if [ -z "$(echo ${util_params} | grep -- '--type=')" ]; then
+		export util_params="${util_params} --type=bootup"
+	fi
+	set_silent
+
+	# Set the input device if it exists. This will make it possible to use F2 to
+	# switch from verbose to silent.
+	local t=$(grep -Hsi keyboard /sys/class/input/input*/name | sed -e 's#.*input\([0-9]*\)/name.*#event\1#')
+	if [[ -z "${t}" ]]; then
+		t=$(grep -Hsi keyboard /sys/class/input/event*/device/driver/description | grep -o 'event[0-9]\+')
+		if [[ -z "${t}" ]]; then
+			# Try an alternative method of finding the event device. The idea comes
+			# from Bombadil <bombadil(at)h3c.de>. We're couting on the keyboard controller
+			# being the first device handled by kbd listed in input/devices.
+			t=$(/bin/grep -s -m 1 '^H: Handlers=kbd' /proc/bus/input/devices | grep -o 'event[0-9]*')
+		fi
+	fi
+
+	if [[ -n "${t}" ]]; then
+		spl_comm "set event dev /dev/input/${t}"
+	fi
+
+	if [[ -n "$(pgrep gpm)" ]]; then
+		spl_comm "set gpm"
+	fi
+
+	[ -z "${delay}" ] && delay=0.05
+	step=$((65535/$steps))
+
+	for ((i=0;i<65536;i=$i+$step)) ; do
+		spl_comm "progress $i"
+		spl_comm "paint"
+		sleep ${delay}
+	done
+	spl_comm "progress 65535"
+	spl_comm "paint"
+	exit_silent
+}
+
+replay() {
+	check_silent "${theme}" "${res}"
+
+	if [[ -z "${profile}" ]]; then
+		err "You have to specify a splash profile file."
+		exit 1
+	fi
+
+	if [[ ! -r "${profile}" ]]; then
+		err "Profile file '${profile}' not found."
+		exit 1
+	fi
+
+	trap "cleanup" EXIT
+
+	ctime=0
+
+	if [[ -e /etc/gentoo-release ]]; then
+		export RUNLEVEL="S"
+		export SOFTLEVEL=""
+	fi
+
+	source /sbin/splash-functions.sh
+	splash_setup
+
+	export SPLASH_XRES="$xres"
+	export SPLASH_YRES="$yres"
+	export SPLASH_THEME=${theme}
+
+	while read line ; do
+		arr=($line)
+		t=${arr[0]:0:$((${#arr[0]}-1))}
+		tdec=${t##*.}
+		utime=$((${t%.*}*1000 + ${tdec#0*}*10))
+
+		[[ "$ctime" == "0" ]] && ctime=${utime}
+
+		delay=$((${utime} - ${ctime}))
+		${usleep} "${delay}000"
+		ctime=${utime}
+
+		# Start the splash daemon after rc_init/pre.
+		if [[ -z "${pid}" ]]; then
+			if [[ "${arr[1]}" != "pre" || "${arr[2]}" != "rc_init" ]]; then
+				BOOT_MSG="$(splash_get_boot_message)" ${spl_daemon} -t ${theme} --pidfile ${spl_pidfile} --type=bootup
+				pid=$(cat ${spl_pidfile})
+			fi
+		fi
+
+		case ${arr[1]} in
+			pre)
+				if [[ -x ${themedir}/${theme}/scripts/${arr[2]}-pre ]]; then
+					${themedir}/${theme}/scripts/${arr[2]}-pre ${arr[*]:3}
+				fi
+				;;
+
+			post)
+				if [[ -x ${themedir}/${theme}/scripts/${arr[2]}-post ]]; then
+					${themedir}/${theme}/scripts/${arr[2]}-post ${arr[*]:3}
+				fi
+
+				if [[ -e /etc/gentoo-release && ${arr[3]} == 'boot' ]]; then
+					export RUNLEVEL="3"
+				fi
+				;;
+
+			comm)
+				spl_comm "${arr[*]:2}"
+				;;
+		esac
+	done < ${profile}
+}
+
+set_verbose() {
+	[ -z "${tty}" ]		&& tty=${ctty}
+
+	export cstate=$(get_state ${tty})
+	[ "${cstate}" == "on" ] && export ctheme=$(get_theme ${tty})
+
+	set_theme "${theme}" "${tty}"
+	chvt "${tty}"
+}
+
+exit_verbose() {
+	chvt "${ctty}"
+	if [ "${cstate}" == "on" ]; then
+		set_theme "${ctheme}" "${tty}"
+	else
+		${spl_decor} --tty=${tty} -c off
+	fi
+}
+
+demo_theme_verbose() {
+	[ -z "${delay}" ]	&& delay=5
+
+	check_verbose "${theme}" "${res}"
+	set_verbose
+
+	einfo "Testing the '${theme}' theme..." >/dev/tty${tty}
+	for (( i = 0 ; i < ${delay} ; i = i+1 )) ; do
+		echo -n "$i " >/dev/tty${tty}
+		sleep 1
+	done
+	echo ""
+
+	exit_verbose
+}
+
+take_shot_silent() {
+	check_silent "${theme}" "${res}"
+	set_silent
+
+	[ -z "${progress}" ] && progress=16384
+	spl_comm "progress ${progress}"
+	spl_comm "repaint"
+
+	sleep 1
+	fbgrab ${theme}-${res}-silent.png
+
+	exit_silent
+}
+
+take_shot_verbose() {
+	check_verbose "${theme}" "${res}"
+	set_verbose
+
+	if [ -n "${cexec}" ]; then
+		ps -A -o pid,comm,tty > /tmp/spl-shot-$$.pre
+		openvt -f -c ${tty} -- ${cexec}
+		sleep 2
+		ps -A -o pid,comm,tty > /tmp/spl-shot-$$.post
+		local ce=$(basename "${cexec}")
+		pid=$(diff /tmp/spl-shot-$$.pre /tmp/spl-shot-$$.post | grep "${ce:0:15}" | grep "tty${tty}" | grep '^>' | awk '{ print $2 }')
+		rm -f /tmp/spl-shot-$$.pre /tmp/spl-shot-$$.post
+	fi
+
+	fbgrab ${theme}-${res}-verbose.png
+
+	if [[ -n "${ce}" && -n "${pid}" &&
+	  	  "$(cat /proc/${pid}/status 2>/dev/null | grep 'Name:' | cut -f2)" == "${ce:0:15}" ]]; then
+		kill "${pid}"
+	fi
+	exit_verbose
+}
+
+list_themes() {
+	for i in "${themedir}"/* ; do
+		[ ! -d "${i}" ] && continue
+		[ -z "$(ls "${i}"/*.cfg 2>/dev/null)" ] && continue
+
+		tn="${i/$themedir/}"
+		tn="${tn//\//}"
+
+		echo -n "$tn:"
+		local first=true
+
+		for res in "${i}"/*.cfg ; do
+			res=${res##*/}
+			res=${res/.cfg/}
+
+			[ "$first" != "true" ] && echo -n ","
+			first=false
+			echo -n " ${res}"
+
+			local sil ver
+
+			if check_silent "$tn" "$res" "test"; then
+				sil=true
+			else
+				sil=false
+			fi
+
+			if check_verbose "$tn" "$res" "test"; then
+				ver=true
+			else
+				ver=false
+			fi
+
+			if [[ "$ver" == "true" && "$sil" == "true" ]]; then
+				echo -n " (sv)"
+			elif [[ "$sil" == "true" ]]; then
+				echo -n " (s)"
+			else
+				echo -n " (v)"
+			fi
+		done
+		echo ""
+	done
+}
+
+bootloader=""
+
+detect_bootloader() {
+	if [[ -e /boot/grub/grub.conf && -e /etc/lilo.conf ]]; then
+		ewarn "Both GRUB and LILO seem to be installed and configured. Please"
+		ewarn "select which one should be configured by this script:"
+		ewarn "  1) GRUB"
+		ewarn "  2) LILO"
+		while true; do
+			echo -n "Your choice [1]: "
+			read choice
+			if [ -z "${choice}" ]; then
+				bootloader="grub"
+				return
+			elif [ "${choice}" == 1 ]; then
+				bootloader="grub"
+				return
+			elif [ "${choice}" == 2 ]; then
+				bootloader="lilo"
+				return
+			else
+				err "You have chosen an invalid number."
+			fi
+		done
+	elif [[ -e /boot/grub/grub.conf ]]; then
+		bootloader="grub"
+	elif [[ -e /etc/lilo.conf ]]; then
+		bootloader="lilo"
+	else
+		err "It appears that none of the supported bootloaders (GRUB, LILO) is installed"
+		err "on your system. Please install one of these or configure fbsplash/splashutils"
+		err "manually."
+		exit 1
+	fi
+}
+
+# The code of mount_boot_partition() is stolen from Gentoo's mount-boot.eclass.
+mount_boot_partition() {
+	# note that /dev/BOOT is in the Gentoo default /etc/fstab file
+	local fstabstate="$(cat /etc/fstab | awk '!/^#|^[[:blank:]]+#|^\/dev\/BOOT/ {print $2}' | egrep "^/boot$" )"
+	local procstate="$(cat /proc/mounts | awk '{print $2}' | egrep "^/boot$" )"
+	local proc_ro="$(cat /proc/mounts | awk '{ print $2, $4 }' | sed -n '/\/boot/{ /[ ,]\?ro[ ,]\?/p }' )"
+
+	if [ -n "${fstabstate}" ] && [ -n "${procstate}" ]; then
+		if [ -n "${proc_ro}" ]; then
+			einfo "Your boot partition, detected as being mounted as /boot, is read-only."
+			einfo "Remounting it in read-write mode ..."
+			mount -o remount,rw /boot &>/dev/null
+			if [ "$?" -ne 0 ]; then
+				err "Unable to remount in rw mode. Please do it manually!"
+				exit 1
+			fi
+		else
+			einfo "Your boot partition was detected as being mounted as /boot."
+		fi
+	elif [ -n "${fstabstate}" ] && [ -z "${procstate}" ]; then
+		mount /boot -o rw &>/dev/null
+		if [ "$?" -eq 0 ]; then
+			einfo "Your boot partition was not mounted as /boot, but this"
+			einfo "script was able to mount it without additional intervention."
+		else
+			err "Cannot automatically mount your /boot partition."
+			err "Your boot partition has to be mounted rw before the splash configuration"
+			err "can be continued."
+			exit 1
+		fi
+	else
+		einfo "Assuming you do not have a separate /boot partition."
+	fi
+}
+
+# int input_number(int min, int max, int default)
+#   Asks the user to enter a number in the range [min;max].
+input_number() {
+	local min=$1
+	local max=$2
+	local default=$3
+	local done=false
+
+	echo -n "Your choice: "
+
+	while [[ ${done} != "true" ]]; do
+		read n
+		n=${n%% *}
+
+		if [[ -z "${n}" || "${n}" -lt ${min} || "${n}" -gt ${max} ]]; then
+			err "Invalid number. Try again. Enter a number in the range: ${min}-${max}}."
+			echo -n "Your choice: "
+		else
+			done="true"
+		fi
+	done
+
+	return ${n}
+}
+
+# bool input_bool(bool default)
+#   Asks the user to enter 'y' or 'n'.
+input_bool() {
+	local default=$1
+	local choice
+
+	echo -n "Your choice "
+
+	if [[ "${default}" == "y" ]]; then
+		echo -n "[Y/n]: "
+	else
+		echo -n "[y/N]: "
+	fi
+
+	read choice
+
+	if [[ "${default}" == "y" ]]; then
+		if [[ "${choice}" != "n" && "${choice}" != "N" ]]; then
+			return 0
+		else
+			return 1
+		fi
+	else
+		if [[ "${choice}" != "y" && "${choice}" != "Y" ]]; then
+			return 1
+		else
+			return 0
+		fi
+	fi
+}
+
+# void theme_switch_initrd(char *initrd)
+#   Asks the user whether (s)he wants to generate and use a new initrd.
+theme_switch_initrd() {
+	local initrd=$1
+	newinitrd=""
+	want_initrd=false
+
+	if [ -z "${initrd}" ]; then
+		einfo "It appears that you are not using an initrd. Do you want this script"
+		einfo "to automatically generate one for use with the '${theme}' theme?"
+		if input_bool 'y'; then
+			want_initrd=true
+		fi
+	elif [ "${initrd:0:13}" == "/boot/splash/" ]; then
+		want_initrd=true
+	else
+		echo ""
+		einfo "It appears that you are already using an initrd:"
+		einfo "  '${initrd}'"
+		einfo "Do you want this script to automatically generate another initrd for"
+		einfo "use with the '${theme}' theme?"
+		einfo "The new initrd will be used instead of the current one."
+		if input_bool 'n'; then
+			want_initrd=true
+		fi
+	fi
+
+	if [ ${want_initrd} == "true" ]; then
+		[ ! -d /boot/splash ] && mkdir /boot/splash
+		newinitrd="/boot/splash/initrd-spl-${theme}-all"
+		splash_geninitramfs -g "${newinitrd}" -v "${theme}"
+	fi
+}
+
+theme_switch_lilo() {
+	local cnt=0
+	local entries
+	local lines
+	local want_name=false
+	local linecnt=1
+
+	# Display a list of entries from lilo.conf and ask the user to select one of them.
+	einfo "Please select which kernel should be configured for use with splashutils:"
+	while read i ; do
+		line=$(echo ${i})
+		if [[ ${i:0:5} == "image" ]]; then
+			want_name=true
+			lines[$cnt]="$linecnt"
+		fi
+
+		if [[ ${want_name} == "true" && ${i:0:5} == "label" ]]; then
+			i=$(echo ${i} | cut -d= -f2)
+			i=$(echo ${i})
+			entries[$cnt]="$i"
+			cnt=$(($cnt+1))
+			printf "%3d) %s\n" "$cnt" "$i"
+			want_name=false
+		fi
+		linecnt=$(($linecnt+1))
+	done < /etc/lilo.conf
+
+	input_number 1 ${cnt} 1
+	n=$(($?-1))
+	einfo "Configuring '${entries[$n]}'.."
+
+	line=${lines[$n]}
+	cp /etc/lilo.conf /etc/lilo.conf.work.$$
+
+	initrd="$(awk "FNR == $line {
+				print ;
+				while(getline > 0 && \$1 != \"image\") {
+						print \$0
+				}
+			}" /etc/lilo.conf.work.$$ | grep "^[[:space:]]*initrd")"
+	initrd=$(echo "$initrd" | cut -f2 -d'=')
+
+	theme_switch_initrd "${initrd}"
+	cp /etc/lilo.conf /etc/lilo.conf.backup
+
+	awk "FNR == $(($line+1)) {
+		initrd=0
+		if (\"${newinitrd}\" != \"\") {
+			initrd=1
+		}
+
+		do {
+			if (\$1 ~ /^append/) {
+				break;
+			} else if (\$1 ~ /^image/ || \$1 ~ /^other/) {
+				print \"\\tappend = \\\"splash=silent,fadein,theme:${theme} console=tty1\\\"\"
+				if (initrd == 1) {
+					print \"\\\tinitrd = ${newinitrd}\"
+				}
+				print \$0
+				next
+			} else {
+				if (initrd == 1 && \$1 ~ /^initrd/) {
+					sub(/initrd.*/, \"initrd = ${newinitrd}\", \$0)
+					initrd=0
+				}
+				print \$0
+			}
+		} while (getline > 0)
+
+		splash=0
+		cons=0
+		quiet=0
+		full=\$0
+		\$0=gensub(/.*\"([^\"]+)\"/,\"\\\\1\",\"g\",\$0)
+		sub(/\".*/,\"\",\$0)
+		for(i=1; i<=NF+1; i++) {
+			if (substr(\$i,0,6) == \"splash\") {
+				splash=1
+			} else if (\$i == \"console=tty1\") {
+				cons=1
+			}
+		}
+		if (splash == 1) {
+			sub(/splash=[^ ]+/, \"splash=silent,fadein,theme:${theme}\", \$0)
+		} else {
+			\$0=\$0 \" splash=silent,fadein,theme:${theme}\"
+		}
+		if (cons == 0) {  \$0 = \$0 \" console=tty1\"	}
+
+		sub(/\".*\"/, \"\\\"\" \$0 \"\\\"\", full)
+		print full
+
+		if (initrd) {
+			getline
+			while (!(\$1 ~ /^image/) && !(\$1 ~ /^other/)) {
+				if (\$1 ~ /^initrd/) {
+					sub(/initrd.*/, \"initrd = ${newinitrd}\", \$0)
+					initrd=0
+				}
+				print \$0
+				getline
+			}
+			if (initrd) {
+				print \"\\tinitrd = ${newinitrd}\"
+			}
+			print \$0
+		}
+		next
+	}
+
+	FNR != $(($line+1)) { print \$0 }" /etc/lilo.conf.work.$$ > /etc/lilo.conf.tmp.$$
+
+	rm /etc/lilo.conf.work.$$
+	mv /etc/lilo.conf.tmp.$$ /etc/lilo.conf
+
+	einfo "LILO config file has been updated."
+}
+
+theme_switch_grub() {
+	local cnt="0"
+	local entries
+	local lines
+	local done=false
+
+	# Display a list of entries from grub.conf and ask the user to select one of them.
+	einfo "Please select which kernel should be configured for use with splashutils:"
+	grep -n '^[[:space:]]*title' /boot/grub/grub.conf > /tmp/splash_mngr.$$
+	while read i ; do
+		line=$(echo "${i}" | cut -d: -f1)
+		i=$(echo "${i}" | cut -d: -f2)
+		i=${i:6}
+		entries[$cnt]="$i"
+		lines[$cnt]="$line"
+		cnt=$(($cnt+1))
+		printf "%3d) %s\n" "$cnt" "$i"
+	done < /tmp/splash_mngr.$$
+	rm /tmp/splash_mngr.$$
+
+	input_number 1 ${cnt} 1
+	n=$(($?-1))
+	einfo "Configuring '${entries[$n]}'.."
+
+	line=${lines[$n]}
+	t="$(sed -e "${line}p" -e 'd' /boot/grub/grub.conf)"
+
+	if [[ "$(echo ${t})" != "title ${entries[$n]}" ]]; then
+		err "The GRUB config file appears to have been modified while this script was"
+		err "working. Please run it again after making sure no one is modifying"
+		err "/boot/grub/grub.conf."
+		exit 1
+	fi
+
+	cp /boot/grub/grub.conf /boot/grub/grub.conf.work.$$
+
+	initrd="$(awk "FNR == $line {
+				print ;
+				while(getline > 0 && \$1 != \"title\") {
+						print \$0
+				}
+			}" /boot/grub/grub.conf.work.$$ | grep "^[[:space:]]*initrd")"
+	initrd=$(echo "$initrd" | cut -f2 -d' ')
+
+	theme_switch_initrd "${initrd}"
+	cp /boot/grub/grub.conf /boot/grub/grub.conf.backup
+
+	awk "FNR == $line {
+		initrd=0
+		if (\"${newinitrd}\" != \"\") {
+			initrd=1
+		}
+
+		while(\$1 != \"kernel\") {
+			if (initrd == 1 && \$1 == \"initrd\") {
+				sub(/initrd .*/, \"initrd ${newinitrd}\", \$0)
+				initrd=0
+			}
+			print \$0
+			if (getline <= 0) {
+				exit 0
+			}
+		}
+		splash=0
+		cons=0
+		quiet=0
+		for(i=1; i<=NF+1; i++) {
+			if (substr(\$i,0,6) == \"splash\") {
+				splash=1
+			} else if (\$i == \"console=tty1\") {
+				cons=1
+			}
+		}
+		if (splash == 1) {
+			sub(/splash=[^ ]+/, \"splash=silent,fadein,theme:${theme}\", \$0)
+			printf \"%s\",\$0
+		} else {
+			printf \"%s splash=silent,fadein,theme:${theme}\", \$0
+		}
+		if (cons == 0) {  printf \" %s\", \"console=tty1\"	}
+		printf \"\n\"
+
+		if (initrd) {
+			getline
+			while (\$1 != \"title\") {
+				if (\$1 == \"initrd\") {
+					sub(/initrd .*/, \"initrd ${newinitrd}\", \$0)
+					initrd=0
+				}
+				print \$0
+				if (getline <= 0) {
+					break
+				}
+			}
+			if (initrd) {
+				print \"\\tinitrd ${newinitrd}\"
+			}
+			print \$0
+		}
+		next
+	}
+
+	FNR != $line { print \$0 }" /boot/grub/grub.conf.work.$$
+	#> /boot/grub/grub.conf.tmp.$$
+
+	rm /boot/grub/grub.conf.work.$$
+#	mv /boot/grub/grub.conf.tmp.$$ /boot/grub/grub.conf
+
+	einfo "GRUB config file has been updated."
+}
+
+theme_switch() {
+	mount_boot_partition
+	detect_bootloader
+
+	if [[ ${bootloader} == "grub" ]]; then
+		theme_switch_grub
+	else
+		theme_switch_lilo
+	fi
+}
+
+# Set some useful variables that we'll be using in various places
+ctty=$(${spl_dir}/bin/fgconsole)
+usleep="${spl_dir}/bin/usleep"
+
+# Default settings
+steps=100
+mode='s'
+cexec=''
+progress=''
+msg=''
+pid=''
+profile="${spl_dir}/cache/profile"
+
+args="$@"
+temp=`getopt -l help,cmd:,theme:,steps:,delay:,mode:,msg:,tty:,exec:,progress:,profile: c:m:t:he: "$@"`
+
+if [ $? != 0 ]; then
+	usage; exit 2
+fi
+
+eval set -- "$temp"
+
+for i ; do
+	case "$i" in
+		-c|--cmd)	op="$2"; shift; shift;;
+		-h|--help)	usage; exit 0;;
+		-m|--mode)	mode="$2"; shift; shift;;
+		-t|--theme)	theme="$2"; shift; shift;;
+		-e|--exec)	cexec="$2"; shift; shift;;
+		--progress)	progress="$2"; shift; shift;;
+		--profile)  profile="$2"; shift; shift;;
+		--steps)	steps="$2"; shift; shift;;
+		--delay)	delay="$2"; shift; shift;;
+		--tty)		tty="$2"; shift; shift;;
+		--msg)		msg="$2"; shift; shift;;
+		--)			shift; break;;
+	esac
+done
+
+util_params="$@"
+
+if [ -z "${op}" ]; then
+	usage
+	exit 0
+fi
+
+rres=$(${spl_dir}/bin/fbres)
+res=$(${spl_util} -c getres -t ${theme})
+yres=${res#*x}
+xres=${res%x*}
+
+case "${op}" in
+	'set')
+		mode='v'
+		set_theme "${theme}" "${tty}" ;;
+	'demo')
+		theme_sanity_check "${theme}"
+		if [ ${mode} == 's' ]; then
+			demo_theme_silent
+		else
+			demo_theme_verbose
+		fi
+		;;
+
+	'benchmark')
+		mode='s'
+		if [ -z "$(which bc)" ]; then
+			err "Benchmarking requires the 'bc' command-line calculator."
+			exit 1
+		fi
+		theme_sanity_check "${theme}"
+		benchmark
+		;;
+
+	'shot')
+		theme_sanity_check "${theme}"
+		if [ ! -x /usr/bin/fbgrab ]; then
+			err "Cannot find /usr/bin/fbgrab"
+			exit 1
+		fi
+
+		if [ ${mode} == 's' ]; then
+			take_shot_silent
+		else
+			take_shot_verbose
+		fi
+		;;
+
+	'switch')
+		theme_sanity_check "${theme}"
+		theme_switch
+		;;
+
+	'list')
+		list_themes
+		;;
+
+	'replay')
+		theme_sanity_check "${theme}"
+		replay "${theme}"
+		;;
+
+	*)	err "Unrecognized command"
+		usage
+		;;
+esac
+
+exit 0
+
+# vim: set ts=4 sts=4:
diff -Naur splashutils-1.5.2.1-old/scripts/splash_resize splashutils-1.5.2.1-new/scripts/splash_resize
--- splashutils-1.5.2.1-old/scripts/splash_resize	2007-09-23 10:55:59.000000000 -0700
+++ splashutils-1.5.2.1-new/scripts/splash_resize	1969-12-31 16:00:00.000000000 -0800
@@ -1,76 +0,0 @@
-#!/usr/bin/perl 
-#
-# splash_resize -- a helper script to automatically create theme configs
-#                  for different resolutions
-#
-# (c) 2004 Michal Januszewski <spock@gentoo.org>
-#
-# NOTE: This script only creates config files, it doesn't provide the necessary
-#       images - they have to be created by hand.
-#
-# Usage: splash_resize <theme> <old_res> <new_res>
-#
-# $Header: /srv/cvs/splash/utils/scripts/splash_resize,v 1.2 2004/11/12 17:42:16 spock Exp $
-
-if ($#ARGV < 2) {
-	print "splash_resize/splashutils-%PKG_VERSION%\n";
-	print "Usage: splash_resize <theme> <old_res> <new_res>\n";
-	exit 0;
-}
-
-$theme = $ARGV[0];
-$old_res = $ARGV[1];
-$new_res = $ARGV[2];
-
-open IN,"</etc/splash/$theme/$old_res.cfg" || die "Can't open source config file."; 
-open OUT,">/etc/splash/$theme/$new_res.cfg" || die "Can't write to destination config file."; 
-
-$old_res =~ /(\d+)x(\d+)/; $old_x = $1; $old_y = $2;
-$new_res =~ /(\d+)x(\d+)/; $new_x = $1; $new_y = $2;
-
-while(<IN>) { 
-
-	if (/^\s*tx=(\d+)/ || /^\s*tw=(\d+)/ || /^\s*text_x=(\d+)/) { 
-		$t = int(($1/$old_x)*$new_x); 
-		s/=\d+/=$t/; 
-	} elsif (/^\s*ty=(\d+)/ || /^\s*th=(\d+)/ || /^\s*text_y=(\d+)/) { 
-		$t = int(($1/$old_y)*$new_y); 
-		s/=\d+/=$t/; 
-	} elsif (/^\s*text_size=(\d+)/) { 
-		$t = int(($1/$old_y)*$new_y);
-		s/=\d+/=$t/; 
-
-	} elsif (/^\s*box\s*[a-zA-Z ]*\s*(\d+)\s+(\d+)\s+(\d+)\s+(\d+)/) { 
-	
-		$x0 = int(($1/$old_x)*$new_x); 
-		$x1 = int(($3/$old_x)*$new_x); 
-		$y0 = int(($2/$old_y)*$new_y);  
-		$y1 = int(($4/$old_y)*$new_y); 
-		s/box\s*([a-zA-Z ]*)\s*\d+\s+\d+\s+\d+\s+\d+\s*(.*)/box $1 $x0 $y0 $x1 $y1 $2/;
-
-	} elsif (/^\s*(silent)?pic(256)?=(.*)\n/) {
-		
-		$sil = $1;
-		$col = $2;
-		$src = $3;
-		
-		if ($src =~ /$max_res/) {
-			$dest = $src;
-			$dest =~ s/$old_res/$new_res/g;
-		} else {
-			$dest = $src;
-			$dest =~ s/\.[^\.]+$//g;
-			$dest .= "-$new_res.jpeg";
-		}
-	}
-
-	s/$old_res/$new_res/g; 
-
-	print OUT $_;
-}
-
-close IN; 
-close OUT;
-
-print "Resized config file for theme '$theme' for '$new_res' resolution successfully created.\n";
-
diff -Naur splashutils-1.5.2.1-old/scripts/splash_resize.in splashutils-1.5.2.1-new/scripts/splash_resize.in
--- splashutils-1.5.2.1-old/scripts/splash_resize.in	1969-12-31 16:00:00.000000000 -0800
+++ splashutils-1.5.2.1-new/scripts/splash_resize.in	2007-09-23 10:57:15.000000000 -0700
@@ -0,0 +1,76 @@
+#!/usr/bin/perl 
+#
+# splash_resize -- a helper script to automatically create theme configs
+#                  for different resolutions
+#
+# (c) 2004 Michal Januszewski <spock@gentoo.org>
+#
+# NOTE: This script only creates config files, it doesn't provide the necessary
+#       images - they have to be created by hand.
+#
+# Usage: splash_resize <theme> <old_res> <new_res>
+#
+# $Header: /srv/cvs/splash/utils/scripts/splash_resize,v 1.2 2004/11/12 17:42:16 spock Exp $
+
+if ($#ARGV < 2) {
+	print "splash_resize/splashutils-%PKG_VERSION%\n";
+	print "Usage: splash_resize <theme> <old_res> <new_res>\n";
+	exit 0;
+}
+
+$theme = $ARGV[0];
+$old_res = $ARGV[1];
+$new_res = $ARGV[2];
+
+open IN,"</etc/splash/$theme/$old_res.cfg" || die "Can't open source config file."; 
+open OUT,">/etc/splash/$theme/$new_res.cfg" || die "Can't write to destination config file."; 
+
+$old_res =~ /(\d+)x(\d+)/; $old_x = $1; $old_y = $2;
+$new_res =~ /(\d+)x(\d+)/; $new_x = $1; $new_y = $2;
+
+while(<IN>) { 
+
+	if (/^\s*tx=(\d+)/ || /^\s*tw=(\d+)/ || /^\s*text_x=(\d+)/) { 
+		$t = int(($1/$old_x)*$new_x); 
+		s/=\d+/=$t/; 
+	} elsif (/^\s*ty=(\d+)/ || /^\s*th=(\d+)/ || /^\s*text_y=(\d+)/) { 
+		$t = int(($1/$old_y)*$new_y); 
+		s/=\d+/=$t/; 
+	} elsif (/^\s*text_size=(\d+)/) { 
+		$t = int(($1/$old_y)*$new_y);
+		s/=\d+/=$t/; 
+
+	} elsif (/^\s*box\s*[a-zA-Z ]*\s*(\d+)\s+(\d+)\s+(\d+)\s+(\d+)/) { 
+	
+		$x0 = int(($1/$old_x)*$new_x); 
+		$x1 = int(($3/$old_x)*$new_x); 
+		$y0 = int(($2/$old_y)*$new_y);  
+		$y1 = int(($4/$old_y)*$new_y); 
+		s/box\s*([a-zA-Z ]*)\s*\d+\s+\d+\s+\d+\s+\d+\s*(.*)/box $1 $x0 $y0 $x1 $y1 $2/;
+
+	} elsif (/^\s*(silent)?pic(256)?=(.*)\n/) {
+		
+		$sil = $1;
+		$col = $2;
+		$src = $3;
+		
+		if ($src =~ /$max_res/) {
+			$dest = $src;
+			$dest =~ s/$old_res/$new_res/g;
+		} else {
+			$dest = $src;
+			$dest =~ s/\.[^\.]+$//g;
+			$dest .= "-$new_res.jpeg";
+		}
+	}
+
+	s/$old_res/$new_res/g; 
+
+	print OUT $_;
+}
+
+close IN; 
+close OUT;
+
+print "Resized config file for theme '$theme' for '$new_res' resolution successfully created.\n";
+
