diff -Naur mysql-5.0.37-old/configure.in mysql-5.0.37-new/configure.in
--- mysql-5.0.37-old/configure.in	2007-03-10 10:26:49.000000000 -0800
+++ mysql-5.0.37-new/configure.in	2007-03-10 10:28:25.000000000 -0800
@@ -258,6 +258,9 @@
 AC_MSG_CHECKING("return type of sprintf")
 
 #check the return type of sprintf
+if test "${mysql_sprintf_return_type+set}" = set ; then
+   AC_MSG_RESULT("(cached) ${mysql_sprintf_return_type}")
+else
 case $SYSTEM_TYPE in
   *netware*)
     AC_DEFINE(SPRINTF_RETURNS_INT, [1]) AC_MSG_RESULT("int")
@@ -274,7 +277,7 @@
       return -1;
      }
    ],
-   [AC_DEFINE(SPRINTF_RETURNS_INT, [1], [POSIX sprintf])
+   [mysql_sprintf_return_type="int"
    AC_MSG_RESULT("int")],
    [AC_TRY_RUN([
  int main()
@@ -285,13 +288,21 @@
        return 0;
      return -1;
    }           ],
-               [AC_DEFINE(SPRINTF_RETURNS_PTR, [1], [Broken sprintf])
+               [mysql_sprintf_return_type="ptr"
                 AC_MSG_RESULT("ptr")],
-               [AC_DEFINE(SPRINTF_RETURNS_GARBAGE, [1], [Broken sprintf])
+               [mysql_sprintf_return_type="garbage"
                 AC_MSG_RESULT("garbage")])
    ])
     ;;
 esac
+fi
+if   test "x${mysql_sprintf_return_type}" = "xint" ; then
+  AC_DEFINE(SPRINTF_RETURNS_INT, [1], [POSIX sprintf])
+elif test "x${mysql_sprintf_return_type}" = "xptr" ; then
+  AC_DEFINE(SPRINTF_RETURNS_PTR, [1], [Broken sprintf])
+else
+  AC_DEFINE(SPRINTF_RETURNS_GARBAGE, [1], [Broken sprintf])
+fi
 
 AC_PATH_PROG(uname_prog, uname, no)
 
@@ -862,31 +873,29 @@
   AC_LANG_CPLUSPLUS
 
   atom_ops=
-  AC_TRY_RUN([
+  AC_TRY_LINK([
 #include <asm/atomic.h>
-int main()
-{
+  ],
+  [
   atomic_t v;
 
   atomic_set(&v, 23);
   atomic_add(5, &v);
   return atomic_read(&v) == 28 ? 0 : -1;
-}
   ],
   [AC_DEFINE([HAVE_ATOMIC_ADD], [1],
              [atomic_add() from <asm/atomic.h> (Linux only)])
    atom_ops="${atom_ops}atomic_add "],
   )
-  AC_TRY_RUN([
+  AC_TRY_LINK([
 #include <asm/atomic.h>
-int main()
-{
+  ],
+  [
   atomic_t v;
 
   atomic_set(&v, 23);
   atomic_sub(5, &v);
   return atomic_read(&v) == 18 ? 0 : -1;
-}
   ],
   [AC_DEFINE([HAVE_ATOMIC_SUB], [1],
              [atomic_sub() from <asm/atomic.h> (Linux only)])
@@ -955,7 +964,7 @@
     AC_MSG_RESULT([no])
     ;;
   *)
-AC_TRY_RUN([
+AC_TRY_COMPILE([
 #ifdef HAVE_STDLIB_H
 #include <stdlib.h>
 #endif
@@ -967,12 +976,10 @@
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
-
-int main()
-{
+],
+[
   int8 i;
   return 0;
-}
 ],
 [AC_DEFINE([HAVE_INT_8_16_32], [1],
            [whether int8, int16 and int32 types exist])
